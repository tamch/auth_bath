// Generated by Apple Swift version 3.1 (swiftlang-802.0.53 clang-802.0.42)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if defined(__has_attribute) && __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import QuartzCore;
@import UIKit;
@import CoreGraphics;
@import QuickLook;
@import Foundation;
@import ObjectiveC;
@import Photos;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"

@interface CALayer (SWIFT_EXTENSION(SAPFiori))
@end

@class NSBundle;
@class NSCoder;

/// This <code>UIViewController</code> is base controller class to display a welcome/launch screen to the application for onboarding.
/// <ul>
///   <li>
///   </li>
/// </ul>
SWIFT_CLASS("_TtC8SAPFiori20FUIWelcomeController")
@interface FUIWelcomeController : UIViewController
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class UILabel;
@class FUIOnboardingButton;
@class FUIAutoResizingTextField;
@protocol FUIWelcomeControllerDelegate;
@protocol UIViewControllerTransitionCoordinator;
@class UIStoryboardSegue;
@class UITextField;

/// The Activation Screen is presented after the Welcome Screen in the case of an onboarding scenario
/// where the application has not been configured, and should prompt the end user to pick between email
/// address entry or the barcode scanner, to obtain connection  settings. The screen displays a
/// headline Label with the title and a detailLabel with instructions on how to start the
/// activation process and options to enter the email address or click the Scan button to proceed to
/// the next step in the onboarding process.
SWIFT_CLASS("_TtC8SAPFiori19FUIActivationScreen")
@interface FUIActivationScreen : FUIWelcomeController <UITextFieldDelegate>
/// Creates a <code>FUIActivationScreen</code> object from storyboard and intitialize subview compoennts.
///
/// returns:
/// An FUIActivationScreen object.
+ (FUIActivationScreen * _Nonnull)createInstanceFromStoryboard SWIFT_WARN_UNUSED_RESULT;
/// headline Label.  Setting `headlineLabel.text displays the activation text on the screen; otherwise, framework displays the default text.
@property (nonatomic, readonly, strong) IBOutlet UILabel * _Null_unspecified headlineLabel;
/// detail Label.  Setting detailLabel.text displays the  activation instructions on the screen otherwise, framework displays the default text.
@property (nonatomic, readonly, strong) IBOutlet UILabel * _Null_unspecified detailLabel;
/// primaryActionButton.  Setting primaryActionButton.title displays the specific title otherwise, framework displays the default title ‘Next’.
@property (nonatomic, readonly, strong) IBOutlet FUIOnboardingButton * _Null_unspecified primaryActionButton;
/// subheadlineLabel Label.  Setting subheadlineLabel.text displays the  activation instructions on the screen otherwise, framework displays the default text.
@property (nonatomic, readonly, strong) IBOutlet UILabel * _Null_unspecified subheadlineLabel;
/// secondaryActionButton.  Setting secondaryActionButton.title displays the specific title otherwise, framework displays the default title ‘Next’.
@property (nonatomic, readonly, strong) IBOutlet FUIOnboardingButton * _Null_unspecified secondaryActionButton;
/// email Textfield. Entering the email address and clicking on the primaryActionButton iniitates the onboarding process with the discovery service.
@property (nonatomic, readonly, strong) FUIAutoResizingTextField * _Nonnull emailTextField;
/// The <code>FUIWelcomeControllerDelegate</code> implementation.
@property (nonatomic, weak) id <FUIWelcomeControllerDelegate> _Nullable delegate;
/// :nodoc:
- (void)awakeFromNib;
/// :nodoc:
- (void)viewDidLoad;
/// :nodoc:
- (void)viewWillAppear:(BOOL)animated;
/// :nodoc:
- (void)viewWillDisappear:(BOOL)animated;
/// :nodoc:
- (void)didReceiveMemoryWarning;
/// :nodoc:
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
/// :nodoc:
- (void)viewDidLayoutSubviews;
/// :nodoc:
- (void)prepareForSegue:(UIStoryboardSegue * _Nonnull)segue sender:(id _Nullable)sender;
/// :nodoc:
- (BOOL)textFieldShouldReturn:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// <code>NibDesignableProtocol</code>-compliant implementation of <code>UIView</code>
/// <h2>See also</h2>
/// <code>NibDesignableProtocol</code>
SWIFT_CLASS("_TtC8SAPFiori13NibDesignable")
@interface NibDesignable : UIView
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// <code>FUIActivityControl</code> is a stand-alone component supporting user activities. By default, it supports phone, email, message, videoCall. <code>FUIContactCell</code> embed with a <code>FUIActivityControl</code> by default.
/// It can contain most 3 activities.
/// <h2>Code usage:</h2>
/// \code
/// //You can create your own activity object if you want.
/// let myCustomActivity = FUIActivityItem(icon: UIImage(named: "asset"), identifier: "mycustomer.twilio")
/// let activities: [FUIActivityItem] = [FUIActivityItem.phone, FUIActivityItem.message, myCustomActivity]
///
/// //Create a FUIActivityControl object.
/// let activityControl = FUIActivityControl()
/// activityControl.addActivities(activities)
/// activityControl.delegate = self
///
/// //Optionally, set an item size (if nil, intrinsic size of image will be used)
/// activityControl.itemSize = CGSize(width: 44.0, height: 44.0)
///
/// //Optionally, set a limit to visible items (useful for hiding items in `.compact` horizontal mode)
/// activityControl.maxVisibleItems = 3
///
/// //Optionally, set the inter-item spacing (useful for showing more items in `.compact` horizontal mode)
/// activityControl.spacing = 10.0
///
/// //Implement this method in your class to handle action.
/// func activityControl(_ activityControl: FUIActivityControl, didSelectActivity activityItem: FUIActivityItem) {
///     switch activityItem {
///         case FUIActivityItem.phone:
///            //do something
///         case FUIActivityItem.message:
///            //do something
///         case myCustomActivity:
///            //do something
///         default:
///            break
///     }
/// }
///
/// \endcode
SWIFT_CLASS("_TtC8SAPFiori18FUIActivityControl")
@interface FUIActivityControl : NibDesignable
/// Limits on visible items in activity control.
@property (nonatomic) NSInteger maxVisibleItems;
/// Inter-item spacing between items in control.  Follows behavior of <code>UIStackView.spacing</code> property.  Defaults to 10.0.
@property (nonatomic) CGFloat spacing;
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
@property (nonatomic, readonly) Class _Nonnull nibLoadingClass;
@end


/// A <code>UITableViewCell</code> subclass, which supports limited configuration of separator line visibility.
SWIFT_CLASS("_TtC8SAPFiori20FUIBaseTableViewCell")
@interface FUIBaseTableViewCell : UITableViewCell
/// The set of edges of the view, which should display a separator line.  <em>This property is designed to manage cell separators</em> <em>only</em> <em>at the  beginning or end of a section.</em>  For all other separator lines, you should use <code>UITableView.separatorStyle</code>, or <code>UITableView.separatorInset</code>, to configure visibility.
/// Defaults to <code>.all</code>.
/// important:
/// Only top and bottom edges support separator lines.  Options <code>.left</code> and <code>.right</code> will be ignored.
/// \code
/// override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
///     let cell = tableView.dequeueReusableCell(withIdentifier: FUIObjectTableViewCell.reuseIdentifier, for: indexPath as IndexPath) as! FUIObjectTableViewCell
///
///     if indexPath.row == 0 { cell.separators = .bottom }
///     if indexPath.row == tableView.numberOfRows(inSection: indexPath.section) - 1 { cell.separators = .top }
///     // or
///     if tableView.numberOfRows(inSection: indexPath.section) == 1 { cell.separators = [] }
///
/// \endcode
@property (nonatomic) UIRectEdge separators;
/// :nodoc:
- (void)layoutSubviews;
/// :nodoc:
- (void)prepareForReuse;
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=3.0);
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// <code>NibDesignableProtocol</code>-compliant implementation of <code>UITableViewCell</code>
/// <h2>See also</h2>
/// <code>NibDesignableProtocol</code>
SWIFT_CLASS("_TtC8SAPFiori33NibDesignableFUIBaseTableViewCell")
@interface NibDesignableFUIBaseTableViewCell : FUIBaseTableViewCell
/// :nodoc:
@property (nonatomic, readonly, strong) UIView * _Nonnull nibContainerView;
/// :nodoc:
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class FUIAttachmentsViewController;

/// The reusable UI component implemented as an UITableViewCell
/// to manage selecting attachments.
/// The application must provide a list of <code>FUIAttachmentAction</code> implementations for the
/// desired type of attachments. The app can use the built-in types or implement additional types as desired.
/// important:
/// the cell’s parent <code>UITableViewController</code> should subclass <code>FUIFormTableViewController</code>.
/// There are two built-in <code>FUIAttachmentAction</code>:
/// <ul>
///   <li>
///     <code>FUIAddPhotoAttachmentAction</code>: Choose photo from the photo library.
///   </li>
///   <li>
///     <code>FUITakePhotoAttachmentAction</code>: Take photo using the camera.
///   </li>
/// </ul>
/// \code
/// override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
///     let cell = tableView.dequeueReusableCell(withIdentifier: FUIAttachmentsFormCell.reuseIdentifier, for: indexPath) as! FUIAttachmentsFormCell
///     cell.attachmentsController.delegate = self
///     cell.attachmentsController.dataSource = self
///     
///     let addPhotoAction = FUIAddPhotoAttachmentAction()
///     addPhotoAction.delegate = self
///     cell.attachmentsController.addAttachmentAction(addPhotoAction)
///     
///     let takePhotoAction = FUITakePhotoAttachmentAction()
///     takePhotoAction.delegate = self
///     cell.attachmentsController.addAttachmentAction(takePhotoAction)
///     
///     let customAction = CustomAction(controller: self)
///     cell.attachmentsController.addAttachmentAction(customAction)
///     
///     return cell
/// }
///
/// var attachmentURLs: [URL] = [URL]()
///
/// // MARK: FUIAttachmentsViewControllerDataSource methods
/// func attachmentsViewController(_ attachmentsViewController: FUIAttachmentsViewController, iconForAttachmentAtIndex index: Int) -> (image: UIImage, contentMode: UIViewContentMode)? {
///    let urlString = self.attachmentURLs[index].absoluteString
///    guard let image = self.attachmentThumbnails[urlString] else {
///        return nil
///    }
///    return (image!, .scaleAspectFill)
/// }
///
/// func numberOfAttachments(in attachmentsViewController: FUIAttachmentsViewController) -> Int {
///    return attachmentURLs.count
/// }
///
/// func attachmentsViewController(_ attachmentsViewController: FUIAttachmentsViewController, urlForAttachmentAtIndex index: Int) -> URL? {
///    return attachmentURLs[index]
/// }
///
/// // MARK:  FUIAttachmentsViewControllerDelegateMethods
/// func attachmentsViewController(_ attachmentsViewController: FUIAttachmentsViewController, couldNotPresentAttachmentAtIndex index: Int) {
///    // TODO:  present the attachment, using a compatible viewer
/// }
///
/// func attachmentsViewController(_ attachmentsViewController: FUIAttachmentsViewController, didPressDeleteAtIndex index: Int) {
///    self.attachmentURLs.remove(at: index)
///    self.tableView.reloadSections(IndexSet(integer:attachmentSection), with: .automatic)
/// }
///
///
/// //MARK: FUIAddPhotoAttachmentActionDelegate
/// func addPhotoAttachmentAction(_ action: FUIAddPhotoAttachmentAction, didSelectPhotoAt url: URL) {
///    self.addAttachmentURL(url)
/// }
///
/// //MARK: FUITakePhotoAttachmentActionDelegate
///
/// func takePhotoAttachmentAction(_ action: FUITakePhotoAttachmentAction, didTakePhotoAt url: URL) {
///    self.addAttachmentURL(url)
/// }
///
///
/// func addAttachmentURL(_ url: URL) {
///    self.attachmentURLs.append(url)
///    DispatchQueue.main.async {
///        self.tableView.reloadSections(IndexSet(integer:self.attachmentSection), with: .automatic)
///        self.tableView.scrollToRow(at: IndexPath(row: 0, section: self.attachmentSection) , at: .middle, animated: true)
///    }
/// }
///
///
/// \endcode
SWIFT_CLASS("_TtC8SAPFiori22FUIAttachmentsFormCell")
@interface FUIAttachmentsFormCell : NibDesignableFUIBaseTableViewCell
/// The default cell reuse identifier.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull reuseIdentifier;)
+ (NSString * _Nonnull)reuseIdentifier SWIFT_WARN_UNUSED_RESULT;
/// The controller managing the attachments displayed by this cell.
@property (nonatomic, readonly, strong) FUIAttachmentsViewController * _Nonnull attachmentsController;
/// :nodoc:
@property (nonatomic, readonly) CGSize intrinsicContentSize;
/// :nodoc:
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (CGSize)systemLayoutSizeFittingSize:(CGSize)targetSize withHorizontalFittingPriority:(UILayoutPriority)horizontalFittingPriority verticalFittingPriority:(UILayoutPriority)verticalFittingPriority SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)prepareForReuse;
/// :nodoc:
- (void)setSelected:(BOOL)selected animated:(BOOL)animated;
@end

@class QLPreviewController;
@protocol QLPreviewItem;
@class UITraitCollection;

/// The <code>FUIAttachmentsViewController</code> manages the presentation of a collection of attachment thumbnails, and previews of specific files.
/// <h2>Configuration</h2>
/// Developers should implement the <code>FUIAttachmentsViewControllerDataSource</code> and <code>FUIAttachmentsViewControllerDelegate</code>, to supply content to the controller, and handle events.
/// <h2>Attachment Actions</h2>
/// The controller also supports presentation of an “Add Attachment” action sheet, which displays a list of <code>FUIAttachmentAction</code> options.  Attachment actions are typically used for acquiring (adding) attachments.  Default <code>FUIAttachmentAction</code> implementations are provided, for obtaining data from the camera, or photo albums.  Developers should add <code>FUIAttachmentAction</code> instances to the controller, using <code>addAttachmentAction(action:)</code>.
/// <h2>Presenting Attachment Previews</h2>
/// The <code>FUIAttachmentsViewController</code> uses a native <code>QLPreviewController</code> to present file previews, when the user taps on an attachment icon.  The <code>QLPreviewController</code> requires a valid file URL, and will request the URL for a selected attachment, in the <code>FUIAttachmentsViewControllerDataSource</code> <code>urlForAttachmentAtIndex:</code> method.  If the developer returns <code>nil</code>, or, if the <code>QLPreviewController</code> cannot handle the URL provided, then the <code>FUIAttachmentsViewControllerDelegate</code> <code>couldNotPresentAttachmentAtIndex:</code> method will be invoked.  The developer should handle the presentation for these cases, using a custom view controller, or other presentation framework.
SWIFT_CLASS("_TtC8SAPFiori28FUIAttachmentsViewController")
@interface FUIAttachmentsViewController : UIViewController <QLPreviewControllerDataSource, QLPreviewControllerDelegate>
/// Set this property to customize the title for this attachment cell.
/// If this property is not set, the default title displays.
/// The default title format is “Attachment (%d)” where %d is the number of
/// attachments already selected.
@property (nonatomic, copy) NSString * _Nullable customAttachmentsTitleFormat;
/// The customized string to be displayed for canceling the
/// “Add Attachment” actions. The default is “Cancel”.
@property (nonatomic, copy) NSString * _Nullable customCancelString;
/// The customized pop up title string when user tapped Add Attachment button.
/// The default string is “Add Attachment”
@property (nonatomic, copy) NSString * _Nullable customPopupTitleString;
/// :nodoc:
- (void)viewDidLoad;
/// Instantiate an <code>FUIAttachmentsFormViewController</code>.
///
/// returns:
/// An instance of an <code>FUIAttachmentsFormViewController</code> loaded
/// from storyboard.
+ (FUIAttachmentsViewController * _Nonnull)instantiateViewController SWIFT_WARN_UNUSED_RESULT;
/// Gets the number of actions in the action list.
///
/// returns:
/// The number of actions in the action list.
- (NSInteger)numberOfAttachmentActions SWIFT_WARN_UNUSED_RESULT;
/// Remove an <code>FUIAttachmentAction</code> in action list.
/// \param index The position of the action to be removed.
///
- (void)removeAttachmentActionAt:(NSInteger)index;
/// Removes all registered attachment type actions.
- (void)removeAllAttachmentActions;
/// Reloads data in the view
- (void)reloadData;
/// :nodoc:
- (NSInteger)numberOfPreviewItemsInPreviewController:(QLPreviewController * _Nonnull)controller SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (id <QLPreviewItem> _Nonnull)previewController:(QLPreviewController * _Nonnull)controller previewItemAtIndex:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)traitCollectionDidChange:(UITraitCollection * _Nullable)previousTraitCollection;
/// :nodoc:
- (void)previewControllerDidDismiss:(QLPreviewController * _Nonnull)controller;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// Subclass of <code>UITextField</code>, which implements the <code>FUIObservableValue</code> protocol, to observe changes to the <code>text</code> property.  The <code>onChangeHandler: ((String?) -> Void)?</code> closure will be invoked on changes to the <code>text</code> property.
SWIFT_CLASS("_TtC8SAPFiori12FUITextField")
@interface FUITextField : UITextField
/// Implementation of change handler.  Is invoked on changes to the <code>text</code> property.
@property (nonatomic, copy) void (^ _Nullable onChangeHandler)(NSString * _Nullable);
/// :nodoc:
@property (nonatomic, copy) NSString * _Nullable text;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (CGRect)editingRectForBounds:(CGRect)bounds SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)addSubview:(UIView * _Nonnull)view;
@end


/// Subclass of <code>FUITextField</code>, which supports auto-resizing the text field width based on the text entered.
SWIFT_CLASS("_TtC8SAPFiori24FUIAutoResizingTextField")
@interface FUIAutoResizingTextField : FUITextField
/// Default minimum width for the text field.
@property (nonatomic) CGFloat defaultMinimumWidth;
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
@property (nonatomic, readonly) CGSize intrinsicContentSize;
@end

@class UIVisualEffectView;
@class UINavigationBar;

/// <code>FUIBannerMessageView</code> shows an overlay message centered in the screen underneath a navigation bar. <code>FUIBannerMessageView</code> must be attached to a <code>UINavigationBar</code> to make it work properly.  <code>FUINavigationBar</code> contains a <code>FUIBannerMessageView</code> by default.
/// Call <code>show()</code> on a <code>FUIBannerMessageView</code> instance to show the message. By default, the message is shown centered on screen for two seconds.
/// <h2>Usage</h2>
/// <code>FUINavigationBar</code> has a <code>FUIBannerMessageView</code> prepared for you. Usually you don’t need to create an instance of it.
/// <h3>Setup</h3>
/// Setup a <code>FUINavigationBar</code> in your navigation controller. You can set either in a nib file or programmatically.
/// <h3>Show message</h3>
/// \code
/// guard let navBar = self.navigationController?.navigationBar as? FUINavigationBar else {
///    return
/// }
/// navBar.bannerView?.show(message: "This is a test banner", withDuration: 1, animated: true)
///
/// \endcode
SWIFT_CLASS("_TtC8SAPFiori20FUIBannerMessageView")
@interface FUIBannerMessageView : NibDesignable
/// The content view of <code>FUIBannerMessageView</code> instance.
@property (nonatomic, readonly, strong) IBOutlet UIView * _Null_unspecified view;
/// The view which adds blurry effect.
@property (nonatomic, readonly, weak) IBOutlet UIVisualEffectView * _Null_unspecified blurView;
/// The label which contains the message.
@property (nonatomic, readonly, weak) IBOutlet UILabel * _Null_unspecified titleLabel;
/// The view serves as top divider.
@property (nonatomic, readonly, weak) IBOutlet UIView * _Null_unspecified dividerTop;
/// The view serves as bottom divider.
@property (nonatomic, readonly, weak) IBOutlet UIView * _Null_unspecified dividerBottom;
/// The navigation bar which this <code>FUIBannerMessageView</code> instance attacheds to.
@property (nonatomic, weak) UINavigationBar * _Nullable navigationBar;
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
@property (nonatomic, readonly) Class _Nonnull nibLoadingClass;
/// Show the banner with a message under navigation bar for a certain duration.
/// \param message The message which will show on the banner.
///
/// \param duration The duration in seconds for which the toast message is shown. The default is <code>2</code>.
///
/// \param animated Whether the banner is shown with an animation. The default is <code>true</code>.
///
- (void)showWithMessage:(NSString * _Nonnull)message withDuration:(NSTimeInterval)duration animated:(BOOL)animated;
/// Dismiss the banner.
/// \param animated Whether the banner should dismiss with an animation.
///
- (void)dismissBannerWithAnimated:(BOOL)animated;
/// :nodoc:
@property (nonatomic) BOOL isAccessibilityElement;
/// :nodoc:
@property (nonatomic, copy) NSString * _Nullable accessibilityLabel;
/// :nodoc:
@property (nonatomic) UIAccessibilityTraits accessibilityTraits;
@end

@class UIImageView;

/// The <code>UIView</code> in the <code>FUIBarcodeScanViewController</code>.
SWIFT_CLASS("_TtC8SAPFiori18FUIBarcodeScanView")
@interface FUIBarcodeScanView : UIView
/// The only UI components in the <code>FUIBarcodeScanView</code> is a <code>UIImageView</code>
/// which displays a scan guides image.
@property (nonatomic, readonly, weak) IBOutlet UIImageView * _Null_unspecified scanGuidesImageView;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class UIBarButtonItem;

/// This <code>UIViewController</code> is to be used for user to scan for 1D and 2D codes using the device’s camera.
/// Developer may use segue in their storyboard to access this <code>FUIBarcodeScanViewController</code> in FUIBarcodeScanViewController.storyboard.
/// The <code>delegate</code> property of the <code>FUIBarcodeScanViewController</code> and the properties of the FUIBarcodeScanner may be set in the prepare for
/// segue function as follows:
/// \code
///
/// override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
///    let destination = segue.destination as! UINavigationController
///    let vc = destination.viewControllers[0]
///    if vc is FUIBarcodeScanViewController {
///        let scanViewController = vc as! FUIBarcodeScanViewController
///        switch segue.identifier! {
///        case "CustomScanSegue":
///            scanViewController.barcodeScanner.scanMode = .qr
///            scanViewController.barcodeScanner.indicatorBorderColor = UIColor.red.cgColor
///            scanViewController.barcodeScanner.indicatorBorderWidth = 20
///            scanViewController.barcodeScanner.promptMessage = "Scan A QR Code"
///            scanViewController.barcodeScanner.scanResultTransformer = { s in
///                return s + "-transformed"
///            }
///            scanViewController.delegate = self
///        default:
///            break
///        }
///    }
/// }
///
///
///
/// \endcodeOr, developer may use codes to instantiate this controller as follows:
/// \code
///
/// func customScanFromCode(_ sender: Any) {
///    let scanViewController = FUIBarcodeScanViewController.createInstanceFromStoryboard()
///    scanViewController.barcodeScanner.scanMode = .qr
///    scanViewController.barcodeScanner.indicatorBorderColor = UIColor.red.cgColor
///    scanViewController.barcodeScanner.indicatorBorderWidth = 20
///    scanViewController.barcodeScanner.promptMessage = "Scan A QR Code"
///    scanViewController.barcodeScanner.scanResultTransformer = { s in
///        return "transformed"
///    }
///    scanViewController.delegate = self
///
///    let navController = UINavigationController(rootViewController: scanViewController)
///    self.navigationController?.present(navController, animated: true, completion: nil)
/// }
///
///
/// \endcodeAlso, developer needs to implement the <code>FUIBarcodeScanViewControllerDelegate</code> protocol
/// to be notified with a scan result:
/// \code
///
/// func barcodeScanViewController(_ barcodeScanViewController: FUIBarcodeScanViewController, didReceiveScanResult scanResult: FUIBarcodeScanResult?) {
///    print("scan result: \(String(describing: scanResult?.scanResultString))")
///    if scanResult?.scanResultString != "success" {
///        alertInvalidQRCode()
///    } else {
///        barcodeScanViewController.dismiss(animated: true, completion: nil)
///    }
/// }
///
///
/// \endcode
SWIFT_CLASS("_TtC8SAPFiori28FUIBarcodeScanViewController")
@interface FUIBarcodeScanViewController : UIViewController
/// The close button which is on the left of the navigation bar.
@property (nonatomic, readonly, weak) IBOutlet UIBarButtonItem * _Null_unspecified closeButton;
/// A code block that whill be invoked when the barcode scan view is closed.
@property (nonatomic, copy) void (^ _Nullable onCloseBarcodeScanView)(void);
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Creates a <code>FUIBarcodeScanViewController</code> object from storyboard.
/// <ul>
///   <li>
///     <ul>
///       <li>
///         Parameter scanMode: The scan mode. Default is <code>FUIBarcodeScanMode.all</code>.
///       </li>
///     </ul>
///   </li>
/// </ul>
///
/// returns:
/// The instantiated <code>FUIBarcodeScanViewController</code> object.
+ (FUIBarcodeScanViewController * _Nonnull)createInstanceFromStoryboard SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
@property (nonatomic, readonly) BOOL prefersStatusBarHidden;
/// :nodoc:
- (void)viewDidLoad;
/// :nodoc:
- (void)viewDidAppear:(BOOL)animated;
/// The scanner is stopped after it received a scan result.
/// Call this function to start another scan.
- (void)restartScan;
/// :nodoc:
- (void)traitCollectionDidChange:(UITraitCollection * _Nullable)previousTraitCollection;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


/// <code>NibDesignableProtocol</code>-compliant implementation of <code>UICollectionViewCell</code>
/// <h2>See also</h2>
/// <code>NibDesignableProtocol</code>
SWIFT_CLASS("_TtC8SAPFiori31NibDesignableCollectionViewCell")
@interface NibDesignableCollectionViewCell : UICollectionViewCell
/// :nodoc:
@property (nonatomic, readonly, strong) UIView * _Nonnull nibContainerView;
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class UIColor;
@class UITouch;
@class UIEvent;

/// A base class of <code>UICollectionViewCell</code> which exposes properties for displaying an accessory view, and for displaying cell borders.
SWIFT_CLASS("_TtC8SAPFiori25FUIBaseCollectionViewCell")
@interface FUIBaseCollectionViewCell : NibDesignableCollectionViewCell
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// The type of standard accessory view the cell should use (normal state).
/// The behavior of this view should imitate that of <code>UITableViewCell.accessoryType</code>.
/// The accessory view appears in the right side of the cell in the collection view’s normal (default) state. The standard accessory views include the disclosure chevron; for a description of valid <code>accessoryType</code> constants, see <code>UITableViewCellAccessoryType</code>. The default is <code>none</code>. If a custom accessory view is set through the <code>accessoryView</code> property, the value of this property is ignored.
@property (nonatomic) UITableViewCellAccessoryType accessoryType;
/// The set of edges of the cell, which should display a border line.
/// Defaults to <code>.none</code>.
/// important:
/// It is typically necessary to set the <code>layoutMargins</code> property for the <code>FUIAccessoryCollectionViewCell</code> when showing left or right edge borders.
/// \code
/// cell.borders = [.top, .left]
/// cell.layoutMargins = UIEdgeInsets(top: 0, left: 16, bottom: 0, right: 16)
///
/// \endcode
@property (nonatomic) UIRectEdge borders;
/// The background color of all border lines in the cell.
/// Defaults to <code>FUIColorStyle.line</code>
/// To set unique color properties for a specific edge, access the view for the border line directly. (e.g.: <code>topBorder.backgroundColor = .darkGray</code>)
@property (nonatomic, strong) UIColor * _Nonnull borderColor;
/// The widths of the cell’s borders.
/// The width of the border line on each edge of the cell, facing inward towards the center of the cell.  Only positive values are used; negative values will be read as absolute values, using <code>abs(value)</code>.
/// The <code>getter</code> for this property constructs a <code>UIEdgeInsets</code> struct from the current <code>topBorderWeight</code>, <code>leftBorderWeight</code>, <code>bottomBorderWeight</code>, and <code>rightBorderWeight</code> property values.  The <code>setter</code> for this property updates the values for those properties, respectively.
/// important:
/// The width value for an edge is ignored, unless that edge is included in the cell’s <code>borders</code> option set.
@property (nonatomic) UIEdgeInsets borderWeights;
/// The width value for the top border view.
/// Defaults to <code>0.6</code>
@property (nonatomic) CGFloat topBorderWeight;
/// The width value for the left border view.
/// Defaults to <code>0.6</code>
@property (nonatomic) CGFloat leftBorderWeight;
/// The width value for the bottom border view.
/// Defaults to <code>0.6</code>
@property (nonatomic) CGFloat bottomBorderWeight;
/// The width value for the right border view.
/// Defaults to <code>0.6</code>
@property (nonatomic) CGFloat rightBorderWeight;
/// View for top border on the cell.
@property (nonatomic, readonly, strong) UIView * _Nonnull topBorder;
/// View for left border on the cell.
@property (nonatomic, readonly, strong) UIView * _Nonnull leftBorder;
/// View for bottom border on the cell.
@property (nonatomic, readonly, strong) UIView * _Nonnull bottomBorder;
/// View for right border on the cell.
@property (nonatomic, readonly, strong) UIView * _Nonnull rightBorder;
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
/// :nodoc:
- (void)touchesEnded:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
/// :nodoc:
- (void)touchesCancelled:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
/// :nodoc:
- (void)layoutSubviews;
/// :nodoc:
- (void)prepareForReuse;
@end



/// Subclass of <code>UIButton</code>, which fixes the issue in <code>UIButton</code> where setting the <code>titleLabel.text</code> property does not update the label text value.
SWIFT_CLASS("_TtC8SAPFiori9FUIButton")
@interface FUIButton : UIButton
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
@end


/// Simple <code>UITableViewCell</code> subclass, containing a <code>UIButton</code> instance which can be
/// aligned to 3 <code>FUIHorizontalAlignment</code> positions:  <code>.left</code>, <code>.center</code>, <code>.right</code>.
/// <img src="../ReadmeImages/FK_ButtonCellAnnotations.png?raw=true" alt="FUIButtonFormCell" width="376">
/// <h2>Usage:</h2>
/// Implement the action handler for the <code>UIButton</code> instance, to respond to <code>UIControl</code> events.
SWIFT_CLASS("_TtC8SAPFiori17FUIButtonFormCell")
@interface FUIButtonFormCell : NibDesignableFUIBaseTableViewCell
/// Implementation of change handler.  Is invoked when button is tapped.
@property (nonatomic, copy) void (^ _Nullable onChangeHandler)(UIControlEvents);
/// Reuse identifier
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull reuseIdentifier;)
+ (NSString * _Nonnull)reuseIdentifier SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)awakeFromNib;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Main <code>@IBOutlet</code> in the view.  May be positioned in cell, using <code>alignment</code> property.  Assign target action, using <code>UIButton</code> <code>addTarget(_:_:_:)</code> interface.
@property (nonatomic, readonly, weak) IBOutlet FUIButton * _Null_unspecified button;
/// :nodoc:
- (void)prepareForReuse;
@end


/// <code>FUICheckoutIndicatorView</code> is an IBDesignable UI component.
/// It uses two distinct states to display either a (download) progress or a <code>completed</code> status.
/// You can change between the displayed states by modifying the <code>displayState</code> property.
/// <h2>Initialization</h2>
/// <h3>Programmatically:</h3>
/// \code
/// let checkoutIndicatorView = FUICheckoutIndicatorView(frame: CGRect())
///
/// \endcode<h3>Inside a Storyboard or xib:</h3>
/// <ol>
///   <li>
///     Drag and drop a <code>UIView</code> component to Interface Builder’s canvas.
///   </li>
///   <li>
///     Switch custom class name from <code>UIView</code> to <code>FUICheckoutIndicatorView</code> and set module to <code>SAPFiori</code>.
///   </li>
///   <li>
///     Create an outlet of the FUICheckoutIndicatorView to be able to access its properties.
///   </li>
/// </ol>
/// <h2>Usage</h2>
/// \code
/// // After the checkout indicator view is shown, you might want to start a lengthy (download or finalization) process e.g. synchronize data.
/// // Once this process is complete, change the displayState to .completed and hide the view when the completion handler is called:
/// checkoutIndicatorView.state = .completed {
///    self.checkoutIndicatorView.isHidden = true
/// }
///
/// \endcode
SWIFT_CLASS("_TtC8SAPFiori24FUICheckoutIndicatorView")
@interface FUICheckoutIndicatorView : NibDesignable
/// :nodoc:
@property (nonatomic, readonly) CGSize intrinsicContentSize;
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
@property (nonatomic, readonly) Class _Nonnull nibLoadingClass;
@end


/// <code>NibDesignableProtocol</code>-compliant implementation of <code>UICollectionReusableView</code>
/// <h2>See also</h2>
/// <code>NibDesignableProtocol</code>
SWIFT_CLASS("_TtC8SAPFiori35NibDesignableCollectionReusableView")
@interface NibDesignableCollectionReusableView : UICollectionReusableView
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// <code>UICollectionReusableView</code> supplementary view for headers and footers.  API matches that of <code>FUITableViewHeaderFooterView</code>, excluding <code>leading-</code> and <code>trailingPadding</code> properties.
/// The <code>FUICollectionSectionHeaderFooterView</code> has two style options:  <code>.title</code>, and <code>.attribute</code>.
/// In <code>.title</code> style, only the <code>titleLabel</code> is displayed.
/// In <code>.attribute</code> style, the <code>titleLabel</code> is displayed, and the <code>attributeLabel</code> may also be displayed.  Also, in <code>.attribute</code> style, the disclosure indicator is displayed by default.
SWIFT_CLASS("_TtC8SAPFiori36FUICollectionSectionHeaderFooterView")
@interface FUICollectionSectionHeaderFooterView : NibDesignableCollectionReusableView
/// Reuse identifier
///
/// returns:
/// String a reuse identifier that describes FUICollectionSectionHeaderFooterView
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull reuseIdentifier;)
+ (NSString * _Nonnull)reuseIdentifier SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)awakeFromNib;
/// <code>UILabel</code> for title content.  Visible in all styles.
@property (nonatomic, readonly, strong) UILabel * _Nonnull titleLabel;
/// <code>UILabel</code> for attribute content.  Hidden by default, in <code>.title</code> style.
@property (nonatomic, readonly, strong) UILabel * _Nonnull attributeLabel;
/// <code>Bool</code> flag, to set whether disclosure indicator is visible.  Hidden by default, in <code>.title</code> style.
@property (nonatomic) BOOL isDisclosureAccessoryHidden;
/// Optional handler, to respond to tap events on the view.
@property (nonatomic, copy) void (^ _Nullable didSelectHandler)(void);
/// :nodoc:
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class FUIResizingCollectionView;

/// <code>UITableViewCell</code> subclass, containing a full-frame <code>collectionView: FUIResizingCollectionView</code>.  The <code>FUICollectionViewTableViewCell</code> should be returned by the <code>FUITableViewCollectionSection</code> <code>collectionViewTableViewCell</code> property.
/// important:
/// The resizing behavior of the <code>FUIResizingCollectionView</code> is dependent upon the internal size change handler.  By default, the <code>collectionView</code> size will be controlled by its <code>intrinsicContentSize</code>.  Developers should size the <code>FUICollectionViewTableViewCell</code> accordingly.
SWIFT_CLASS("_TtC8SAPFiori30FUICollectionViewTableViewCell")
@interface FUICollectionViewTableViewCell : NibDesignableFUIBaseTableViewCell
/// <code>UICollectionView</code> subclass, which covers the bounds of the cell.
@property (nonatomic, readonly, strong) IBOutlet FUIResizingCollectionView * _Null_unspecified collectionView;
/// Reuse identifier
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull reuseIdentifier;)
+ (NSString * _Nonnull)reuseIdentifier SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier SWIFT_UNAVAILABLE;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (CGSize)systemLayoutSizeFittingSize:(CGSize)targetSize withHorizontalFittingPriority:(UILayoutPriority)horizontalFittingPriority verticalFittingPriority:(UILayoutPriority)verticalFittingPriority SWIFT_WARN_UNUSED_RESULT;
@end

@class FUIImageView;
@class FUILabel;
@class UIImage;

/// <code>FUIContactCell</code> is variant of <code>UITableViewCell</code> defined in SAPFiori. It contains a <code>UIImageView</code>, several <code>UILabel</code>s and a <code>FUIActivityControl</code> component.
/// It supports most 3 activity items.
/// <img src="../ReadmeImages/ContactCellAnnotations.png?raw=true" alt="FUIContactCell"\>
/// <h2>Code usage:</h2>
/// \code
///
/// //Create a FUIContactCell in a TableView
/// override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
///     let cell = tableView.dequeueReusableCell(withIdentifier: FUIContactCell.reuseIdentifier) as! FUIContactCell
///     let activities: [ActivityItem] = [ActivityItem.phone, ActivityItem.message]
///     let contact = DataSource.contact[indexPath.row]
///     cell.detailImage = contact.image
///     cell.headlineText = contact.name
///     cell.subheadlineText = contact.title
///     cell.descriptionText = contact.address
///     cell.activityControl.addActivities(activities)
///
/// // Optionally, adjust activity item size (defaults to `CGSize(width: 25.0, height: 25.0)`)
///     self.activityControl.itemSize = CGSize(width: 25, height: 25)
/// // Optionally, adjust limit on visible items in activity control (defaults to `3`)
///     self.activityControl.maxVisibleItems = 3
/// // Optionally, adjust activity control spacing (defaults to `29.0`)
///     self.activityControl.stackView.spacing = 29.0
///
/// // Implement onActivitySelectedHandler.
///    cell.onActivitySelectedHandler = { activityItem in
///        
///        switch activityItem {
///        case ActivityItem.phone:
///            let _ = contact.call()
///        case ActivityItem.message:
///            let _ = contact.sendMessage()
///        case ActivityItem.videoCall:
///            let _ = contact.video()
///        default:
///            break
///        }
///    }
/// }
///
/// \endcode
SWIFT_CLASS("_TtC8SAPFiori14FUIContactCell")
@interface FUIContactCell : NibDesignableFUIBaseTableViewCell
/// Reuse identifier
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull reuseIdentifier;)
+ (NSString * _Nonnull)reuseIdentifier SWIFT_WARN_UNUSED_RESULT;
/// The FUIImageView holds a detail image.
@property (nonatomic, readonly, strong) IBOutlet FUIImageView * _Null_unspecified detailImageView;
/// The UILabel holds headline text.
@property (nonatomic, readonly, weak) IBOutlet FUILabel * _Null_unspecified headlineLabel;
/// The UILabel holds subheadline text.
@property (nonatomic, readonly, weak) IBOutlet FUILabel * _Null_unspecified subheadlineLabel;
/// The UILabel holds description text.
@property (nonatomic, readonly, weak) IBOutlet FUILabel * _Null_unspecified descriptionLabel;
/// The FUIActivityControl object used in ContactCell.
@property (nonatomic, readonly, weak) IBOutlet FUIActivityControl * _Null_unspecified activityControl;
/// Default main stack right edge is set at midpoint of cell’s readable width, minus 8px. Set to fraction between 0.01 and 0.99, to move the right edge of the <code>mainStack</code>, relative to the cell readable width.
/// important:
/// the percentage of readable width includes area often containing other subviews.  So, a valid value is typically between 30% and 70%.
/// Only used when <code>horizontalSizeClass</code> of the object cell is <code>.regular</code>.
@property (nonatomic) CGFloat splitPercent;
@property (nonatomic) CGFloat mainStackWidth;
/// :nodoc:
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (CGSize)systemLayoutSizeFittingSize:(CGSize)targetSize withHorizontalFittingPriority:(UILayoutPriority)horizontalFittingPriority verticalFittingPriority:(UILayoutPriority)verticalFittingPriority SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)layoutSubviews;
/// Image of ContactCell.
@property (nonatomic, strong) UIImage * _Nullable detailImage;
/// Property to preserve <code>detailImageView</code> spacing.  When it’s set to true, spacing is preserved for <code>detailImageView</code> even when there’s no image added to the image view
@property (nonatomic) BOOL preserveDetailImageSpacing;
/// Text of headline label.
@property (nonatomic, copy) NSString * _Nullable headlineText;
/// Text of subheadline label.
@property (nonatomic, copy) NSString * _Nullable subheadlineText;
/// Text of <code>descriptionLabel</code>.
@property (nonatomic, copy) NSString * _Nullable descriptionText;
/// :nodoc:
- (void)traitCollectionDidChange:(UITraitCollection * _Nullable)previousTraitCollection;
/// :nodoc:
- (void)didMoveToWindow;
/// :nodoc:
- (void)prepareForReuse;
@end

@class FUIInlineValidationView;

/// <code>FUIInlineValidationTableViewCell</code> is a base class for <code>FUIFormCell</code>s that need to support validation handling. The validation view will appear at the bottom of cell if validation message is set.
/// <h2>Code usage:</h2>
/// <ol>
///   <li>
///     Custom class should subclass FUIInlineValidationTableViewCell to enable validation handling. Create a bottom constraint on main view and contentView and assign to <code>validationViewHeight</code> property.
///   </li>
/// </ol>
/// \code
/// public class FUITitleFormCell: FUIInlineValidationTableViewCell, FUIFormCell, UITextFieldDelegate {
///     public override init(style: UITableViewCellStyle, reuseIdentifier: String?) {
///        //Any setup code
///
///        self.validationViewHeight = self.stackViewBottom
///     }
/// }
///
/// \endcode<ol>
///   <li>
///     Set validationMessage on the cell.
///   </li>
/// </ol>
/// \code
/// override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
///     let cell = tableView.dequeueReusableCell(withIdentifier: FUITitleFormCell.reuseIdentifier, for: indexPath) as! FUITitleFormCell
///     //Configure your cell
///
///     cell.validationMessage = "Validation msg"
/// }
///
/// \endcode
SWIFT_CLASS("_TtC8SAPFiori32FUIInlineValidationTableViewCell")
@interface FUIInlineValidationTableViewCell : NibDesignableFUIBaseTableViewCell
/// :nodoc:
@property (nonatomic, strong) FUIInlineValidationView * _Null_unspecified validationView;
/// :nodoc:
@property (nonatomic, copy) NSString * _Nullable validationMessage;
/// :nodoc:
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)layoutSubviews;
/// :nodoc:
- (void)prepareForReuse;
/// :nodoc:
- (CGSize)systemLayoutSizeFittingSize:(CGSize)targetSize withHorizontalFittingPriority:(UILayoutPriority)horizontalFittingPriority verticalFittingPriority:(UILayoutPriority)verticalFittingPriority SWIFT_WARN_UNUSED_RESULT;
/// Type of the accessory view
@property (nonatomic) UITableViewCellAccessoryType accessoryType;
@end

@class NSDateFormatter;
@class UIDatePicker;

/// A <code>UITableViewCell</code> subclass, which allows a user to read or enter a value, using a date picker.
/// <img src="../ReadmeImages/FK_DatePickerCellAnnotations.png?raw=true" alt="FUIDatePickerFormCell" width="376">
/// The developer should set the following properties on the cell, in their implementation of <code>UITableViewDataSource</code> <code>cellForRow(at:)</code> function:
/// <ul>
///   <li>
///     <code>keyName</code>: The key name of the property.
///   </li>
///   <li>
///     <code>value</code>: The value of the property, as <code>Date</code>
///   </li>
/// </ul>
/// And an <code>onChangeHandler</code>:
/// <ul>
///   <li>
///     <code>onChangeHandler</code>: a handler closure, which is invoked on changes to the value
///   </li>
/// </ul>
/// Optionally, UITableViewController could provide
/// <ul>
///   <li>
///     <code>dateFormatter</code>: A developer-defined <code>UIDateFormatter</code>, for transposing between <code>Date</code> type and <code>String</code>.
///   </li>
///   <li>
///     <code>datePickerMode</code>: The <code>UIDatePickerMode</code> for the date picker. Default is <code>.dateAndTime</code>. Note that <code>.countDownTimer</code> mode is not supported.  Use the <code>FUIDurationPickerFormCell</code> for duration values.
///   </li>
///   <li>
///     <code>isEditable</code>: Indicates if the cell’s value may be modified.  Defaults to <code>true</code>.
///   </li>
/// </ul>
/// The following is an example of usage in an application <code>UITableViewController</code>:
/// important:
/// The app’s <code>UITableViewController</code> must subclass <code>FUIFormTableViewController</code>
/// \code
/// let dateFormatter = DateFormatter()
///
/// override func viewDidLoad() {
///    super.viewDidLoad()
///
///    dateFormatter.dateFormat = "dd-MM-yyyy"
///    self.tableView.register(FUIDatePickerFormCell.self, forCellReuseIdentifier: FUIDatePickerFormCell.reuseIdentifier)
///    // ...
/// }
///
/// override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
///
///    let cell = tableView.dequeueReusableCell(withIdentifier: FUIDatePickerFormCell.reuseIdentifier, for: indexPath) as! FUIDatePickerFormCell
///    cell.keyName = "End Date"
///
///    cell.dateFormatter = dateFormatter
///    cell.datePickerMode = .date
///    cell.value = cell.dateFormatter.date(from: myObject.endDate)   // "02-17-2017"
///
///     // MARK:  implement onChangeHandler
///     cell.onChangeHandler = { newValue in
///        myObject.endDate = cell.dateFormatter.string(from: newValue)
///     }
///     
///     return cell
/// }
///
///
/// \endcode
SWIFT_CLASS("_TtC8SAPFiori21FUIDatePickerFormCell")
@interface FUIDatePickerFormCell : FUIInlineValidationTableViewCell
/// The value of the property.
@property (nonatomic, copy) NSDate * _Nonnull value;
/// Implementation of change handler.  Is invoked on changes to the <code>value</code> property.
@property (nonatomic, copy) void (^ _Nullable onChangeHandler)(NSDate * _Nonnull);
/// The default cell reuse identifier.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull reuseIdentifier;)
+ (NSString * _Nonnull)reuseIdentifier SWIFT_WARN_UNUSED_RESULT;
/// The UILabel holds the key name string.
@property (nonatomic, readonly, weak) IBOutlet UILabel * _Null_unspecified keyLabel;
/// The UITextField holds the value string.
@property (nonatomic, readonly, weak) IBOutlet UITextField * _Null_unspecified valueTextField;
/// Indicates if the value of the cell could be changed or not.
/// The default is true.
@property (nonatomic) BOOL isEditable;
/// The key name of the property.
@property (nonatomic, copy) NSString * _Nullable keyName;
/// The placeholder text for the value text field.
@property (nonatomic, copy) NSString * _Nullable placeholderText;
/// The <code>DateFormatter</code> to be used to display the selected
/// <code>Date</code>. Default formatter:
/// <ul>
///   <li>
///     for <code>UIDatePickerMode.dateAndTime</code> it is medium date style followed by short time style.
///   </li>
///   <li>
///     for <code>UIDatePickerMode.date</code> it is medium date style
///   </li>
///   <li>
///     for <code>UIDatePickerMode.time</code> it is short time style
///   </li>
/// </ul>
@property (nonatomic, strong) NSDateFormatter * _Nullable dateFormatter;
/// If <code>isTrackingLiveChanges</code> is true, then <code>onChangeHandler</code>,
/// will be invoked whenever a date is selected.
/// Otherwise, <code>onChangeHandler</code> will be invoked only when
/// the Date Picker is closed.
/// The default value is <code>true</code>.
@property (nonatomic) BOOL isTrackingLiveChanges;
/// The <code>UIDatePickerMode</code> for the <code>UIDatePicker</code> for this cell.
/// The default value is <code>UIDatePickerMode.dateAndTime</code>.
/// important:
/// <code>UIDatePickerMode.countDownTimer</code> is not allowed here.  Use <code>FUIDurationPickerFormCell</code> for count down mode.
@property (nonatomic) UIDatePickerMode datePickerMode;
/// The <code>UIDatePicker</code> for this cell.
/// It will be displayed only when this cell is selected.
@property (nonatomic, readonly, weak) IBOutlet UIDatePicker * _Null_unspecified datePicker;
/// :nodoc:
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)prepareForReuse;
/// :nodoc:
- (void)layoutSubviews;
/// :nodoc:
- (CGSize)systemLayoutSizeFittingSize:(CGSize)targetSize withHorizontalFittingPriority:(UILayoutPriority)horizontalFittingPriority verticalFittingPriority:(UILayoutPriority)verticalFittingPriority SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)setSelected:(BOOL)selected animated:(BOOL)animated;
@end


/// A <code>UITableViewCell</code> subclass, which allows a user to read or enter a value, using a duration picker.
///  <img src="../ReadmeImages/FK_DurationPickerCellAnnotations.png?raw=true" alt="FUIDurationPickerFormCell" width="376">
/// The developer should set the following properties on the cell, in their implementation of <code>UITableViewDataSource</code> <code>cellForRow(at:)</code> function:
/// <ul>
///   <li>
///     <code>keyName</code>: The key name of the property
///   </li>
///   <li>
///     <code>value</code>: The value of the property, as <code>TimeInterval</code>
///   </li>
/// </ul>
/// And an <code>onChangeHandler</code>:
/// <ul>
///   <li>
///     <code>onChangeHandler</code>: a handler closure, which is invoked on changes to the value
///   </li>
/// </ul>
/// Optionally, the developer may provide
/// <ul>
///   <li>
///     <code>minInterval</code>: The minute interval to be used in the picker.
///   </li>
///   <li>
///     <code>isEditable</code>: Indicates if the cell’s value may be modified.  Defaults to <code>true</code>.
///   </li>
/// </ul>
/// The following is an example of usage in an application <code>UITableViewController</code>:
/// important:
/// The app’s <code>UITableViewController</code> must subclass <code>FUIFormTableViewController</code>
/// \code
/// override func viewDidLoad() {
///     super.viewDidLoad()
///     self.tableView.register(FUIDurationPickerFormCell, forCellReuseIdentifier: FUIDurationPickerFormCell.reuseIdentifier)
///     // ...
/// }
///
/// override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
///
///     let cell = tableView.dequeueReusableCell(withIdentifier: FUIDurationPickerFormCell.reuseIdentifier, for: indexPath) as! FUIDurationPickerFormCell
///     cell.keyName = "Duration"
///     cell.value = myObject.eventDuration  // in seconds
///
///     // MARK:  implement an onChangeHandler
///     cell.onChangeHandler = { newValue in
///        myObject.eventDuration = newValue
///     }
///
///     return cell
/// }
///
/// \endcode
SWIFT_CLASS("_TtC8SAPFiori25FUIDurationPickerFormCell")
@interface FUIDurationPickerFormCell : FUIInlineValidationTableViewCell
/// The UILabel holds the key name string.
@property (nonatomic, readonly, weak) IBOutlet UILabel * _Null_unspecified keyLabel;
/// The UITextField holds the selected value strings.
@property (nonatomic, readonly, weak) IBOutlet UITextField * _Null_unspecified valueTextField;
/// The <code>UIDatePicker</code> for this cell. It’s datePickerMode property is set to countDownTimer.
/// It will be displayed only when this cell is selected.
@property (nonatomic, readonly, weak) IBOutlet UIDatePicker * _Null_unspecified durationPicker;
/// The default cell reuse identifier.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull reuseIdentifier;)
+ (NSString * _Nonnull)reuseIdentifier SWIFT_WARN_UNUSED_RESULT;
/// The default value is 0.0 Limit is 23:59 (86,399 seconds).
@property (nonatomic) NSTimeInterval value;
/// Implementation of change handler.  Is invoked on changes to the <code>value</code> property.
@property (nonatomic, copy) void (^ _Nullable onChangeHandler)(double);
/// minuteInterval must be evenly divided into 60. Default is 5. minimum is 1, maximum is 30.
@property (nonatomic) NSInteger minuteInterval;
/// Indicates if the value of the cell may be modified.
/// The default is <code>true</code>.
@property (nonatomic) BOOL isEditable;
/// If <code>isTrackingLiveChanges</code> is true, then <code>onChangeHandler</code>,
/// will be invoked whenever a duration is selected.
/// Otherwise, <code>onChangeHandler</code> will be invoked only when
/// the Duration Picker is closed.
/// The default value is <code>true</code>.
@property (nonatomic) BOOL isTrackingLiveChanges;
/// The key name of the cell.
@property (nonatomic, copy) NSString * _Nullable keyName;
/// Set this property to customize the format of duration text.
/// If this property is not set, using the default text format.
/// The default text format is “%d Hrs %d Min” where %d is the number of
/// hours and minutes.
@property (nonatomic, copy) NSString * _Null_unspecified durationTextFormat;
/// :nodoc:
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (CGSize)systemLayoutSizeFittingSize:(CGSize)targetSize withHorizontalFittingPriority:(UILayoutPriority)horizontalFittingPriority verticalFittingPriority:(UILayoutPriority)verticalFittingPriority SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)prepareForReuse;
@end


/// <code>FUIFeedbackScreen</code> is an <code>UIViewController</code> used to display a feedback screen for the application.  The screen mainly displays feedback messages and a feedback action button.
/// <img src="../ReadmeImages/FUIFeedbackScreenAnnotations.png?raw=true" alt="FUIFeedbackScreen"\>
/// There are 4 <code>FUILabels</code> created for feedback messages.  They are <code>messageNameLabel</code>, <code>messageDetailLabel</code>, <code>messageEmphasisLabel</code>, and <code>messageFootnoteLabel</code>.  Since the screen is implemented based on the <code>FUIFeebackScreen</code> design spec with an action button and either a combination of <code>messageNameLabel</code> and <code>messageDetailLabel</code> and all 4 labels., it is expected that application sets label text to either <code>messageNameLabel</code> and <code>messageDetailLabel</code> only or all the 4 labels.
/// The action button, <code>messageActionButton</code>, has <code>Touch Up Inside</code> event hooked up with the <code>didTapActionButton</code> closure.  Application can implement <code>didTapActionButton</code> closure to perform desired tasks after the button is tapped.
/// <code>FUIFeedbackScreen</code> is implemented in <code>FUIFeedbackScreen.storyboard</code>.  There are two ways to launch the screen:
/// <ul>
///   <li>
///     Use another story board and using a “Present Modally” segue to <code>FUIFeedbackScreen</code> storyboard in SAPFiori framework bundle.
///     App programmer needs to provide the properties needed in <code>UIController</code>’s prepare for segue function:
///   </li>
/// </ul>
/// \code
///
/// override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
/// let vc = segue.destination as! FUIFeedbackScreen
/// vc.didTapActionButton = {
/// self.showAppMainView(vc)
/// }
/// vc.navigationItem.title = "Error"
/// //layout 1 that sets the 2 labels' text and the button
/// //vc.messageNameLabel.text = "Task does not exist"
/// //vc.messageDetailLabel.text = "Unable to save changes as the task does not exists."
/// //vc.messageActionButton.titleLabel?.text = "Continue"
///
/// //layout 2 that sets all 4 labels' text and the button
/// vc.messageNameLabel.text = "Sign In Failed"
/// vc.messageDetailLabel.text = "You can try entering your passcode again in"
/// vc.messageEmphasisLabel.text = "5 minutes"
/// vc.messageFootnoteLabel.text = "Or reset your passcode by entering your credentials."
/// vc.messageActionButton.titleLabel?.text = "Reset Passcode"
/// }
///
///
/// \endcode<ul>
///   <li>
///     Programmatically loads it:
///   </li>
/// </ul>
/// \code
///
/// let vc = FUIFeedbackScreen()
/// vc.didTapActionButton = {
/// self.showAppMainView(vc)
/// }
/// vc.navigationItem.title = "Error"
/// //layout 1 that sets the 2 labels' text and the button
/// //vc.messageNameLabel.text = "Task does not exist"
/// //vc.messageDetailLabel.text = "Unable to save changes as the task does not exists."
/// //vc.messageActionButton.titleLabel?.text = "Continue"
///
/// //layout 2 that sets all 4 labels' text and the button
/// vc.messageNameLabel.text = "Sign In Failed"
/// vc.messageDetailLabel.text = "You can try entering your passcode again in"
/// vc.messageEmphasisLabel.text = "5 minutes"
/// vc.messageFootnoteLabel.text = "Or reset your passcode by entering your credentials."
/// vc.messageActionButton.titleLabel?.text = "Reset Passcode"
///
///
/// \endcode
SWIFT_CLASS("_TtC8SAPFiori17FUIFeedbackScreen")
@interface FUIFeedbackScreen : UIViewController
/// Creates a <code>FUIFeedbackScreen</code> object from storyboard and intitialize subview compoennts.
///
/// returns:
/// A FUIFeedbackScreen object.
+ (FUIFeedbackScreen * _Nonnull)createInstanceFromStoryboard SWIFT_WARN_UNUSED_RESULT;
/// A message name label displayed as the first label on the screen
@property (nonatomic, readonly, strong) IBOutlet FUILabel * _Null_unspecified messageNameLabel;
/// A message detail label displayed below <code>messageNameLabel</code>
@property (nonatomic, readonly, strong) IBOutlet FUILabel * _Null_unspecified messageDetailLabel;
/// A message detail label displayed below <code>messageDetailLabel</code>
@property (nonatomic, readonly, strong) IBOutlet FUILabel * _Null_unspecified messageEmphasisLabel;
/// A message detail label displayed below <code>messageEmphasisLabel</code>
@property (nonatomic, readonly, strong) IBOutlet FUILabel * _Null_unspecified messageFootnoteLabel;
/// The only action button on the screen.  Tapping this button can execute the block of code implemented in <code>didTapActionButton</code> closure by the application.
@property (nonatomic, readonly, strong) IBOutlet FUIOnboardingButton * _Null_unspecified messageActionButton;
/// Application can optionally implement this closure for <code>messageActionButton</code> tap action
@property (nonatomic, copy) void (^ _Nullable didTapActionButton)(void);
/// :nodoc:
- (void)awakeFromNib;
/// :nodoc:
- (void)viewDidLoad;
/// :nodoc:
- (void)viewWillAppear:(BOOL)animated;
/// :nodoc:
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
/// :nodoc:
- (void)viewDidLayoutSubviews;
/// :nodoc:
@property (nonatomic, copy) NSArray * _Nullable accessibilityElements;
/// :nodoc:
- (NSInteger)accessibilityElementCount SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (id _Nullable)accessibilityElementAtIndex:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (NSInteger)indexOfAccessibilityElement:(id _Nonnull)element SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class UICollectionView;

/// A <code>UITableViewCell</code> subclass, which allows a user to read or enter a set of values, using a grid of buttons.  Commonly used for composing filters.
///  <img src="../ReadmeImages/FK_FilterCellAnnotations.png?raw=true" alt="FUIFilterFormCell" width="376">
/// The developer should set the following properties on the cell, in their implementation of <code>UITableViewDataSource</code> <code>cellForRow(at:)</code> function:
/// <ul>
///   <li>
///     <code>keyName</code>: The key name of the property.
///   </li>
///   <li>
///     <code>value</code>: An array of the selected indexes in the control.  Uses the same index as the <code>valueOptions</code> array.
///   </li>
///   <li>
///     `valueOptions: A String array, of titles for the buttons in the control
///   </li>
/// </ul>
/// And an <code>onChangeHandler</code>:
/// <ul>
///   <li>
///     <code>onChangeHandler</code>: a handler closure, which is invoked on changes to the value
///   </li>
/// </ul>
/// Optionally, the developer may provide
/// <ul>
///   <li>
///     <code>allowsMultipleSelection</code>: Indicates if multiple buttons may be selected simultaneously (<code>true</code>).  If <code>false</code>, the control behaves in “radio” mode.  Defaults to <code>true</code>.
///   </li>
///   <li>
///     <code>allowsEmptySelection</code>: Indicates if the control allows zero items to be selected (<code>true</code>).  If false, then once a value has been selected by the developer or user, taps by the user on the last selected item will be ignored, instead of de-selecting the item.  Defaults to <code>true</code>.
///   </li>
///   <li>
///     <code>isEditable</code>: Indicates if the cell’s value may be modified.  Defaults to <code>true</code>.
///   </li>
/// </ul>
/// The following is an example of usage in an application <code>UITableViewController</code>:
/// important:
/// The app’s <code>UITableViewController</code> must subclass <code>FUIFormTableViewController</code>
/// \code
///  // optionally, create an array of value option to localized string mappings
///   let buttonTitles: [[String: String]] = [["radius": "Distance"], ["price": "Price"], ["rating": "Ratings"], ["avail": "Availability"]]
///
///  // Register FUIFilterFormCell in viewDidLoad() method in the controller.
///  override func viewDidLoad() {
///      super.viewDidLoad()
///      self.tableView.register(FUIFilterFormCell.self, forCellReuseIdentifier: FUIFilterFormCell.reuseIdentifier)
///  }
///
///  override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
///      let cell = tableView.dequeueReusableCell(withIdentifier: FUIFilterFormCell.reuseIdentifier, for: indexPath) as! FUIFilterFormCell
///  
///      cell.valueOptions = buttonTitles.flatMap { $0.map { $0.value }}
///      cell.keyName = "Sort By"
///      cell.value = [1]
///      cell.allowsMultipleSelection = true
///      cell.allowsEmptySelection = false
///  
///      // MARK:  implement onChangeHandler
///      cell.onChangeHandler = { newValue in
///         self.applyFilter(forDimensions: newValue)      // here, the cell input is set to a filter function
///      }
///
///     return cell
///  }
///
///
/// \endcode
SWIFT_CLASS("_TtC8SAPFiori17FUIFilterFormCell")
@interface FUIFilterFormCell : FUIInlineValidationTableViewCell <UICollectionViewDataSource, UICollectionViewDelegateFlowLayout>
/// Reuse identifier
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull reuseIdentifier;)
+ (NSString * _Nonnull)reuseIdentifier SWIFT_WARN_UNUSED_RESULT;
/// Indicate whether the user can select an item or not. It is set to true by default.
@property (nonatomic) BOOL isEditable;
/// The value of the cell.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull value;
/// Implementation of change handler.  Is invoked on changes to the <code>value</code> property.
@property (nonatomic, copy) void (^ _Nullable onChangeHandler)(NSArray<NSNumber *> * _Nonnull);
/// The array of the valid options.
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull valueOptions;
/// The key name of the cell.
@property (nonatomic, copy) NSString * _Nullable keyName;
/// Indicates if user may select multiple values. Defaults to <code>true</code>
@property (nonatomic) BOOL allowsMultipleSelection;
/// The array of selected indexes.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull selectedIndexes;
/// Indicates if empty selection is allowed.
@property (nonatomic) BOOL allowsEmptySelection;
/// The UILabel holds the key name string.
@property (nonatomic, readonly, weak) IBOutlet UILabel * _Null_unspecified keyLabel;
/// The collection view containing items to be displayed.
@property (nonatomic, readonly, weak) IBOutlet UICollectionView * _Null_unspecified collectionView;
/// :nodoc:
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (NSInteger)numberOfSectionsInCollectionView:(UICollectionView * _Nonnull)collectionView SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
/// :nodoc:
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didDeselectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
/// :nodoc:
- (BOOL)collectionView:(UICollectionView * _Nonnull)collectionView shouldDeselectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)prepareForReuse;
/// :nodoc:
- (CGSize)systemLayoutSizeFittingSize:(CGSize)targetSize withHorizontalFittingPriority:(UILayoutPriority)horizontalFittingPriority verticalFittingPriority:(UILayoutPriority)verticalFittingPriority SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)setHighlighted:(BOOL)highlighted animated:(BOOL)animated;
/// :nodoc:
- (void)setSelected:(BOOL)selected animated:(BOOL)animated;
@end

@class UITableView;
@class UIScrollView;

/// When <code>FUIFormCell</code>s are to be used in an application, application’s implementation of
/// <code>UITableViewController</code> that hosts these <code>FUIFormCell</code>s must be a subclass of this
/// <code>FUIFormTableViewController</code>. <code>FUIFormTableViewController</code> hides all the complications
/// and interactions for handling all different types of <code>FUIFormCell</code>s.
/// Application’s implementation of the <code>UITableViewController</code> needs to only
/// implement the following functions:
/// \code
///
/// class FormCellTestTVC: FUIFormTableViewController {
///    override func viewDidLoad() {
///        // MUST: Call viewDidLoad function of super class.
///        super.viewDidLoad()
///
///        // Register FUIFormCells that will be used
///        self.tableView.register(FUITitleFormCell.self, forCellReuseIdentifier: FUITitleFormCell.reuseIdentifier)
///        ...
///    }
///
///    override func numberOfSections(in tableView: UITableView) -> Int {
///        // Return how many section in the table
///        return ...
///    }
///
///    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
///        // Return number of rows in each section
///        ...
///    }
///
///    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
///        // Return the cell to be used at the IndexPath specified
///        let cell = tableView.dequeueReusableCell(withIdentifier: FUITitleFormCell.reuseIdentifier, for: indexPath) as! FUITitleFormCell
///        cell.value = "Work Request"
///
///        cell.isEditable = true
///        // MARK:  implement onChangeHandler
///        cell.onChangeHandler = { newValue in
///            myObject.title = newValue
///        }
///        return cell
///    }
///
///
/// \endcodeIn addition, if there are some other actions on the table view, it is required that
/// the action functions should also call function <code>endEditing</code> of the table view with the
/// <code>force</code> parameter to <code>true</code> so that all
/// editing cells have its onChangeHandler called. For example, the function didSaveTapped
/// below is the action when the “Save” button tapped:
/// \code
///    @IBAction func didSaveTapped(_ sender: AnyObject) {
///        self.tableView.endEditing(true)
///
///        // save object ...
///    }
///
///
/// \endcode
SWIFT_CLASS("_TtC8SAPFiori26FUIFormTableViewController")
@interface FUIFormTableViewController : UITableViewController
/// :nodoc:
- (void)viewDidLoad;
/// :nodoc:
- (void)viewDidAppear:(BOOL)animated;
/// :nodoc:
- (void)tableView:(UITableView * _Nonnull)tableView willDisplayCell:(UITableViewCell * _Nonnull)cell forRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
/// :nodoc:
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
/// :nodoc:
- (void)scrollViewWillBeginDragging:(UIScrollView * _Nonnull)scrollView;
/// :nodoc:
- (void)navigationControllerPresent:(UIViewController * _Nonnull)viewControllerToPresent animated:(BOOL)flag completion:(void (^ _Nullable)(void))completion;
/// :nodoc:
- (void)navigationControllerPush:(UIViewController * _Nonnull)viewControllerToPush animated:(BOOL)flag;
- (nonnull instancetype)initWithStyle:(UITableViewStyle)style OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class UICollectionViewLayoutAttributes;

/// This layout extends <code>UICollectionViewFlowLayout</code>, by adding a new optional property:  <code>minimumScaledItemSize</code>, which enables the collection view cell items’ dimensions to be scaled upwards, to fill the width of the collection view’s <code>contentSize</code>.
/// The developer may allow the layout to scale any number of cell items to fit the <code>contentSize</code> width, or, may set a pre-determined number of items which ought to fit the <code>contentSize</code> width, by setting the <code>numberOfColumns</code> property.  This is useful, when the number of items rendered in the collection view vary on different screens, but a common size is desired.
/// This layout also controls the inter-item spacing, and line spacing, so that the <code>minimumInteritemSpacing</code> and <code>minimumLineSpacing</code> values provided by the developer are used precisely, rather than being adjusted by the AutoLayout engine.
/// Item will be scaled if you set following three properties(Set a number greater than zero to enable corresponding feature):
/// <ul>
///   <li>
///     estimatedItemSize: Scale item to the size provided by systemLayoutSizeFitting(_:).
///   </li>
///   <li>
///     numberOfColumns: Scale item based on the aspect ratio of <code>itemSize</code>.
///   </li>
///   <li>
///     minimumScaledItemSize: Scale item upwards to fill the row based on the aspect ratio of <code>minimumScaledItemSize</code>.
///   </li>
/// </ul>
/// <h2>Code usage</h2>
/// <ol>
///   <li>
///     Assign an instance of FUIHorizontalScrollCollectionViewLayout to your collection view.
///   </li>
/// </ol>
/// \code
/// self.collectionView.collectionViewLayout = FUICollectionViewLayout.horizontalScroll
///
/// \endcode<ol>
///   <li>
///     Implement collectionView(_:cellForItemAt:) dataSource.
///   </li>
/// </ol>
/// \code
/// public func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
///     let cell = collectionView.dequeueReusableCell(withReuseIdentifier: FUIObjectCollectionViewCell.reuseIdentifier, for: indexPath) as! FUIObjectCollectionViewCell  //You may use any type of collection view cell here.
///     //configue cell here
///     //...
///     return cell
/// }
///
/// \endcode<ol>
///   <li>
///     Implement following methods if you need section header/footer. You can also set headerReferenceHeight/footerReferenceHeight to apply same height for all headers/footers.
///   </li>
/// </ol>
/// \code
/// func collectionView(_ collectionView: UICollectionView, viewForSupplementaryElementOfKind kind: String, at indexPath: IndexPath) -> UICollectionReusableView {
///     let view = collectionView.dequeueReusableSupplementaryView(ofKind: UICollectionElementKindSectionHeader, withReuseIdentifier: "Header", for: indexPath) as! FUICollectionSectionHeaderFooterView
///     //configue header/footer view here
///     //...
///     return view
/// }
///
/// func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, referenceSizeForHeaderInSection section: Int) -> CGSize {
///     switch section {
///     case 0:
///     return CGSize(width: 40, height: 40)
///     default:
///     return CGSize(width: 60, height: 60)
/// }
///
/// func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, referenceSizeForFooterInSection section: Int) -> CGSize {
///     switch section {
///     case 0:
///     return CGSize(width: 40, height: 40)
///     default:
///     return CGSize(width: 60, height: 60)
/// }
///
/// \endcode
SWIFT_CLASS("_TtC8SAPFiori37FUIHorizontalFlowCollectionViewLayout")
@interface FUIHorizontalFlowCollectionViewLayout : UICollectionViewFlowLayout
/// Enables the collection view cell items’ dimensions to be scaled upwards, to fill the width of the collection view’s <code>contentSize</code>.
@property (nonatomic) CGSize minimumScaledItemSize;
/// Number of columns of the layout. Default is 0. Setting a value greater than 0 to enable this feature.
@property (nonatomic) NSInteger numberOfColumns;
/// Scroll direction of the layout. Only vertical scroll is supported in FUIHorizontalFlowCollectionViewLayout.
@property (nonatomic) UICollectionViewScrollDirection scrollDirection;
/// :nodoc:
- (UICollectionViewLayoutAttributes * _Nullable)layoutAttributesForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (NSArray<UICollectionViewLayoutAttributes *> * _Nullable)layoutAttributesForElementsInRect:(CGRect)rect SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (BOOL)shouldInvalidateLayoutForBoundsChange:(CGRect)newBounds SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)prepareLayout;
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// This layout should be used when the user should pan horizontally in the collection view, to view items off-screen to the left or right.  Items in a section extend in a single row to infinity, so items will not wrap to new lines.
/// A developer should set the <code>itemSize</code> property of the layout, to specify the standard dimensions of the cell items.
/// <h2>Code usage</h2>
/// <ol>
///   <li>
///     Assign an instance of FUIHorizontalScrollCollectionViewLayout to your collection view.
///   </li>
/// </ol>
/// \code
/// self.collectionView.collectionViewLayout = FUICollectionViewLayout.horizontalScroll
///
/// \endcode<ol>
///   <li>
///     Implement collectionView(_:cellForItemAt:) dataSource.
///   </li>
/// </ol>
/// \code
/// public func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
///     let cell = collectionView.dequeueReusableCell(withReuseIdentifier: FUIObjectCollectionViewCell.reuseIdentifier, for: indexPath) as! FUIObjectCollectionViewCell  //You may use any type of collection view cell here.
///     //configue cell here
///     //...
///     return cell
/// }
///
/// \endcode<ol>
///   <li>
///     Implement following methods if you need section header/footer. You can also set headerReferenceHeight/footerReferenceHeight to apply same height for all headers/footers.
///   </li>
/// </ol>
/// \code
/// func collectionView(_ collectionView: UICollectionView, viewForSupplementaryElementOfKind kind: String, at indexPath: IndexPath) -> UICollectionReusableView {
///     let view = collectionView.dequeueReusableSupplementaryView(ofKind: UICollectionElementKindSectionHeader, withReuseIdentifier: "Header", for: indexPath) as! FUICollectionSectionHeaderFooterView
///     //configue header/footer view here
///     //...
///     return view
/// }
///
/// func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, referenceSizeForHeaderInSection section: Int) -> CGSize {
///     switch section {
///     case 0:
///     return CGSize(width: 40, height: 40)
///     default:
///     return CGSize(width: 60, height: 60)
/// }
///
/// func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, referenceSizeForFooterInSection section: Int) -> CGSize {
///     switch section {
///     case 0:
///     return CGSize(width: 40, height: 40)
///     default:
///     return CGSize(width: 60, height: 60)
/// }
///
/// \endcode
SWIFT_CLASS("_TtC8SAPFiori39FUIHorizontalScrollCollectionViewLayout")
@interface FUIHorizontalScrollCollectionViewLayout : UICollectionViewFlowLayout
/// :nodoc:
- (BOOL)shouldInvalidateLayoutForBoundsChange:(CGRect)newBounds SWIFT_WARN_UNUSED_RESULT;
/// FUIHorizontalScrollCollectionViewLayout only support horizontal scroll direction.
@property (nonatomic) UICollectionViewScrollDirection scrollDirection;
/// FUIHorizontalScrollCollectionViewLayout does not support estimatedItemSize, set itemSize instead.
@property (nonatomic) CGSize estimatedItemSize;
/// :nodoc:
- (void)invalidateLayout;
/// The width and height of the collection view’s contents.
@property (nonatomic, readonly) CGSize collectionViewContentSize;
/// :nodoc:
- (UICollectionViewLayoutAttributes * _Nullable)layoutAttributesForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (UICollectionViewLayoutAttributes * _Nullable)layoutAttributesForSupplementaryViewOfKind:(NSString * _Nonnull)elementKind atIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (NSArray<UICollectionViewLayoutAttributes *> * _Nullable)layoutAttributesForElementsInRect:(CGRect)rect SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)prepareLayout;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// <code>FUIImageView</code> is an enhanced Fiori style <code>UIImageView</code> that provides the option of applying a circular mask to the view’s <code>image</code> property. The view also exposes properties for specifying the width and color of an optional border around the image.
/// remark:
///
/// Implements <code>@IBDesignable</code>
/// <h2>Usage</h2>
/// <ul>
///   <li>
///     Initializing programmatically:
///   </li>
/// </ul>
/// \code
/// let imageView = FUIImageView(image: UIImage(named: "myProfilePic"))
/// //set image view to be circular
/// imageView.isCircular = true
///
/// \endcode<ul>
///   <li>
///     Placing inside a Storyboard or xib:
///   </li>
/// </ul>
/// <ol>
///   <li>
///     Drag and drop an <code>UIImageView</code> component to Interface Builder canvas.
///   </li>
///   <li>
///     Switch class name from  <code>UIImageView</code> to <code>FUIImageView', and set module to</code>SAPFiori`.
///   </li>
///   <li>
///     To apply, set <code>@IBInspectable</code> property <code>isCircular</code>, to <code>true</code>
///   </li>
/// </ol>
SWIFT_CLASS("_TtC8SAPFiori12FUIImageView")
@interface FUIImageView : UIImageView
/// Implementation of change handler.  Is invoked on changes to the <code>value</code> property.
@property (nonatomic, copy) void (^ _Nullable onChangeHandler)(UIImage * _Nullable);
/// :nodoc:
@property (nonatomic, strong) UIImage * _Nullable image;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image highlightedImage:(UIImage * _Nullable)highlightedImage OBJC_DESIGNATED_INITIALIZER;
/// Property defining the circular type of the image view.  Default is false, which has no ciruclar mask to the image
@property (nonatomic) BOOL isCircular;
/// Property defining the border color.
@property (nonatomic, strong) UIColor * _Nullable borderColor;
/// Property defining the border width. A width of 0.0 will
/// result in no border being shown.
@property (nonatomic) CGFloat borderWidth;
/// :nodoc:
- (void)layoutSubviews;
/// :nodoc:
- (void)prepareForInterfaceBuilder;
@property (nonatomic, readonly, strong) UIView * _Nonnull viewForFirstBaselineLayout;
@property (nonatomic, readonly, strong) UIView * _Nonnull viewForLastBaselineLayout;
@property (nonatomic) CGFloat baselineDescenderHeight;
@end



/// FUIInlineValidationView is a <code>UIView</code> contains a <code>UILabel</code>. It is used by <code>FUIInlineValidationTableViewCell</code> as a validation view appearing at the bottom to show the validation message.
SWIFT_CLASS("_TtC8SAPFiori23FUIInlineValidationView")
@interface FUIInlineValidationView : NibDesignable
/// Background view of <code>FUIInlineValidationView</code>
@property (nonatomic, readonly, weak) IBOutlet UIView * _Null_unspecified backgroundView;
/// separator of <code>FUIInlineValidationView</code>. It is implemented as a <code>UIView</code>.
@property (nonatomic, readonly, weak) IBOutlet UIView * _Null_unspecified separator;
/// A <code>UIlabel</code> holds the validation message.
@property (nonatomic, readonly, weak) IBOutlet FUILabel * _Null_unspecified titleLabel;
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
@property (nonatomic, readonly) Class _Nonnull nibLoadingClass;
/// :nodoc:
- (void)layoutSubviews;
@end


/// The <code>FUIKPIIconItem</code> is an <code>UIImageView</code> subclass, which conforms to <code>FUIKPIViewItem</code> protocol for representing a 32px x 32px icon being displayed in the <code>FUIKPIView</code>.
SWIFT_CLASS("_TtC8SAPFiori14FUIKPIIconItem")
@interface FUIKPIIconItem : UIImageView
/// :nodoc:
- (nonnull instancetype)initWithIcon:(UIImage * _Nonnull)icon;
/// :nodoc:
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
@property (nonatomic, readonly, strong) UIView * _Nonnull viewForFirstBaselineLayout;
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image highlightedImage:(UIImage * _Nullable)highlightedImage SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// The <code>FUIKPIMetricItem</code> is an <code>UILabel</code> subclass, which conforms to <code>FUIKPIViewItem</code> protocol for representing the value being displayed in <code>FUIKPIView</code>.  For example, in: “$256k”, the metric is “256”.
SWIFT_CLASS("_TtC8SAPFiori16FUIKPIMetricItem")
@interface FUIKPIMetricItem : UILabel
/// :nodoc:
- (nonnull instancetype)initWithString:(NSString * _Nonnull)string;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// The <code>FUIKPIUnitItem</code> is an <code>UILabel</code> subclass, which conforms to <code>FUIKPIViewItem</code> protocol for representing the metric’s unit information being displayed in <code>FUIKPIView</code>.  For example, in “$256k”, the units are “$” and “k”.
SWIFT_CLASS("_TtC8SAPFiori14FUIKPIUnitItem")
@interface FUIKPIUnitItem : UILabel
/// :nodoc:
- (nonnull instancetype)initWithString:(NSString * _Nonnull)string;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// <code>NibDesignableProtocol</code>-compliant implementation of <code>UIControl</code>
/// <h2>See also</h2>
/// <code>NibDesignableProtocol</code>
SWIFT_CLASS("_TtC8SAPFiori20NibDesignableControl")
@interface NibDesignableControl : UIControl
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// The <code>FUIKPIView</code> is an <code>UIView</code> subclass, which enables a developer to present “KPI” information in a formatted manner consistent with the Fiori Design Language.
/// The <code>FUIKPIView</code> takes 3 types of component items, and a caption string:
/// <ul>
///   <li>
///     <code>metric</code>:  the value which is being displayed.  For example, in: “$256k”, the metric is “256”.
///   </li>
///   <li>
///     <code>unit</code>: the unit information for the metric displayed.  For example, in “$256k”, the units are “$” and “k”.  Multiple unit components are permitted per metric.  However, a maximum of two units should be used on each side of the metric.
///   </li>
///   <li>
///     <code>icon</code>:  a 32px x 32px icon may be displayed.  Icons should only be displayed to the <em>left</em> of a metric.  Units may still be displayed to the right of the metric, when an icon is displayed.
///   </li>
///   <li>
///     <code>captionLabel</code>: optional label, displayed beneath the KPI components.
///   </li>
/// </ul>
/// The KPI components are implemented as <code>FUIKPIMetricItem</code>, <code>FUIKPIUnitItem</code>, and <code>FUIKPIIconItem</code>.  All implement <code>FUIKPIViewItem</code> protocol.  The developer should create instances of each of these components, and pass them to the <code>items: [FUIKPIViewItem]</code> property of the <code>FUIKPIView</code>.
/// note:
/// This API of component items is conceptually similar to that of <code>UIToolbar</code>’s <code>items: [UIBarButtonItem]?</code> property.
/// <h2>Color configuration:</h2>
/// <ul>
///   <li>
///     Call setTintColor(_:for:) to configure tint color for disabled, normal, highlighted <code>UIControlState</code>. Setting <code>tintColor</code> is equivalent to call setTintColor(color, for: UIControlState.normal). If <code>tintColor</code> is not set by developer, <code>colorScheme</code> will be applied.
///     <ul>
///       <li>
///         disabled: Color to be used when control is disabled.
///       </li>
///       <li>
///         normal: Color to be used when control is enabled.
///       </li>
///       <li>
///         highlighted: Color to be used when control is tapped on.
///       </li>
///     </ul>
///   </li>
/// </ul>
/// <h2>Initialization</h2>
/// <h3>Programmatically:</h3>
/// \code
/// let kpiView = FUIKPIView(frame: CGRect())
///
/// \endcode<h3>Inside a Storyboard or xib:</h3>
/// <ol>
///   <li>
///     Drag and drop a <code>UIView</code> component to Interface Builder’s canvas.
///   </li>
///   <li>
///     Switch custom class name from <code>UIView</code> to <code>FUIKPIView</code> and set module to <code>SAPFiori</code>.
///   </li>
///   <li>
///     Create an outlet of the <code>FUIKPIView</code> to be able to access its properties.
///   </li>
/// </ol>
/// <h2>Usage</h2>
/// \code
///
/// // Do any additional setup after loading the view.
///
/// let unit = FUIKPIUnitItem(string: "$")
/// let metric = FUIKPIMetricItem(string: "294")
/// let unit2 = FUIKPIUnitItem(string: "USD")
///
/// self.kpiView.items = [unit, metric, unit2]
/// self.kpiView.captionlabel.text = "Label example can wrap to two lines"
///
///
/// let icon = FUIKPIIconItem(icon: #imageLiteral(resourceName: "ProfilePic"))
/// let metric2 = FUIKPIMetricItem(string: "2")
///
/// self.kpiIconView.items = [icon, metric2, unit2]
/// self.kpiIconView.captionlabel.text = "Documents Example of Two Line Wrap"
///
///
/// \endcode
SWIFT_CLASS("_TtC8SAPFiori10FUIKPIView")
@interface FUIKPIView : NibDesignableControl
/// :nodoc:
@property (nonatomic, getter=isEnabled) BOOL enabled;
/// :nodoc:
@property (nonatomic, getter=isHighlighted) BOOL highlighted;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
@property (nonatomic, readonly) Class _Nonnull nibLoadingClass;
/// :nodoc:
@property (nonatomic, strong) UIColor * _Null_unspecified tintColor;
/// Optional label, displayed beneath the KPI components.  Wraps to 2 lines, with a preferred max width of 216 px.
@property (nonatomic, readonly, weak) IBOutlet FUILabel * _Null_unspecified captionlabel;
/// Sets the tint color for the specified state.
/// \param state The state that uses the specified color. The possible values are described in <code>UIControlState</code>.
///
///
/// returns:
/// The color for the state.
- (UIColor * _Nullable)tintColorFor:(UIControlState)state SWIFT_WARN_UNUSED_RESULT;
/// Sets the tint color for the specified state.
/// \param color the color to use as tint color.
///
/// \param state The state that uses the specified color. The possible values are described in <code>UIControlState</code>.
///
- (void)setTintColor:(UIColor * _Nullable)color for:(UIControlState)state;
/// :nodoc:
- (void)prepareForInterfaceBuilder;
/// :nodoc:
@property (nonatomic, readonly) CGSize intrinsicContentSize;
/// :nodoc:
- (void)tintColorDidChange;
/// :nodoc:
@property (nonatomic, readonly, strong) UIView * _Nonnull viewForLastBaselineLayout;
@end

@class UITextView;

/// FUIKeyValueCollectionViewCell is a variant of <code>UICollectionViewCell</code> defined in <code>SAPFiori</code>. It contains a <code>UILabel</code> and a <code>UITextField</code>.
/// <h2>Code usage:</h2>
/// Register <code>FUIKeyValueCollectionViewCell</code> for a collection view object.
/// \code
///
/// self.collectionView.register(FUIKeyValueCollectionViewCell.self, forCellWithReuseIdentifier: FUIKeyValueCollectionViewCell.reuseIdentifier)
///
///
/// \endcodeImplement collection view’s dataSource method <code>collectionView(_:cellForItemAt:)</code>
/// \code
///
/// public func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
///     let cell = self.collectionView.dequeueReusableCell(withReuseIdentifier: FUIKeyValueCollectionViewCell.reuseIdentifier, for: indexPath) as! FUIKeyValueCollectionViewCell
///
///     switch indexPath.item {
///         case 0:
///         cell.keyName = "Name"
///         cell.value = "Broken Plates on Pole"
///         case 1:
///         cell.keyName = "Sort No."
///         cell.value = "0001"
///         default:
///         break
///     }
///
///     return cell
/// }
///
///
/// \endcode
SWIFT_CLASS("_TtC8SAPFiori29FUIKeyValueCollectionViewCell")
@interface FUIKeyValueCollectionViewCell : FUIBaseCollectionViewCell
/// The UILabel holds the key string.
@property (nonatomic, readonly, weak) UILabel * _Null_unspecified keyLabel;
/// The <code>UITextField</code> holds the value string.
@property (nonatomic, weak) UITextField * _Null_unspecified valueTextField;
/// The <code>UITextView</code> holds the value string.
@property (nonatomic, readonly, weak) UITextView * _Null_unspecified valueTextView;
/// Reuse identifier
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull reuseIdentifier;)
+ (NSString * _Nonnull)reuseIdentifier SWIFT_WARN_UNUSED_RESULT;
/// The key name of the cell.
@property (nonatomic, copy) NSString * _Nullable keyName;
/// The value of the cell.
@property (nonatomic, copy) NSString * _Nullable value;
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (CGSize)systemLayoutSizeFittingSize:(CGSize)targetSize withHorizontalFittingPriority:(UILayoutPriority)horizontalFittingPriority verticalFittingPriority:(UILayoutPriority)verticalFittingPriority SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)prepareForReuse;
@end


/// The <code>FUIStandardAutoSizingColumnFlowLayout</code> resizes collection view cell items, to lay them out according to a specified number of columns.  All items per row are top-aligned, though the cell item height may vary, based upon the AutoLayout system’s height calculation for the cell.
/// <h2>Code usage</h2>
/// <ol>
///   <li>
///     Assign an instance of FUIStandardAutoSizingColumnFlowLayout to your collection view.
///   </li>
/// </ol>
/// \code
/// self.collectionView.collectionViewLayout = FUICollectionViewLayout.autosizingColumnFlow
///
/// \endcode<ol>
///   <li>
///     Implement collectionView(_:cellForItemAt:) dataSource.
///   </li>
/// </ol>
/// \code
/// public func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
///     let cell = collectionView.dequeueReusableCell(withReuseIdentifier: FUIObjectCollectionViewCell.reuseIdentifier, for: indexPath) as! FUIObjectCollectionViewCell
///     //configue cell here
///     //...
///     return cell
/// }
///
/// \endcode<ol>
///   <li>
///     Implement following methods if you need section header/footer. You can also set headerReferenceHeight/footerReferenceHeight to apply same height for all headers/footers.
///   </li>
/// </ol>
/// \code
/// func collectionView(_ collectionView: UICollectionView, viewForSupplementaryElementOfKind kind: String, at indexPath: IndexPath) -> UICollectionReusableView {
///     let view = collectionView.dequeueReusableSupplementaryView(ofKind: UICollectionElementKindSectionHeader, withReuseIdentifier: "Header", for: indexPath) as! FUICollectionSectionHeaderFooterView
///     //configue header/footer view here
///     //...
///     return view
///     }
/// }
///
/// func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, referenceSizeForHeaderInSection section: Int) -> CGSize {
///     switch section {
///     case 0:
///     return CGSize(width: 40, height: 40)
///     default:
///     return CGSize(width: 60, height: 60)
/// }
///
/// func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, referenceSizeForFooterInSection section: Int) -> CGSize {
///     switch section {
///     case 0:
///     return CGSize(width: 40, height: 40)
///     default:
///     return CGSize(width: 60, height: 60)
/// }
///
/// \endcode
SWIFT_CLASS("_TtC8SAPFiori37FUIStandardAutoSizingColumnFlowLayout")
@interface FUIStandardAutoSizingColumnFlowLayout : UICollectionViewLayout
/// The spacing to use between items in the same row.
@property (nonatomic) CGFloat minimumInteritemSpacing;
/// The spacing to use between lines of items in the grid.
@property (nonatomic) CGFloat minimumLineSpacing;
/// The margins used to lay out content in a section.
@property (nonatomic) UIEdgeInsets sectionInset;
/// The default height to use for section headers. Implementing collectionView(_:layout:referenceSizeForHeaderInSection:) will override this property.
@property (nonatomic) CGFloat headerReferenceHeight;
/// The default height to use for section footers. Implementing collectionView(_:layout:referenceSizeForFooterInSection:) will override this property.
@property (nonatomic) CGFloat footerReferenceHeight;
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (BOOL)shouldInvalidateLayoutForBoundsChange:(CGRect)newBounds SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)invalidateLayout;
/// :nodoc:
- (UICollectionViewLayoutAttributes * _Nullable)layoutAttributesForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (UICollectionViewLayoutAttributes * _Nullable)layoutAttributesForSupplementaryViewOfKind:(NSString * _Nonnull)elementKind atIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (NSArray<UICollectionViewLayoutAttributes *> * _Nullable)layoutAttributesForElementsInRect:(CGRect)rect SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)prepareLayout;
/// Returns the width and height of the collection view’s contents.
@property (nonatomic, readonly) CGSize collectionViewContentSize;
/// Number of columns of the layout. Default is 2. Only valid in regular mode.
@property (nonatomic) NSInteger numberOfColumns;
@end


/// A subclass of <code>FUIStandardAutoSizingColumnFlowLayout</code> which resizes collection view cell items, to lay them out according to a specified number of columns.  All items per row are top-aligned, though the cell item height may vary, based upon the AutoLayout system’s height calculation for the cell.
/// <code>minimumInteritemSpacing</code> is set to 80 and <code>minimumLineSpacing</code> is set to 24 by default.
/// <code>sectionInset</code> is set to ‘top: 0, left: 8, bottom: 0, right: 8’.
SWIFT_CLASS("_TtC8SAPFiori21FUIKeyValueFlowLayout")
@interface FUIKeyValueFlowLayout : FUIStandardAutoSizingColumnFlowLayout
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class FUITextViewExt;

/// The reusable UI component implemented as an <code>UITableViewCell</code> to allow user enter notes.
/// <img src="../ReadmeImages/FK_NoteCellAnnotations.png?raw=true" alt="FUINoteFormCell" width="376">
/// Optionally, the developer may provide:
/// <ul>
///   <li>
///     <code>value</code>: The default text in the note.
///   </li>
///   <li>
///     <code>placeholderText</code>: The placeholder string to be put on the text area before user typed anything.
///   </li>
///   <li>
///     <code>isAutoFitting</code>: If this is true, the scroll will be disabled and the height of the
///     cell will grow and shrink as needed. There is a minimum height that the cell
///     will maintain.
///   </li>
///   <li>
///     <code>isEditable</code>: Indicates if the note text could be modified or not. The default is true.
///   </li>
///   <li>
///     <code>onChangeHandler</code>: a handler closure, which is invoked on changes to the value
///   </li>
/// </ul>
/// The following is an example of usage in an application <code>UITableViewController</code>:
/// important:
/// The app’s <code>UITableViewController</code> must subclass <code>FUIFormTableViewController</code>
/// \code
///
/// override func viewDidLoad() {
///    super.viewDidLoad()
///    self.tableView.register(FUINoteFormCell.self, forCellReuseIdentifier: FUINoteFormCell.reuseIdentifier)
///    // ...
/// }
///
/// override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
///
///    let cell = tableView.dequeueReusableCell(withIdentifier: FUINoteFormCell.reuseIdentifier, for: indexPath) as! FUINoteFormCell
///
///    // If a value already exists, set it to the `value` property
///    cell.value = myObject.note
///
///    // Specify an optional placeholder text
///    cell.placeholderText = "Description"
///
///    // MARK:  implement onChangeHandler
///    cell.onChangeHandler = { newValue in
///        myObject.note = newValue
///    }
///
///    return cell
/// }
///
///
/// \endcode
SWIFT_CLASS("_TtC8SAPFiori15FUINoteFormCell")
@interface FUINoteFormCell : FUIInlineValidationTableViewCell <UITextViewDelegate>
/// The default cell reuse identifier.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull reuseIdentifier;)
+ (NSString * _Nonnull)reuseIdentifier SWIFT_WARN_UNUSED_RESULT;
/// The note string.
@property (nonatomic, copy) NSString * _Nonnull value;
/// Implementation of change handler.  Is invoked on changes to the <code>value</code> property.
@property (nonatomic, copy) void (^ _Nullable onChangeHandler)(NSString * _Nonnull);
/// Indicates if the note text could be modified or not.
/// The default is true.
@property (nonatomic) BOOL isEditable;
/// The placeholder string to be put on the text area
/// before user typed anything.
@property (nonatomic, copy) NSString * _Nullable placeholderText;
/// The UI component holds the note text.
@property (nonatomic, readonly, weak) IBOutlet FUITextViewExt * _Null_unspecified valueTextView;
@property (nonatomic, readonly, weak) IBOutlet FUITextViewExt * _Null_unspecified noteText;
/// If <code>isTrackingLiveChanges == true</code>, then <code>onChangeHandler</code>,
/// will be invoked for every letter entered.
/// Otherwise, <code>onChangeHandler</code> will be invoked only after
/// user taps “Done” key, or the field resigns first responder.
/// Defaults to <code>false</code>.
@property (nonatomic) BOOL isTrackingLiveChanges;
/// If this is true, this <code>FUINoteFormCell</code> will grow in height and the
/// cell will not be scrollable.
/// Otherwise, the cell height will be fixed.
@property (nonatomic) BOOL isAutoFitting;
/// This is the maximum length of the note text, if maxNoteTextLength is greater than 0.
/// If the text length reaches this limit, the user cannot enter more text.
/// Note: If the user pastes a string and the length plus
/// the current text length is greater than the limit, the insert
/// is rejected. Partial strings are not accepted in the text field.
/// The default value for maxNoteTextLength is 0, which means no limit.
@property (nonatomic) NSInteger maxNoteTextLength;
/// The type of the keyboard being used when the cell is in input mode.
@property (nonatomic) UIKeyboardType keyboardType;
/// :nodoc:
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (BOOL)resignFirstResponder SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (CGSize)systemLayoutSizeFittingSize:(CGSize)targetSize withHorizontalFittingPriority:(UILayoutPriority)horizontalFittingPriority verticalFittingPriority:(UILayoutPriority)verticalFittingPriority SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)updateConstraints;
/// :nodoc:
- (void)setSelected:(BOOL)selected animated:(BOOL)animated;
/// :nodoc:
- (void)prepareForReuse;
/// :nodoc:
- (BOOL)textViewShouldBeginEditing:(UITextView * _Nonnull)textView SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)textViewDidEndEditing:(UITextView * _Nonnull)textView;
/// :nodoc:
- (void)textViewDidChange:(UITextView * _Nonnull)textView;
/// :nodoc:
- (BOOL)textView:(UITextView * _Nonnull)textView shouldChangeTextInRange:(NSRange)range replacementText:(NSString * _Nonnull)text SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) Class _Nonnull nibLoadingClass;
@end


/// A customized <code>UITableViewCell</code>, which contains a <code>UILabel</code> and a <code>UITextView</code>. It takes text as input.
/// <img src="../ReadmeImages/FK_KeyValueFormCellAnnotations.png?raw=true" alt="FUIKeyValueFormCell" width="376">
/// The developer should set the following properties on the cell, in their implementation of <code>UITableViewDataSource</code> <code>cellForRow(at:)</code> function:
/// <ul>
///   <li>
///     <code>keyName</code>: The key name of the property.
///   </li>
///   <li>
///     <code>placeholderText</code>: The placeholder of the property.
///   </li>
///   <li>
///     <code>value</code>: The value of the property, as <code>String</code>.
///   </li>
/// </ul>
/// And an <code>onChangeHandler</code>:
/// <ul>
///   <li>
///     <code>onChangeHandler</code>: a handler closure, which is invoked on changes to the value.
///   </li>
/// </ul>
/// Optionally, the developer may set
/// <ul>
///   <li>
///     <code>isAutoFitting</code>: Indicate if the cell height will adjust based on its content text. Default value is false.
///   </li>
///   <li>
///     <code>isTrackingLiveChanges</code>: Indicate how <code>onChangeHandler</code> is invoked. If true, <code>onChangeHandler</code> will be invoked every time a letter is entered or deleted; if false, <code>onChangeHandler</code> will only be invoked when cell resigns first reponder.
///   </li>
///   <li>
///     ‘isEditable’: If the cell is editable or not. Default value is true. Date detector works only if this property is set to false.
///   </li>
/// </ul>
/// The following is an example of usage in an application <code>UITableViewController</code>:
/// important:
/// The app’s <code>UITableViewController</code> must subclass <code>FUIFormTableViewController</code>
/// \code
/// override func viewDidLoad() {
/// super.viewDidLoad()
/// self.tableView.register(FUIKeyValueFormCell, forCellReuseIdentifier: FUIKeyValueFormCell.reuseIdentifier)
/// // ...
/// }
///
/// override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
///
/// let cell = tableView.dequeueReusableCell(withIdentifier: FUIKeyValueFormCell.reuseIdentifier, for: indexPath) as! FUIKeyValueFormCell
/// cell.keyName = "Note"
/// cell.placeholderText = "Description"
/// cell.value = myObject.descriptionText1
/// cell.isAutoFitting = true
/// cell.isTrackingLiveChanges = true
/// cell.isEditable = false
/// cell.onChangeHandler = { newValue in
/// self.myObject.descriptionText1 = newValue
/// }
/// return cell
/// }
///
/// \endcode
SWIFT_CLASS("_TtC8SAPFiori19FUIKeyValueFormCell")
@interface FUIKeyValueFormCell : FUINoteFormCell
/// The UILabel holds the key name string.
@property (nonatomic, strong) UILabel * _Null_unspecified keyLabel;
/// The key name of the cell.
@property (nonatomic, copy) NSString * _Nullable keyName;
/// :nodoc:
- (void)prepareForReuse;
/// :nodoc:
- (void)textViewDidBeginEditing:(UITextView * _Nonnull)textView;
/// :nodoc:
- (void)textViewDidEndEditing:(UITextView * _Nonnull)textView;
/// :nodoc:
- (BOOL)textView:(UITextView * _Nonnull)textView shouldChangeTextInRange:(NSRange)range replacementText:(NSString * _Nonnull)text SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// Subclass of UILabel, implementing <code>onChangeHandler</code> that is invoked on changes to the <code>value</code> property.
SWIFT_CLASS("_TtC8SAPFiori8FUILabel")
@interface FUILabel : UILabel
/// Implementation of change handler.  Is invoked on changes to the <code>value</code> property.
@property (nonatomic, copy) void (^ _Nullable onChangeHandler)(NSString * _Nullable);
/// :nodoc:
@property (nonatomic, copy) NSString * _Nullable text;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// To add space around the content
@property (nonatomic) UIEdgeInsets insets;
/// :nodoc:
@property (nonatomic, readonly) CGSize intrinsicContentSize;
/// :nodoc:
- (void)drawTextInRect:(CGRect)rect;
@end


@interface FUILabel (SWIFT_EXTENSION(SAPFiori))
@end


/// The reusable UI component implemented as an <code>UITableViewCell</code> to display a key-value pair property, which is integrated with a <code>FUIListPicker</code> controller for displaying a list of values.
/// <h3>Single-line version</h3>
/// <img src="../ReadmeImages/FK_SingleLineListCellAnnotations.png?raw=true" alt="FUIListPickerFormCell-single" width="376">
/// <h3>Multi-line version</h3>
/// <img src="../ReadmeImages/FK_MultiLineListCellAnnotations.png?raw=true" alt="FUIListPickerFormCell-multi" width="376">
/// The developer should set the following properties on the cell, in their implementation of <code>UITableViewDataSource</code> <code>cellForRow(at:)</code> function:
/// <ul>
///   <li>
///     <code>keyName</code>: The key name of the property.
///   </li>
///   <li>
///     <code>value</code>: The default selections.
///   </li>
///   <li>
///     <code>valueOptions</code>: The list of optional values user may choose from.
///   </li>
///   <li>
///     <code>allowsMultipleSelection</code>: Indicates if user can select multiple values. Default is true, meaning by default user may select multiple values.
///   </li>
///   <li>
///     <code>isEditable</code>: If the selection(s) could be modified or not. The default is true.
///   </li>
///   <li>
///     <code>listPicker</code>: The <code>FUIListPicker</code> for this <code>FUIListPickerFormCell</code>.
///   </li>
/// </ul>
/// Note that the display of the selections in the <code>valueTextField</code> is the
/// responsibility of the developer if the <code>dataSource</code> property of the <code>listPicker</code>
/// is set. Developer is to set the text of the <code>valueTextField</code> to reflect the selections.
/// Otherwise, if developer sets <code>valueOptions</code> and leaves <code>dataSource</code> of <code>listPicker</code> to nil,
/// then the text in <code>valueTextField</code> will be set internally.
/// Here are the code snippets in app’s <code>UITableViewController</code> implementation:
/// (The app’s <code>UITableViewController</code> needs to be a subclass of <code>FUIFormTableViewController</code>.)
/// \code
///
///        var propValue7: [Int] = [1, 3, 6]
///        var valueOptions7 = ["One", "Two", "Three", "Four", "Five", "Six", "Seven"]
///        var listPickerDataSource7 = StringListPickerDataSource(options: valueOptions7)
///
///        override func viewDidLoad() {
///            super.viewDidLoad()
///            self.tableView.register(FUIListPickerFormCell.self, forCellReuseIdentifier: FUIListPickerFormCell.reuseIdentifier)
///            // ...
///        }
///
///        override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
///            // ...
///            let cell = tableView.dequeueReusableCell(withIdentifier: FUIListPickerFormCell.reuseIdentifier, for: indexPath) as! FUIListPickerFormCell
///            cell.keyName = "Choose Multiple"
///            cell.value = propValue7
///            cell.allowsMultipleSelection = true
///            cell.valueTextField.text = descriptionForSelectedStrings(valueOptions7, at: propValue7) // See below
///
///            cell.listPicker.dataSource = listPickerDataSource7
///            cell.listPicker.searchResultsUpdating = listPickerDataSource7
///            cell.listPicker.isSearchEnabled = true
///            cell.listPicker.prompt = "Please select multiple items"
///
///            cell.listPicker.searchBar?.isBarcodeScannerEnabled = true
///            cell.listPicker.searchBar?.barcodeScanner?.scanMode = .EAN_UPC
///            cell.listPicker.searchBar?.barcodeScanner?.scanResultTransformer = { (scanString) -> String in
///                return self.transformStringToSearchBar(scanResultString: scanString)
///            }
///            // MARK:  implement onChangeHandler
///            cell.onChangeHandler = { [unowned self] newValue in
///                self.propValue3 = newValue
///            }
///            return cell
///            // ...
///        }
///
///        func descriptionForSelectedStrings(_ options: [String], at indexes: [Int]) -> String {
///            return options.enumerated().filter({ (index, element) -> Bool in
///                return indexes.contains(index)
///            }).reduce ("") { string, element in
///                return string.isEmpty ? element.1 : "\(string), \(element.1)"
///            }
///        }
///
///
/// \endcode
SWIFT_CLASS("_TtC8SAPFiori21FUIListPickerFormCell")
@interface FUIListPickerFormCell : FUIInlineValidationTableViewCell
/// The default cell reuse identifier.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull reuseIdentifier;)
+ (NSString * _Nonnull)reuseIdentifier SWIFT_WARN_UNUSED_RESULT;
/// The value is the selected strings.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull value;
/// Implementation of change handler.  Is invoked on changes to the <code>value</code> property.
@property (nonatomic, copy) void (^ _Nullable onChangeHandler)(NSArray<NSNumber *> * _Nonnull);
/// Indicates if this cell is editable or not,
/// i.e., the selections could be changed or not.
/// The default is true.
@property (nonatomic) BOOL isEditable;
/// The key name of the property.
@property (nonatomic, copy) NSString * _Nullable keyName;
/// The array of the valid options.
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull valueOptions;
/// Indicates if user can select multiple values.
/// Default is true, meaning by default user may select multiple values.
@property (nonatomic) BOOL allowsMultipleSelection;
/// Indicates if empty selection is allowed.
/// Default is true, meaning by default user must select at least one item.
@property (nonatomic) BOOL allowsEmptySelection;
/// :nodoc:
@property (nonatomic, copy) NSString * _Nullable selectedEntriesSectionTitle;
/// :nodoc:
@property (nonatomic, copy) NSString * _Nullable allEntriesSectionTitle;
/// The UILabel holds the key name string.
@property (nonatomic, readonly, weak) IBOutlet UILabel * _Null_unspecified keyLabel;
/// The UITextField holds the selected value strings.
@property (nonatomic, readonly, weak) IBOutlet UITextField * _Null_unspecified valueTextField;
/// If this property is true, the cancel button will be shown on the right side of
/// the navigation bar to let user undo the change when tapped.
/// The default is false. i.e., the cancel button will not be shown.
@property (nonatomic) BOOL isUndoEnabled;
/// :nodoc:
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)layoutSubviews;
/// :nodoc:
- (CGSize)systemLayoutSizeFittingSize:(CGSize)targetSize withHorizontalFittingPriority:(UILayoutPriority)horizontalFittingPriority verticalFittingPriority:(UILayoutPriority)verticalFittingPriority SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)prepareForReuse;
/// :nodoc:
- (void)setSelected:(BOOL)selected animated:(BOOL)animated;
/// :nodoc:
@property (nonatomic, copy) NSArray * _Nullable accessibilityElements;
/// :nodoc:
- (NSInteger)accessibilityElementCount SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (id _Nullable)accessibilityElementAtIndex:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (NSInteger)indexOfAccessibilityElement:(id _Nonnull)element SWIFT_WARN_UNUSED_RESULT;
@end

@class UIActivityIndicatorView;

/// <code>FUILoadingIndicatorView</code> is an IBdesignable UI component. A loading indicator shows that something is currently in progress. It shows a <code>UIActivityIndicatorView</code> to visualize progress and a <code>UILabel</code> indicating to the user what is in progress.
/// By default, this view is visible and the animation is stopped. To start the animation call <code>startAnimating()</code>.
/// <h2>Initialization</h2>
/// <h3>Programmatically:</h3>
/// \code
/// let loadingIndicatorView = FUILoadingIndicatorView(frame: CGRect())
///
/// \endcode<h3>Inside a Storyboard or xib:</h3>
/// <ol>
///   <li>
///     Drag and drop an <code>UIView</code> component to Interface Builder canvas.
///   </li>
///   <li>
///     Switch class name from <code>UIView</code> to <code>FUILoadingIndicatorView</code>, and set module to <code>SAPFiori</code>.
///   </li>
///   <li>
///     Create an outlet of the loading indicator to be able to access its properties.
///   </li>
/// </ol>
/// <h2>Usage</h2>
/// \code
/// loadingIndicatorView.show()
/// // do something
/// loadingIndicatorView.dismiss()
///
/// \endcode<h2>Animation</h2>
/// The animation of the activity indicator can be started or stopped without affecting the visibility of the view.
/// \code
/// loadingIndicatorView.startAnimating()
/// // do something
/// loadingIndicatorView.stopAnimating()
///
/// \endcode<h2>Theming</h2>
/// The styleClass of the view is <code>fdlFUILoadingIndicatorView</code>.
/// In the .nss file you can use the following parameters:
/// <ul>
///   <li>
///     <code>fdlFUILoadingIndicatorView_textLabel</code>: changes the appearance of the <code>textLabel</code>
///   </li>
/// </ul>
/// <h3>Example:</h3>
/// \code
/// fdlFUILoadingIndicatorView_textLabel {
///    background-color: red;
///    border-color: green;
///    border-width: 2;
///    corner-radius: 2;
///    font-color: blue;
///    font-color-highlighted: yellow;
///    font-name: Avenir;
///    font-size: 15;
///    height: 50;
///    shadow-color: black;
///    shadow-offset: 1, 2;
///    shadow-opacity: 0.5;
///    shadow-radius: 2;
///    text-align: center;
///    text-alpha: 0.9;
///    text-auto-fit: true;
///    text-shadow-color: black;
///    text-shadow-offset: 1, 2;
///    text-transform: uppercase;
///    text-line-clamp:6;
///    width: 100;
/// }
///
/// \endcode<ul>
///   <li>
///     <code>fdlFUILoadingIndicatorView_activityIndicator</code>: changes the appearance of <code>activityIndicator</code>
///   </li>
/// </ul>
/// <h3>Example:</h3>
/// \code
/// fdlFUILoadingIndicatorView_activityIndicator {
///    color: blue;
/// }
///
/// \endcode
SWIFT_CLASS("_TtC8SAPFiori23FUILoadingIndicatorView")
@interface FUILoadingIndicatorView : NibDesignable
/// Activity indicator that is either spinning or stopped.
@property (nonatomic, readonly, weak) IBOutlet UIActivityIndicatorView * _Null_unspecified activityIndicator;
/// Text label below the activity indicator.
@property (nonatomic, readonly, weak) IBOutlet UILabel * _Null_unspecified textLabel;
/// Text of <code>textLabel</code>. The default is a localized version of <code>LOADING</code>.
@property (nonatomic, copy) NSString * _Nullable text;
/// A boolean value that indicates whether the activity indicator is currently spinning.
@property (nonatomic, readonly) BOOL isAnimating;
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
@property (nonatomic, readonly) Class _Nonnull nibLoadingClass;
/// Shows the loading indicator and starts spinning the activity indicator.
/// \param animated whether the loading indicator is shown with a fade animation.
///
- (void)showWithAnimated:(BOOL)animated;
/// Dismisses the loading indicator and stops spinning the activity indicator.
- (void)dismiss;
/// Starts the spinning animation of the activity indicator until it is stopped.
- (void)startAnimating;
/// Stops the spinning animation of the activity indicator.
- (void)stopAnimating;
/// :nodoc:
@property (nonatomic, readonly) CGSize intrinsicContentSize;
@end

@class UINavigationItem;

/// A view controller to be presented as a modal form sheet. The view controller shows a <code>CheckoutIndicatorView</code>, which is drawn based on the set <code>displayState</code>.
/// <h2>Initialization</h2>
/// <h3>Programmatically:</h3>
/// \code
/// let viewController = FUIModalCheckoutViewController.instantiateViewController()
/// viewController.title = "My Modal Checkout Title"
/// viewController.text = "Processing"
/// self.present(viewController, animated: false)
///
/// \endcode<h3>Inside a Storyboard:</h3>
/// <ol>
///   <li>
///     Drag and drop a <code>Storyboard Reference</code> component to Interface Builder’s canvas.
///   </li>
///   <li>
///     Enter <code>FUIModalCheckout</code> as Storyboard and <code>com.sap.cp.sdk.ios.SAPFiori</code> as Bundle.
///   </li>
///   <li>
///     Create a segue between your Button and the storyboard reference and select <code>Present Modally</code> as action.
///   </li>
///   <li>
///     Select the segue and in Interface Builder give it an identifier (e.g. <code>showModalCheckout</code>).
///   </li>
///   <li>
///     In your view controller override <code>prepare(for segue: UIStoryboardSegue, sender: Any?)</code>
///   </li>
///   <li>
///     From the segue get the destination and cast it to <code>FUIModalCheckoutViewController</code>.
///   </li>
///   <li>
///     You can then register a delegate or change the controller’s display state.
///   </li>
/// </ol>
/// <h2>Usage</h2>
/// \code
///
/// // override `prepareForSegue`-method and retrieve view controller from segue destination.
/// override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
///    guard let showModalCheckoutSegue = segue.identifier, showModalCheckoutSegue == "showModalCheckout" else {
///        return
///    }
///    
///    // keep a (weak) reference to modalCheckoutViewController
///    self.modalCheckoutViewController = segue.destination as? FUIModalCheckoutViewController
///    self.modalCheckoutViewController?.delegate = self
/// }
///
/// // implementation of FUIModalCheckoutViewControllerDelegate callback.
/// public func dismissController(_ controller: FUIModalCheckoutViewController) {
///    //stop any loading or checkout! User cancelled it...
///    //... or set state to completed.
///    self.modalCheckoutViewController?.changeDisplayState(to: .completed) {
///        self.modalCheckoutViewController?.dismiss(animated: true)
///    }
/// }
///
/// // While the FUIModalCheckoutViewController is shown, you might want to change the display state according to 
/// // your loading / checkout progress. E.g. when you are done, you can change the state to `.completed`.
/// self.modalCheckoutViewController?.displayState = .completed
/// self.modalCheckoutViewController?.text = "Completed"
///
/// \endcode
SWIFT_CLASS("_TtC8SAPFiori30FUIModalCheckoutViewController")
@interface FUIModalCheckoutViewController : UIViewController
/// :nodoc:
@property (nonatomic, readonly) UIStatusBarStyle preferredStatusBarStyle;
/// This view controller’s navigation bar.
@property (nonatomic, readonly, strong) IBOutlet UINavigationBar * _Null_unspecified navigationBar;
/// The navigation Bar Title Item
@property (nonatomic, readonly, strong) IBOutlet UINavigationItem * _Null_unspecified navigationBarTitleItem;
/// UIBarButtonItem of the view controller, representing the Done-Button.
@property (nonatomic, readonly, strong) IBOutlet UIBarButtonItem * _Null_unspecified leftBarButtonItem;
/// UILabel below the checkout indicator view, to indicate the current displayState using a text label.
@property (nonatomic, readonly, strong) IBOutlet UILabel * _Null_unspecified textLabel;
/// The title shown at the top of this controller.
@property (nonatomic, copy) NSString * _Nullable title;
/// The text displayed underneath the checkout indicator.
@property (nonatomic, copy) NSString * _Nullable text;
/// Instantiates a new view controller instance from storyboard.
///
/// returns:
/// the new instance loaded from storyboard.
+ (FUIModalCheckoutViewController * _Nonnull)instantiateViewController SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)viewDidLoad;
/// :nodoc:
- (void)viewWillAppear:(BOOL)animated;
@end


/// <code>FUIModalLoadingIndicatorView</code> shows a <code>FUILoadingIndicatorView</code> centered in a container area of the screen and disables interaction. The container can be either a view or a window.
/// By default, the loading indicator is shown centered on screen. The view is not visible and the animation is stopped until <code>show()</code> is called.
/// <h2>Initialization</h2>
/// \code
/// let modalLoadingIndicatorView = FUIModalLoadingIndicatorView()
///
/// \endcode<h2>Usage</h2>
/// <h3>Show Fullscreen</h3>
/// \code
/// modalLoadingIndicatorView.show()
/// // do something
/// modalLoadingIndicatorView.dismiss()
///
/// \endcode<h3>Show in View</h3>
/// \code
/// let containerView = UIView()
/// modalLoadingIndicatorView.show(inView: containerView)
/// // do something
/// modalLoadingIndicatorView.dismiss()
///
/// \endcode
SWIFT_CLASS("_TtC8SAPFiori28FUIModalLoadingIndicatorView")
@interface FUIModalLoadingIndicatorView : NibDesignable
/// Loading indicator that is centered in container.
@property (nonatomic, readonly, weak) IBOutlet FUILoadingIndicatorView * _Null_unspecified loadingIndicator;
/// Text of <code>loadingIndicator</code>’s text label. The default is a localized version of <code>LOADING</code>.
@property (nonatomic, copy) NSString * _Nullable text;
/// A boolean value that indicates whether the loading indicator is currently spinning.
@property (nonatomic, readonly) BOOL isAnimating;
/// :nodoc:
@property (nonatomic, readonly) Class _Nonnull nibLoadingClass;
/// Shows the loading indicator in the center of <code>view</code> and starts spinning the activity indicator.
/// \param view the container view in which the loading indicator is centered.
///
/// \param animated whether the loading indicator is shown with a fade animation. The default is <code>true</code>.
///
- (void)showInView:(UIView * _Nonnull)view animated:(BOOL)animated;
/// Dismisses the loading indicator and stops spinning the activity indicator.
- (void)dismiss;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class FUIProcessingIndicatorView;

/// <code>FUIModalProcessingIndicatorView</code> shows a <code>FUIProcessingIndicatorView</code> centered in a container area of the screen and disables interaction. The container can be either a view or a window. An overlay is shown behind the processing indicator, which covers the whole container. The overlay can be either set to translucent white or to be using a <code>UIVisualEffectView</code> to achieve a blurred background.
/// By default, the processing indicator is shown centered on screen and shows a translucent white overlay. The view is not visible and the animation is stopped until <code>show()</code> is called.
/// To change the background mode to blurred, simply assign <code>BackgroundMode.blurred</code> to the <code>backgroundMode</code> property.
/// <h2>Initialization</h2>
/// \code
/// let modalProcessingIndicatorView = FUIModalProcessingIndicatorView()
///
/// \endcode<h2>Usage</h2>
/// <h3>Show Fullscreen</h3>
/// \code
/// modalProcessingIndicatorView.show()
/// // do something
/// modalProcessingIndicatorView.dismiss()
///
/// \endcode<h3>Show in View</h3>
/// \code
/// let containerView = UIView()
/// modalProcessingIndicatorView.show(inView: containerView)
/// // do something
/// modalProcessingIndicatorView.dismiss()
///
/// \endcode
SWIFT_CLASS("_TtC8SAPFiori31FUIModalProcessingIndicatorView")
@interface FUIModalProcessingIndicatorView : NibDesignable
/// Processing indicator that is centered in container.
@property (nonatomic, readonly, weak) IBOutlet FUIProcessingIndicatorView * _Null_unspecified processingIndicator;
/// Text of <code>processingIndicator</code>’s text label. The default is <code>nil</code>.
@property (nonatomic, copy) NSString * _Nullable text;
/// A boolean value indicating whether the processing indicator is currently rotating.
@property (nonatomic, readonly) BOOL isAnimating;
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
@property (nonatomic, readonly) Class _Nonnull nibLoadingClass;
/// Shows the processing indicator in the center of <code>view</code> and starts rotating.
/// \param view the container view in which the processing indicator is centered.
///
/// \param animated whether the processing indicator is shown with a fade animation. The default is <code>true</code>.
///
- (void)showInView:(UIView * _Nonnull)view animated:(BOOL)animated;
/// Dismisses the processing indicator and stops rotating.
/// \param animated whether the processing indicator is dismissed with a fade animation. The default is <code>true</code>.
///
- (void)dismissWithAnimated:(BOOL)animated;
@end


/// <code>FUINavigationBar</code> is a subclass of ‘UINavigationBar’ which applies the Fiori Design Language styling by default.
/// It exposes a <code>bannerView: FUIBannerMessageView</code> view property, which may be presented, using the <code>FUIBannerMessageView</code> <code>show()</code> method.  By default, the message is shown centered on screen for two seconds.
/// <h2>Usage</h2>
/// <h3>Configuration</h3>
/// Setup a <code>FUINavigationBar</code> in your navigation controller. You can set either in storyboard or programmatically.
/// <h3>Presenting <code>FUIBannerMessageView</code></h3>
/// \code
/// guard let navBar = self.navigationController?.navigationBar as? FUINavigationBar else {
///    return
/// }
///
/// navBar.bannerView?.show(message: "This is a test banner", withDuration: 1, animated: true)
///
/// \endcode
SWIFT_CLASS("_TtC8SAPFiori16FUINavigationBar")
@interface FUINavigationBar : UINavigationBar
/// The banner view sits underneath <code>FUINavigationBar</code>. Call <code>show()</code> to enable it.
@property (nonatomic, strong) FUIBannerMessageView * _Nullable bannerView;
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)prepareForInterfaceBuilder;
@end


@class UIStackView;

/// <code>FUIObjectCell</code> is an Interface-Builder-designable UI component that extends <code>UITableViewCell</code> for showing information of an object.  It contains a set of default content views which are common to Fiori Design Language Object Cell types, with the associated constraint implementations and handling for size classes.
/// <h2>Views Available in FUIObjectCell:</h2>
/// <ul>
///   <li>
///     <code>iconsStackView</code>:  an UIStackView view expected to contain a vertical stack of icons/images in its view content.  The view is added to the cell unless <code>cell.preserveIconStackSpacing</code> is set to <code>false</code>.  This is the first view in the cell and can be left to <code>detailImageView</code>.  Use <code>cell.iconImages</code> to add image(s) to the stack view.  Each icon/image size is set to be <code>16px</code> by <code>16px</code>.
///   </li>
///   <li>
///     <code>detailImageView</code>: a FUIImageView view added to the cell unless <code>cell.preserveDetailImageSpacing</code> is set to <code>false</code>.   The view is right to <code>iconsStackView</code> and left to <code>headlineLabel</code>.  The image is scaled to fit with fixed aspect.  The image size is set to <code>45px</code> by <code>45px</code>.  Use <code>cell.detailImage</code> to set image
///   </li>
///   <li>
///     <code>headlineLabel</code>: an UILabel view is always displayed and intended to display a heandline text in the cell.  Use `cell.headlineText” to set label text
///   </li>
///   <li>
///     <code>subheadlineLabel</code>: an UILabel view is added 3px below <code>headlineLabel</code> to the cell. Use `cell.subheadlineText” to set label text
///   </li>
///   <li>
///     <code>footnoteLabel</code>: an UILabel view is added 3px below <code>subheadLabel</code> to the cell. Use `cell.footnoteText” to set label text
///   </li>
///   <li>
///     <code>descriptionLabel</code>: an UILabel view tended to display a long text in the cell.  It gets displayed only in regular view.  The view is right to <code>headlineLabel</code> and left to <code>statusImageView</code>(or <code>statusLabel</code>).  Use `cell.descriptionText” to set label text
///   </li>
///   <li>
///     <code>statusImageView</code>/<code>statusLabel</code>: an UIImageView/UILabel added to the cell for status.  <code>statusImageView</code> gets added with size <code>16px</code> by <code>16px</code>.  The view is left to accessory view and right to <code>descriptionLabel</code>.  Use <code>cell.statusText</code> to set label text or <code>cell.statusImage</code> to set image.
///   </li>
///   <li>
///     <code>substatusImageView</code>/<code>substatusLabel</code>: an UIImageView/UILabel added to the cell under status.  <code>substatusImageView</code> gets added with size <code>16px</code> by <code>16px</code>.  Use <code>cell.substatusText</code> to set label text or <code>cell.substatusImage</code> to set image.  An error will be logged when <code>accessoryType</code> is not <code>.none</code> nor <code>.disclosureIndicator</code>, then setting a substatus label text or substatus image as this setting breaks Fiori Design Language pattern.
///   </li>
///   <li>
///     <code>accessoryView</code>:  an UIView added to the view when <code>cell.accessoryType</code> is not <code>.none</code>.  The view is an UIButton customized in FUIObjectCell and is aligned to the base-line of <code>headlineLabel</code> when the type is <code>.disclosureIndicator</code>.  For any other types, it’s vertically center-aligned and created by Apple native SDK.
///   </li>
/// </ul>
/// <h2>Example Initialization and Configuration:</h2>
/// \code
/// override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
///     let cell = tableView.dequeueReusableCell(withIdentifier: ObjectTableViewCell.reuseIdentifier, for: indexPath as IndexPath) as! ObjectTableViewCell
///     cell.detailImage = UIImage(named: "ProfilePic")
///     cell.headlineText = "Edgar Scissorhands"
///     cell.subheadlineText = "Lorem ipsum datil es iosin Lotios nsiqok"
///     cell.footnoteText = "Here is some footer text about Edward"
///     cell.statusImageView.image = UIImage(named: "ErrorIcon")
///     cell.substatusText = "Active"
///     cell.descriptionText = "This text is only visible when the cell is in regular horizontal size class."
///     cell.iconImages = [#imageLiteral(resourceName: "clock"), #imageLiteral(resourceName: "check"), #imageLiteral(resourceName: "attention")]
///     cell.accessoryType = .disclosureIndicator
///     return cell
/// }
///
/// \endcode
SWIFT_CLASS("_TtC8SAPFiori13FUIObjectCell")
@interface FUIObjectCell : NibDesignable
/// Reuse identifier
/// @return String a reuse identifier that describes FUIObjectCell
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull reuseIdentifier;)
+ (NSString * _Nonnull)reuseIdentifier SWIFT_WARN_UNUSED_RESULT;
/// Icons Stack view that contains a stack of icons/images in its contents.  Each icon/image size is set to be <code>16px</code> by <code>16px</code>.  Count of visible images is limited, to the count of active labels in the main stack
@property (nonatomic, readonly, strong) IBOutlet UIStackView * _Null_unspecified iconsStackView;
/// Detail image view that contains an image with size of 45px x 45px
@property (nonatomic, readonly, strong) IBOutlet FUIImageView * _Null_unspecified detailImageView;
/// A headline label in the main view with UIFontTextStyleHeadline style setting as the preferred font.  Use <code>headlineText</code> to set the label’s text value
@property (nonatomic, readonly, strong) IBOutlet FUILabel * _Null_unspecified headlineLabel;
/// A sub-header label in the main view with UIFontTextStyleBody style setting as the preferred font.  Use <code>subheadlineText</code> to set the label’s text value
@property (nonatomic, readonly, strong) IBOutlet FUILabel * _Null_unspecified subheadlineLabel;
/// A footnote label in the main view with UIFontTextStyleSubheadline style setting as the preferred font.  Use <code>footnoteText</code> to set the label’s text value
@property (nonatomic, readonly, strong) IBOutlet FUILabel * _Null_unspecified footnoteLabel;
/// A description label displayed in the description view when size class is .regular.  Use <code>descriptionText</code> to set the label’s text value
@property (nonatomic, readonly, strong) IBOutlet FUILabel * _Null_unspecified descriptionLabel;
/// A status label displayed in the status view.  Use <code>statusText</code> to set the label’s text value.  Status Label and status image can not co-exist in display.  When both are set, the last one set gets displayed only.
@property (nonatomic, readonly, strong) IBOutlet FUILabel * _Null_unspecified statusLabel;
/// A status image displayed in the status view.  Use <code>stuatsImage</code> to set an image.  It’s expected to either set <code>statusText</code> or <code>statusImage</code> to display either one as the same position.  When both <code>statusText</code> and <code>statusImage</code> are set, the last property set gets displayed only.
@property (nonatomic, readonly, strong) IBOutlet FUIImageView * _Null_unspecified statusImageView;
/// A substatus label displayed below <code>statusImageView</code> or <code>statusLabel</code>. Use <code>substatusLabel</code> to set the label’s text value.  It’s expected to either set <code>substatusText</code> or <code>substatusImage</code> to display either one as the same position.  When both <code>statusText</code> and <code>statusImage</code> are set, the last property set gets displayed only.  An error will be logged when <code>accessoryType</code> is not <code>.none</code> nor <code>.disclosureIndicator</code>, then setting a substatus label text or substatus image as this setting breaks Fiori Design Language pattern.
@property (nonatomic, readonly, strong) IBOutlet FUILabel * _Null_unspecified substatusLabel;
/// A substatus image displayed below <code>statusImageView</code> or <code>statusLabel</code>. Use <code>substatusImage</code> to set an image to the view.  It’s expected to either set <code>stubsatusText</code> or <code>substatusImage</code> to display either one as the same position.  When both <code>substatusText</code> and <code>substatusImage</code> are set, the last property set gets displayed only.  An error will be logged when <code>accessoryType</code> is not <code>.none</code> nor <code>.disclosureIndicator</code>, then setting a substatus label text or substatus image as this setting breaks Fiori Design Language pattern.
@property (nonatomic, readonly, strong) IBOutlet FUIImageView * _Null_unspecified substatusImageView;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
@property (nonatomic, readonly) Class _Nonnull nibLoadingClass;
/// Array of images, to be rendered in <code>iconStackView</code>.  Count of visible images is limited, to the count of active labels in the main stack.
@property (nonatomic, copy) NSArray<UIImage *> * _Nonnull iconImages;
/// Property to preserve <code>iconStackView</code> spacing.  When it’s set to <code>true</code>, spacing is preserved for <code>iconStackView</code> even when there’s no icons/images added to the icon stack
@property (nonatomic) BOOL preserveIconStackSpacing;
/// Property to set image of <code>DetailImageView</code>
@property (nonatomic, strong) UIImage * _Nullable detailImage;
/// Property to preserve <code>detailImageView</code> spacing.  When it’s set to true, spacing is preserved for <code>detailImageView</code> even when there’s no image added to the image view
@property (nonatomic) BOOL preserveDetailImageSpacing;
/// Text of <code>headlineLabel</code>
@property (nonatomic, copy) NSString * _Nullable headlineText;
/// Text of <code>subheadlineLabel</code>.  The label is initially hidden.  Setting a non-empty value would no longer hide the label.
@property (nonatomic, copy) NSString * _Nullable subheadlineText;
/// Text of <code>footnoteLabel</code>.  The label is initially hidden.  Setting a non-empty value would no longer hide the label.
@property (nonatomic, copy) NSString * _Nullable footnoteText;
/// Text of <code>descriptionLabel</code>.
@property (nonatomic, copy) NSString * _Nullable descriptionText;
/// Text of <code>statusLabel</code> .  An empty string value hides <code>statusLabel</code>.  It’s expected to either set <code>statusText</code> or <code>statusImage</code> to display either one as the same position.  When both <code>statusText</code> and <code>statusImage</code> are set, the last property set gets displayed only.
@property (nonatomic, copy) NSString * _Nullable statusText;
/// Image of status image view
@property (nonatomic, strong) UIImage * _Nullable statusImage;
/// Text of substatus label.
@property (nonatomic, copy) NSString * _Nullable substatusText;
/// Image of substatus image view.
@property (nonatomic, strong) UIImage * _Nullable substatusImage;
/// Default main stack right edge is set at midpoint of cell’s readable width, minus 8px. Set to fraction between 0.01 and 0.99, to move the right edge of the <code>mainStack</code>, relative to the cell readable width.
/// <blockquote>
/// Important:  the percentage of readable width includes area often containing other subviews.  So, a valid value is typically between 30% and 70%.
///
/// </blockquote>
/// Only used when <code>horizontalSizeClass</code> of the object cell is <code>.regular</code>.
@property (nonatomic) CGFloat splitPercent;
@property (nonatomic) CGFloat mainStackWidth;
/// :nodoc:
- (void)layoutSubviews;
/// :nodoc:
- (CGSize)systemLayoutSizeFittingSize:(CGSize)targetSize withHorizontalFittingPriority:(UILayoutPriority)horizontalFittingPriority verticalFittingPriority:(UILayoutPriority)verticalFittingPriority SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
@property (nonatomic, readonly) CGSize intrinsicContentSize;
/// :nodoc:
- (void)traitCollectionDidChange:(UITraitCollection * _Nullable)previousTraitCollection;
/// :nodoc:
- (void)didMoveToWindow;
/// :nodoc:
@property (nonatomic, copy) NSArray * _Nullable accessibilityElements;
/// :nodoc:
- (NSInteger)accessibilityElementCount SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (id _Nullable)accessibilityElementAtIndex:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (NSInteger)indexOfAccessibilityElement:(id _Nonnull)element SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
@property (nonatomic, readonly, strong) UIView * _Nonnull viewForFirstBaselineLayout;
/// :nodoc:
@property (nonatomic, readonly, strong) UIView * _Nonnull viewForLastBaselineLayout;
@end


/// <code>FUIObjectCollectionViewCell</code> is an Interface-Builder-designable UI component that extends <code>UICollectionViewCell</code> for showing information of an object.  It contains a set of default content views which are common to Fiori Design Language Object Cell types, with the associated constraint implementations and handling for size classes.
/// <h2>Views Available in FUIObjectCollectionViewCell:</h2>
/// <ul>
///   <li>
///     <code>iconsStackView</code>:  an UIStackView view expected to contain a vertical stack of icons/images in its view content.  The view is added to the cell unless <code>cell.preserveIconStackSpacing</code> is set to <code>false</code>.  This is the first view in the cell and can be left to <code>detailImageView</code>.  Use <code>cell.iconImages</code> to add image(s) to the stack view.  Each icon/image size is set to be <code>16px</code> by <code>16px</code>.
///   </li>
///   <li>
///     <code>detailImageView</code>: a FUIImageView view added to the cell unless <code>cell.preserveDetailImageSpacing</code> is set to <code>false</code>.   The view is right to <code>iconsStackView</code> and left to <code>headlineLabel</code>.  The image is scaled to fit with fixed aspect.  The image size is set to <code>45px</code> by <code>45px</code>.  Use <code>cell.detailImage</code> to set image
///   </li>
///   <li>
///     <code>headlineLabel</code>: an UILabel view is always displayed and intended to display a heandline text in the cell.  Use <code>cell.headlineText</code> to set label text
///   </li>
///   <li>
///     <code>subheadlineLabel</code>: an UILabel view is added 3px below <code>headlineLabel</code> to the cell. Use `cell.subheadlineText” to set label text
///   </li>
///   <li>
///     <code>footnoteLabel</code>: an UILabel view is added 3px below <code>subheadLabel</code> to the cell. Use `cell.footnoteText” to set label text
///   </li>
///   <li>
///     <code>statusImageView</code>/<code>statusLabel</code>: an UIImageView/UILabel added to the cell for status.  <code>statusImageView</code> gets added with size <code>16px</code> by <code>16px</code>.  The view is left to accessory view and right to <code>descriptionLabel</code>.  Use <code>cell.statusText</code> to set label text or <code>cell.statusImage</code> to set image.
///   </li>
///   <li>
///     <code>substatusImageView</code>/<code>substatusLabel</code>: an UIImageView/UILabel added to the cell under status.  <code>substatusImageView</code> gets added with size <code>16px</code> by <code>16px</code>.  Use <code>cell.substatusText</code> to set label text or <code>cell.substatusImage</code> to set image.  An error will be logged when <code>accessoryType</code> is not <code>.none</code> nor <code>.disclosureIndicator</code>, then setting a substatus label text or substatus image as this setting breaks Fiori Design Language pattern.
///   </li>
///   <li>
///     <code>accessoryView</code>:  an UIView added to the view when <code>cell.accessoryType</code> is not <code>.none</code>.  The view is an UIButton customized in FUIObjectCell and is aligned to the base-line of <code>headlineLabel</code> when the type is <code>.disclosureIndicator</code>.  For any other types, it’s vertically center-aligned and created by Apple native SDK.
///   </li>
/// </ul>
/// <h2>Example Initialization and Configuration:</h2>
/// \code
/// public func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
/// let cell = collectionView.dequeueReusableCell(withReuseIdentifier: FUIObjectCollectionViewCell.reuseIdentifier, for: indexPath) as! FUIObjectCollectionViewCell
/// cell.headlineText = "Issues: \(issues[indexPath.row])"
/// cell.subheadlineText = "Available on Jan 31st"
/// cell.footnoteText = "Delivered by San Ramon team, from the new Office Space"
/// cell.statusText = "Available"
/// cell.substatusImage = #imageLiteral(resourceName: "ErrorIcon")
/// cell.substatusImageView.tintColor = UIColor.preferredFioriColor(forStyle: .negative)
/// return cell
/// }
///
/// \endcode
SWIFT_CLASS("_TtC8SAPFiori27FUIObjectCollectionViewCell")
@interface FUIObjectCollectionViewCell : FUIBaseCollectionViewCell
/// Reuse identifier
/// @return String a reuse identifier that describes ObjectTableViewCell
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull reuseIdentifier;)
+ (NSString * _Nonnull)reuseIdentifier SWIFT_WARN_UNUSED_RESULT;
/// Icons Stack view that contains a stack of icons/images in its contents.  Each icon/image size is set to be <code>16px</code> by <code>16px</code>.  Count of visible images is limited, to the count of active labels in the main stack
@property (nonatomic, readonly, strong) UIStackView * _Nonnull iconsStackView;
/// Detail image view that contains an image with size of 45px x 45px
@property (nonatomic, readonly, strong) FUIImageView * _Nonnull detailImageView;
/// A headline label in the main view with UIFontTextStyleHeadline style setting as the preferred font.  Use <code>headlineText</code> to set the label’s text value
@property (nonatomic, readonly, strong) FUILabel * _Nonnull headlineLabel;
/// A sub-header label in the main view with UIFontTextStyleBody style setting as the preferred font.  Use <code>subheadlineText</code> to set the label’s text value
@property (nonatomic, readonly, strong) FUILabel * _Nonnull subheadlineLabel;
/// A footnote label in the main view with UIFontTextStyleSubheadline style setting as the preferred font.  Use <code>footnoteText</code> to set the label’s text value
@property (nonatomic, readonly, strong) FUILabel * _Nonnull footnoteLabel;
/// A status label displayed in the status view.  Use <code>statusText</code> to set the label’s text value.  Status Label and status image can not co-exist in display.  When both are set, the last one set gets displayed only.
@property (nonatomic, readonly, strong) FUILabel * _Nonnull statusLabel;
/// A status image displayed in the status view.  Use <code>stuatsImage</code> to set an image.  It’s expected to either set <code>statusText</code> or <code>statusImage</code> to display either one as the same position.  When both <code>statusText</code> and <code>statusImage</code> are set, the last property set gets displayed only.
@property (nonatomic, readonly, strong) FUIImageView * _Nonnull statusImageView;
/// A substatus label displayed below <code>statusImageView</code> or <code>statusLabel</code>. Use <code>substatusLabel</code> to set the label’s text value.  It’s expected to either set <code>substatusText</code> or <code>substatusImage</code> to display either one as the same position.  When both <code>statusText</code> and <code>statusImage</code> are set, the last property set gets displayed only.  When <code>accessoryType</code> is not <code>.none</code> nor <code>.disclosureIndicator</code>, setting substatus label text throws an assertion failure as this setting breaks Fiori Design Language pattern.
@property (nonatomic, readonly, strong) FUILabel * _Nonnull substatusLabel;
/// A substatus image displayed below <code>statusImageView</code> or <code>statusLabel</code>. Use <code>substatusImage</code> to set an image to the view.  It’s expected to either set <code>stubsatusText</code> or <code>substatusImage</code> to display either one as the same position.  When both <code>substatusText</code> and <code>substatusImage</code> are set, the last property set gets displayed only.  When <code>accessoryType</code> is not <code>.none</code> nor <code>.disclosureIndicator</code>, setting a substatus image throws an assertion failure as this setting breaks Fiori Design Language pattern.
@property (nonatomic, readonly, strong) FUIImageView * _Nonnull substatusImageView;
/// Text of <code>headlineLabel</code>
@property (nonatomic, copy) NSString * _Nullable headlineText;
/// Text of <code>subheadlineLabel</code>.  The label is initially hidden.  Setting a non-empty value would no longer hide the label.
@property (nonatomic, copy) NSString * _Nullable subheadlineText;
/// Text of <code>footnoteLabel</code>.  The label is initially hidden.  Setting a non-empty value would no longer hide the label.
@property (nonatomic, copy) NSString * _Nullable footnoteText;
/// Array of images, to be rendered in <code>iconStackView</code>.  Count of visible images is limited, to the count of active labels in the main stack.
@property (nonatomic, copy) NSArray<UIImage *> * _Nonnull iconImages;
/// Property to set image of <code>DetailImageView</code>
@property (nonatomic, strong) UIImage * _Nullable detailImage;
/// Property to preserve <code>iconStackView</code> spacing.  When it’s set to <code>true</code>, spacing is preserved for <code>iconStackView</code> even when there’s no icons/images added to the icon stack
@property (nonatomic) BOOL preserveIconStackSpacing;
/// Property to preserve <code>detailImageView</code> spacing.  When it’s set to true, spacing is preserved for <code>detailImageView</code> even when there’s no image added to the image view
@property (nonatomic) BOOL preserveDetailImageSpacing;
/// Text of <code>statusLabel</code>.  An empty string value hides <code>statusLabel</code>.  It’s expected to either set <code>statusText</code> or <code>statusImage</code> to display either one as the same position.  When both <code>statusText</code> and <code>statusImage</code> are set, the last property set gets displayed only.
@property (nonatomic, copy) NSString * _Nullable statusText;
/// Image of status image view
@property (nonatomic, strong) UIImage * _Nullable statusImage;
/// Text of substatus label.
@property (nonatomic, copy) NSString * _Nullable substatusText;
/// Image of substatus image view.
@property (nonatomic, strong) UIImage * _Nullable substatusImage;
/// Default main stack right edge is set at midpoint of cell’s readable width, minus 8px. Set to fraction between 0.01 and 0.99, to move the right edge of the <code>mainStack</code>, relative to the cell readable width.
/// <blockquote>
/// Important:  the percentage of readable width includes area often containing other subviews.  So, a valid value is typically between 30% and 70%.
///
/// </blockquote>
/// Only used when <code>horizontalSizeClass</code> of the object cell is <code>.regular</code>.
@property (nonatomic) CGFloat splitPercent;
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)prepareForReuse;
/// :nodoc:
- (void)layoutSubviews;
/// :nodoc:
- (CGSize)systemLayoutSizeFittingSize:(CGSize)targetSize withHorizontalFittingPriority:(UILayoutPriority)horizontalFittingPriority verticalFittingPriority:(UILayoutPriority)verticalFittingPriority SWIFT_WARN_UNUSED_RESULT;
@end

@class FUITag;

/// <code>FUIObjectHeader</code> extends <code>UIView</code> for showing information of an object header.  It contains a set of default content views which are common to Fiori Design Language Object Cell types, with the associated constraint implementations and handling for size classes.
/// <h2>Regular (Landscape) Horizontal Size Class: Anatomy & Variations</h2>
/// <img src="../ReadmeImages/OH_RegularAnatomy.png?raw=true" alt="FUIObjectHeader"\>
/// <img src="../ReadmeImages/OH_RegularStandard.png?raw=true" alt="FUIObjectHeader"\>
/// <img src="../ReadmeImages/OH_RegularVarOne.png?raw=true" alt="FUIObjectHeader"\>
/// <img src="../ReadmeImages/OH_RegularVarTwo.png?raw=true" alt="FUIObjectHeader"\>
/// <img src="../ReadmeImages/OH_RegularVarThree.png?raw=true" alt="FUIObjectHeader"\>
/// <h2>Compact (Portrait) Horizontal Size Class: Anatomy & Variations</h2>
/// <img src="../ReadmeImages/OH_CompactAnatomy.png?raw=true" alt="FUIObjectHeader"\>
/// <img src="../ReadmeImages/OH_CompactStandard.png?raw=true" alt="FUIObjectHeader"\>
/// <img src="../ReadmeImages/OH_CompactVarOne.png?raw=true" alt="FUIObjectHeader"\>
/// <h2>Views Available in FUIObjectHeader:</h2>
/// <ul>
///   <li>
///     <code>detailImageView</code>: a UIImageView view added to the view. The image size is set to <code>45px</code> by <code>45px</code> in compact mode and <code>70px</code> by <code>70px</code> in regular mode.  Use <code>detailImage</code> to set image
///   </li>
///   <li>
///     <code>headlineLabel</code>: an UILabel view is always displayed and intended to display a heandline text in the view.  Use <code>headlineText</code> to set label text
///   </li>
///   <li>
///     <code>subheadlineLabel</code>: an UILabel view is added 4px below <code>headlineLabel</code> to the view. Use <code>subheadlineText</code> to set label text
///   </li>
///   <li>
///     <code>tags</code>: a list of tag labels is a part of <code>AdditionalInfoView</code> added <code>16px</code> below <code>subheadlineLabel</code>.  The view displays no more than 3 tags on screen.
///   </li>
///   <li>
///     <code>bodyLabel</code>: an UILabel view is a part of <code>AdditionalInfoView</code> added 6px below <code>tags</code> to the view. Use <code>bodyText</code> to set label text
///   </li>
///   <li>
///     <code>footnoteLabel</code>: an UILabel view is a part of <code>AdditionalInfoView</code> added 3px below <code>bodyLabel</code> to the view. Use <code>footnoteText</code> to set label text
///   </li>
///   <li>
///     <code>descriptionLabel</code>: an UILabel view tended to display a long text in the view.  It always gets displayed in compact view.  If <code>detailContentView</code> and <code>AdditionalInfoView</code> are set, regular view does not show <code>descriptionLabel</code>.  In compact view, if <code>AdditionalInfoView</code> is not set, the label is displayed below <code>headlineLabel</code> and <code>subheadlineLabel</code> on page1 of the scroll view; otherwise, if  <code>DetailContentView</code> is not set, the label is placed to page2 of the scroll view.  When both <code>AdditionalInfoView</code> and <code>DetailContentView</code> are set, the label would be placed to page3 of the scroll view.  Use <code>descriptionText</code> to set label text
///   </li>
///   <li>
///     <code>statusImageView</code>/<code>statusLabel</code>: an UIImageView/UILabel added to the view for status.  <code>statusImageView</code> gets added with size <code>16px</code> by <code>16px</code>.  The view is right to <code>headlineLabel</code> in compact mode and right to <code>DetailContentView</code> in regular mode.  Use <code>cstatusText</code> to set label text or <code>statusImage</code> to set image.
///   </li>
///   <li>
///     <code>substatusImageView</code>/<code>substatusLabel</code>: an UIImageView/UILabel added to the view under status.  <code>substatusImageView</code> gets added with size <code>16px</code> by <code>16px</code>.  Use <code>substatusText</code> to set label text or <code>substatusImage</code> to set image.
///   </li>
///   <li>
///     <code>detailContentView</code>:  an UIView added to the view in page2 in compact view and right to <code>headlineLabel</code> in regular mode.
///   </li>
/// </ul>
/// <h2>Example Initialization and Configuration:</h2>
/// In table view controller’s <code>viewDidLoad</code> function:
/// \code
///
/// //Programmatically add an Object header to tableview
/// //let objectHeader = FUIObjectHeader() //View height is content driven by default.
/// //     //Or if developer wants to explictely set the height, set `isAutoResizingHeight` to false
/// //     //let objectHeader = FUIObjectHeader(frame: CGRect(x: 0, y: 0, width: self.tableView.frame.size.width, height: 200))
/// //     //objectHeader.isAutoResizingHeight = false
/// //Assign objectHeader to tableView's tableHeaderView
/// //self.tableView.tableHeaderView = objectHeader
///
/// //If FUIObjectHeader is added to the tableview in the storyboard
/// let objectHeader = self.tableView.tableHeaderView as! FUIObjectHeader
/// objectHeader.detailImageView.image = #imageLiteral(resourceName: "ProfilePic")
///
/// objectHeader.headlineLabel.text = "Inspect Electric Pump Motor Long Job Title Example Will Wrap Max# of Lines in the HeadlineLabel"
/// objectHeader.subheadlineLabel.text = "Job 819701."
/// objectHeader.tags = [FUITag(title: "Started"), FUITag(title: "PM01"), FUITag(title: "103-Repair")]
/// objectHeader.bodyLabel.text = "1000-Hamburg, MECHANIK."
/// objectHeader.footnoteLabel.text = "Due on 12/31/16."
/// objectHeader.descriptionLabel.text = "Temperature sensor predicts overheating failure in 4 days Urgent and needs attentions.  Temperature sensor predicts overheating failure in 4 days Urgent and needs attentions."
///
/// objectHeader.statusLabel.text = "High"
/// objectHeader.substatusImageView.image = #imageLiteral(resourceName: "ErrorIcon")
///
/// // create a custom `UIView`-subclassing instance, to set to `detailContentView` property.
/// let myAnalytics = AnalyticHeaderDetailView()
/// myAnalytics.chartImageView.image = #imageLiteral(resourceName: "hogwarts")
/// objectHeader.detailContentView = myAnalytics
///
///
/// \endcode<h2>Note:</h2>
/// <code>FUIObjectHeader</code> added to <code>UITableView</code> as tableHeaderView is compatible with <code>UIRefreshControl</code> added to the same table view.  Just note that if an <code>UIRefreshControl</code> object is set after adding an <code>FUIObjectHeader</code> object as tableHeaderView, the <code>UIRefreshControl</code> object must be moved to the front in the table view; otherwise, the <code>UIRefreshControl</code> object wouldn’t be visible.
/// <ul>
///   <li>
///     When <code>FUIObjectHeader</code> is added to a table view in a storyboard and <code>UIRefreshControl</code> is added later in a table view controller class’ <code>viewDidLoad</code> function, bring the refreshControl to the front:
///   </li>
/// </ul>
/// \code
///
/// self.refreshControl = UIRefreshControl()
/// self.refreshControl?.addTarget(self, action: #selector(refreshTriggered), for: .valueChanged)
/// self.refreshControl?.tintColor = UIColor.white
/// //bring refresh control to the front to make it visible
/// self.tableView.bringSubview(toFront: self.refreshControl!)
///
///
/// \endcode<ul>
///   <li>
///     When both <code>FUIObjectHeader</code> and <code>UIRefreshControl</code> are added programmatically in a table view controller class, table view needs to bring the refreshControl to the front only if <code>FUIObjectHeader</code> is added first:
///   </li>
/// </ul>
/// \code
///
/// //set objectHeader to tableHeaderView first
/// self.tableView.tableHeaderView = objectHeader
/// //set a refresh control next
/// self.refreshControl = UIRefreshControl()
/// self.refreshControl?.addTarget(self, action: #selector(refreshTriggered), for: .valueChanged)
/// self.refreshControl?.tintColor = UIColor.white
/// //bring refresh control to the front to make it visible
/// self.tableView.bringSubview(toFront: self.refreshControl!)
///
///
/// \endcode<ul>
///   <li>
///     When both <code>FUIObjectHeader</code> and <code>UIRefreshControl</code> are added programmatically in the table view controller class, table view does not need to explicitly bring the refreshControl to the front if refreshControl is added first:
///   </li>
/// </ul>
/// \code
///
/// //set a refresh control first
/// self.refreshControl = UIRefreshControl()
/// self.refreshControl?.addTarget(self, action: #selector(refreshTriggered), for: .valueChanged)
/// self.refreshControl?.tintColor = UIColor.white
/// //no need to explicitly bring refresh control to the front to make it visible
/// //self.tableView.bringSubview(toFront: self.refreshControl!)
///
/// //set objectHeader to tableHeaderView next
/// self.tableView.tableHeaderView = objectHeader
///
///
/// \endcode
SWIFT_CLASS("_TtC8SAPFiori15FUIObjectHeader")
@interface FUIObjectHeader : NibDesignable <UIScrollViewDelegate>
/// Detail image view that contains an image with size of 45px x 45px in compact mode or 70px x 70px in regular mode
@property (nonatomic, readonly, weak) IBOutlet FUIImageView * _Null_unspecified detailImageView;
/// A headline label in the object name and title view.  Use <code>headlineText</code> to set the label’s text value
@property (nonatomic, readonly, weak) IBOutlet FUILabel * _Null_unspecified headlineLabel;
/// A sub-headline label in the object name and title view.  Use <code>subheadlineText</code> to set the label’s text value
@property (nonatomic, readonly, weak) IBOutlet FUILabel * _Null_unspecified subheadlineLabel;
/// A body label in the additional info view.  Use <code>bodyText</code> to set the label’s text value
@property (nonatomic, readonly, weak) IBOutlet FUILabel * _Null_unspecified bodyLabel;
/// A footnote label in the additional info view.  Use <code>footnoteText</code> to set the label’s text value
@property (nonatomic, readonly, weak) IBOutlet FUILabel * _Null_unspecified footnoteLabel;
/// A description label displayed in the description view.  Use <code>descriptionText</code> to set the label’s text value
@property (nonatomic, readonly, weak) IBOutlet FUILabel * _Null_unspecified descriptionLabel;
/// Master view of FUIObjectHeader
@property (nonatomic, readonly, weak) IBOutlet UIView * _Null_unspecified masterView;
/// A status label displayed in the status view.  Use <code>statusText</code> to set the label’s text value.  Status Label and status image can not co-exist in display.  When both are set, the last one set gets displayed only.
@property (nonatomic, readonly, strong) FUILabel * _Nonnull statusLabel;
/// A substatus label displayed below <code>statusImageView</code> or <code>statusLabel</code>. Use <code>substatusLabel</code> to set the label’s text value.  It’s expected to either set <code>substatusText</code> or <code>substatusImage</code> to display either one as the same position.  When both <code>statusText</code> and <code>statusImage</code> are set, the last property set gets displayed only.
@property (nonatomic, readonly, strong) FUILabel * _Nonnull substatusLabel;
/// A status image displayed in the status view.  Use <code>stuatsImage</code> to set an image.  It’s expected to either set <code>statusText</code> or <code>statusImage</code> to display either one as the same position.  When both <code>statusText</code> and <code>statusImage</code> are set, the last property set gets displayed only.
@property (nonatomic, readonly, strong) UIImageView * _Nonnull statusImageView;
/// A substatus image displayed below <code>statusImageView</code> or <code>statusLabel</code>. Use <code>substatusImage</code> to set an image to the view.  It’s expected to either set <code>stubsatusText</code> or <code>substatusImage</code> to display either one as the same position.  When both <code>substatusText</code> and <code>substatusImage</code> are set, the last property set gets displayed only.
@property (nonatomic, readonly, strong) UIImageView * _Nonnull substatusImageView;
/// A UIView label in the detail view displayed as page2 in the scroll view for compact mode or right to <code>headlineLabel</code> for regular mode.
@property (nonatomic, strong) UIView * _Null_unspecified detailContentView;
/// A list of tags displayed in the tags view. No more than three (3) tags will be displayed
@property (nonatomic, copy) NSArray<FUITag *> * _Nonnull tags;
/// Default main stack right edge is set at midpoint of cell’s readable width, minus 8px. Set to fraction between 0.01 and 0.99, to move the right edge of the <code>mainStack</code>, relative to the cell readable width.
/// <blockquote>
/// Important:  the percentage of readable width includes area often containing other subviews.  So, a valid value is typically between 30% and 70%.
///
/// </blockquote>
/// Only used when <code>horizontalSizeClass</code> of the object cell is <code>.regular</code>.
@property (nonatomic) CGFloat splitPercent;
/// A flag to automatically set <code>FUIObjectHeader</code> view height based on view content.   Set <code>true</code> to allow content-driven height resizing; otherwise, setting <code>false</code> allows caller to explictely set the height.
@property (nonatomic) BOOL isAutoResizingHeight;
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)awakeFromNib;
/// :nodoc:
@property (nonatomic, readonly) Class _Nonnull nibLoadingClass;
/// Property to set image of <code>DetailImageView</code>
@property (nonatomic, strong) UIImage * _Nullable detailImage;
/// Text of <code>headlineLabel</code>
@property (nonatomic, copy) NSString * _Nullable headlineText;
/// Text of <code>subheadlineLabel</code>
@property (nonatomic, copy) NSString * _Nullable subheadlineText;
/// Text of <code>bodyLabel</code>
@property (nonatomic, copy) NSString * _Nullable bodyText;
/// Text of <code>footnoteText</code>
@property (nonatomic, copy) NSString * _Nullable footnoteText;
/// Text of <code>statusLabel</code>
@property (nonatomic, copy) NSString * _Nullable statusText;
/// Image of <code>statusImageView</code>
@property (nonatomic, strong) UIImage * _Nullable statusImage;
/// Text of <code>substatusLabel</code>
@property (nonatomic, copy) NSString * _Nullable substatusText;
/// Image of <code>substatusImageView</code>
@property (nonatomic, strong) UIImage * _Nullable substatusImage;
/// Text of <code>descriptionLabel</code>
@property (nonatomic, copy) NSString * _Nullable descriptionText;
/// :nodoc:
- (void)didMoveToSuperview;
/// :nodoc:
- (void)traitCollectionDidChange:(UITraitCollection * _Nullable)previousTraitCollection;
/// :nodoc:
- (void)layoutSubviews;
/// :nodoc:
- (void)scrollViewDidEndDecelerating:(UIScrollView * _Nonnull)scrollView;
/// :nodoc:
@property (nonatomic, copy) NSArray * _Nullable accessibilityElements;
/// :nodoc:
- (NSInteger)accessibilityElementCount SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (id _Nullable)accessibilityElementAtIndex:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (NSInteger)indexOfAccessibilityElement:(id _Nonnull)element SWIFT_WARN_UNUSED_RESULT;
@end


/// <code>FUIObjectTableViewCell</code> is an Interface-Builder-designable UI component that extends <code>UITableViewCell</code> for showing information of an object.  It contains a set of default content views which are common to Fiori Design Language Object Cell types, with the associated constraint implementations and handling for size classes.
/// <img src="../ReadmeImages/ObjectCellAnnotations.png?raw=true" alt="FUIObjectTableViewCell"\>
/// <h2>Views Available in FUIObjectTableViewCell:</h2>
/// <ul>
///   <li>
///     <code>iconsStackView</code>:  an UIStackView view expected to contain a vertical stack of icons/images in its view content.  The view is added to the cell unless <code>cell.preserveIconStackSpacing</code> is set to <code>false</code>.  This is the first view in the cell and can be left to <code>detailImageView</code>.  Use <code>cell.iconImages</code> to add image(s) to the stack view.  Each icon/image size is set to be <code>16px</code> by <code>16px</code>.
///   </li>
///   <li>
///     <code>detailImageView</code>: a FUIImageView view added to the cell unless <code>cell.preserveDetailImageSpacing</code> is set to <code>false</code>.   The view is right to <code>iconsStackView</code> and left to <code>headlineLabel</code>.  The image is scaled to fit with fixed aspect.  The image size is set to <code>45px</code> by <code>45px</code>.  Use <code>cell.detailImage</code> to set image
///   </li>
///   <li>
///     <code>headlineLabel</code>: an UILabel view is always displayed and intended to display a heandline text in the cell.  Use <code>cell.headlineText</code> to set label text
///   </li>
///   <li>
///     <code>subheadlineLabel</code>: an UILabel view is added 3px below <code>headlineLabel</code> to the cell. Use `cell.subheadlineText” to set label text
///   </li>
///   <li>
///     <code>footnoteLabel</code>: an UILabel view is added 3px below <code>subheadLabel</code> to the cell. Use `cell.footnoteText” to set label text
///   </li>
///   <li>
///     <code>descriptionLabel</code>: an UILabel view tended to display a long text in the cell.  It gets displayed only in regular view.  The view is right to <code>headlineLabel</code> and left to <code>statusImageView</code>(or <code>statusLabel</code>).  Use `cell.descriptionText” to set label text
///   </li>
///   <li>
///     <code>statusImageView</code>/<code>statusLabel</code>: an UIImageView/UILabel added to the cell for status.  <code>statusImageView</code> gets added with size <code>16px</code> by <code>16px</code>.  The view is left to accessory view and right to <code>descriptionLabel</code>.  Use <code>cell.statusText</code> to set label text or <code>cell.statusImage</code> to set image.
///   </li>
///   <li>
///     <code>substatusImageView</code>/<code>substatusLabel</code>: an UIImageView/UILabel added to the cell under status.  <code>substatusImageView</code> gets added with size <code>16px</code> by <code>16px</code>.  Use <code>cell.substatusText</code> to set label text or <code>cell.substatusImage</code> to set image.  An error will be logged when <code>accessoryType</code> is not <code>.none</code> nor <code>.disclosureIndicator</code>, then setting a substatus label text or substatus image as this setting breaks Fiori Design Language pattern.
///   </li>
///   <li>
///     <code>accessoryView</code>:  an UIView added to the view when <code>cell.accessoryType</code> is not <code>.none</code>.  The view is an UIButton customized in FUIObjectCell and is aligned to the base-line of <code>headlineLabel</code> when the type is <code>.disclosureIndicator</code>.  For any other types, it’s vertically center-aligned and created by Apple native SDK.
///   </li>
/// </ul>
/// <h2>Example Initialization and Configuration:</h2>
/// \code
/// override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
/// let cell = tableView.dequeueReusableCell(withIdentifier: FUIObjectTableViewCell.reuseIdentifier, for: indexPath as IndexPath) as! FUIObjectTableViewCell
/// cell.detailImage = UIImage(named: "ProfilePic")
/// cell.headlineText = "Edgar Scissorhands"
/// cell.subheadlineText = "Lorem ipsum datil es iosin Lotios nsiqok"
/// cell.footnoteText = "Here is some footer text about Edward"
/// cell.statusImageView.image = UIImage(named: "ErrorIcon")
/// cell.substatusText = "Active"
/// cell.descriptionText = "This text is only visible when the cell is in regular horizontal size class."
/// cell.iconImages = [#imageLiteral(resourceName: "clock"), #imageLiteral(resourceName: "check"), #imageLiteral(resourceName: "attention")]
/// cell.accessoryType = .disclosureIndicator
/// return cell
/// }
///
/// \endcode
SWIFT_CLASS("_TtC8SAPFiori22FUIObjectTableViewCell")
@interface FUIObjectTableViewCell : NibDesignableFUIBaseTableViewCell
/// Reuse identifier
/// @return String a reuse identifier that describes FUIObjectTableViewCell
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull reuseIdentifier;)
+ (NSString * _Nonnull)reuseIdentifier SWIFT_WARN_UNUSED_RESULT;
/// Icons Stack view that contains a stack of icons/images in its contents.  Each icon/image size is set to be <code>16px</code> by <code>16px</code>.  Count of visible images is limited, to the count of active labels in the main stack
@property (nonatomic, readonly, strong) UIStackView * _Nonnull iconsStackView;
/// Detail image view that contains an image with size of 45px x 45px
@property (nonatomic, readonly, strong) FUIImageView * _Nonnull detailImageView;
/// A headline label in the main view with UIFontTextStyleHeadline style setting as the preferred font.  Use <code>headlineText</code> to set the label’s text value
@property (nonatomic, readonly, strong) FUILabel * _Nonnull headlineLabel;
/// A sub-header label in the main view with UIFontTextStyleBody style setting as the preferred font.  Use <code>subheadlineText</code> to set the label’s text value
@property (nonatomic, readonly, strong) FUILabel * _Nonnull subheadlineLabel;
/// A footnote label in the main view with UIFontTextStyleSubheadline style setting as the preferred font.  Use <code>footnoteText</code> to set the label’s text value
@property (nonatomic, readonly, strong) FUILabel * _Nonnull footnoteLabel;
/// A description label displayed in the description view when size class is .regular.  Use <code>descriptionText</code> to set the label’s text value
@property (nonatomic, readonly, strong) FUILabel * _Nonnull descriptionLabel;
/// A status label displayed in the status view.  Use <code>statusText</code> to set the label’s text value.  Status Label and status image can not co-exist in display.  When both are set, the last one set gets displayed only.
@property (nonatomic, readonly, strong) FUILabel * _Nonnull statusLabel;
/// A status image displayed in the status view.  Use <code>stuatsImage</code> to set an image.  It’s expected to either set <code>statusText</code> or <code>statusImage</code> to display either one as the same position.  When both <code>statusText</code> and <code>statusImage</code> are set, the last property set gets displayed only.
@property (nonatomic, readonly, strong) FUIImageView * _Nonnull statusImageView;
/// A substatus label displayed below <code>statusImageView</code> or <code>statusLabel</code>. Use <code>substatusLabel</code> to set the label’s text value.  It’s expected to either set <code>substatusText</code> or <code>substatusImage</code> to display either one as the same position.  When both <code>statusText</code> and <code>statusImage</code> are set, the last property set gets displayed only.  When <code>accessoryType</code> is not <code>.none</code> nor <code>.disclosureIndicator</code>, setting substatus label text throws an assertion failure as this setting breaks Fiori Design Language pattern.
@property (nonatomic, readonly, strong) FUILabel * _Nonnull substatusLabel;
/// A substatus image displayed below <code>statusImageView</code> or <code>statusLabel</code>. Use <code>substatusImage</code> to set an image to the view.  It’s expected to either set <code>stubsatusText</code> or <code>substatusImage</code> to display either one as the same position.  When both <code>substatusText</code> and <code>substatusImage</code> are set, the last property set gets displayed only.  When <code>accessoryType</code> is not <code>.none</code> nor <code>.disclosureIndicator</code>, setting a substatus image throws an assertion failure as this setting breaks Fiori Design Language pattern.
@property (nonatomic, readonly, strong) FUIImageView * _Nonnull substatusImageView;
/// Text of <code>headlineLabel</code>
@property (nonatomic, copy) NSString * _Nullable headlineText;
/// Text of <code>subheadlineLabel</code>.  The label is initially hidden.  Setting a non-empty value would no longer hide the label.
@property (nonatomic, copy) NSString * _Nullable subheadlineText;
/// Text of <code>footnoteLabel</code>.  The label is initially hidden.  Setting a non-empty value would no longer hide the label.
@property (nonatomic, copy) NSString * _Nullable footnoteText;
/// Text of <code>descriptionLabel</code>.
@property (nonatomic, copy) NSString * _Nullable descriptionText;
/// Array of images, to be rendered in <code>iconStackView</code>.  Count of visible images is limited, to the count of active labels in the main stack.
@property (nonatomic, copy) NSArray<UIImage *> * _Nonnull iconImages;
/// Property to set image of <code>DetailImageView</code>
@property (nonatomic, strong) UIImage * _Nullable detailImage;
/// Property to preserve <code>iconStackView</code> spacing.  When it’s set to <code>true</code>, spacing is preserved for <code>iconStackView</code> even when there’s no icons/images added to the icon stack
@property (nonatomic) BOOL preserveIconStackSpacing;
/// Property to preserve <code>detailImageView</code> spacing.  When it’s set to true, spacing is preserved for <code>detailImageView</code> even when there’s no image added to the image view
@property (nonatomic) BOOL preserveDetailImageSpacing;
/// Text of <code>statusLabel</code>.  An empty string value hides <code>statusLabel</code>.  It’s expected to either set <code>statusText</code> or <code>statusImage</code> to display either one as the same position.  When both <code>statusText</code> and <code>statusImage</code> are set, the last property set gets displayed only.
@property (nonatomic, copy) NSString * _Nullable statusText;
/// Image of status image view
@property (nonatomic, strong) UIImage * _Nullable statusImage;
/// Text of substatus label.
@property (nonatomic, copy) NSString * _Nullable substatusText;
/// Image of substatus image view.
@property (nonatomic, strong) UIImage * _Nullable substatusImage;
/// Type of the accessory view
@property (nonatomic) UITableViewCellAccessoryType accessoryType;
/// :nodoc:
@property (nonatomic, strong) UIView * _Nullable accessoryView;
/// Default main stack right edge is set at midpoint of cell’s readable width, minus 8px. Set to fraction between 0.01 and 0.99, to move the right edge of the <code>mainStack</code>, relative to the cell readable width.
/// <blockquote>
/// Important:  the percentage of readable width includes area often containing other subviews.  So, a valid value is typically between 30% and 70%.
///
/// </blockquote>
/// Only used when <code>horizontalSizeClass</code> of the object cell is <code>.regular</code>.
@property (nonatomic) CGFloat splitPercent;
/// :nodoc:
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)layoutMarginsDidChange;
/// :nodoc:
- (void)setEditing:(BOOL)editing animated:(BOOL)animated;
/// :nodoc:
- (void)willTransitionToState:(UITableViewCellStateMask)state;
/// :nodoc:
- (void)prepareForReuse;
/// :nodoc:
- (void)setHighlighted:(BOOL)highlighted animated:(BOOL)animated;
/// :nodoc:
- (void)setSelected:(BOOL)selected animated:(BOOL)animated;
/// :nodoc:
- (CGSize)systemLayoutSizeFittingSize:(CGSize)targetSize withHorizontalFittingPriority:(UILayoutPriority)horizontalFittingPriority verticalFittingPriority:(UILayoutPriority)verticalFittingPriority SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)layoutSubviews;
/// :nodoc:
@property (nonatomic, readonly, strong) UIView * _Nonnull viewForFirstBaselineLayout;
/// :nodoc:
@property (nonatomic, readonly, strong) UIView * _Nonnull viewForLastBaselineLayout;
/// :nodoc:
@property (nonatomic, readonly) Class _Nonnull nibLoadingClass;
@end


/// Subclass of <code>FUIButton</code>, which fixes the issue in setting button width and height in supporting label text wrapping
SWIFT_CLASS("_TtC8SAPFiori19FUIOnboardingButton")
@interface FUIOnboardingButton : FUIButton
/// Allow content-driven resizing.  Default is false.
@property (nonatomic) BOOL isUsingIntrinsicContentSize;
/// :nodoc:
@property (nonatomic, readonly) CGSize intrinsicContentSize;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class FUIWelcomeScreen;

/// This protocol provides method for handling button actions on a FUIWelcomeScreen view.
SWIFT_PROTOCOL("_TtP8SAPFiori21FUIOnboardingDelegate_")
@protocol FUIOnboardingDelegate
@optional
/// Handling footnoteActionButton touch up inside action on a FUIWelcomeScreen view.
/// <ul>
///   <li>
///     _: FUIWelcomeScreen instance
///   </li>
/// </ul>
- (void)didSelectDemoMode:(FUIWelcomeScreen * _Nonnull)controller;
/// Handling primaryActionButton touch up inside action on a FUIWelcomeScreen view
/// <ul>
///   <li>
///     _: FUIWelcomeScreen instance
///   </li>
/// </ul>
- (void)didSelectSignIn:(FUIWelcomeScreen * _Nonnull)controller;
@end

@class NSLayoutConstraint;
@class FUIOnboardingScanViewController;

/// This is the view that will be displayed when the scanner got a QR code from either
/// scanner or a photo image. And this QR code is validated by the delegate of the
/// <code>FUIOnboardingScanViewController</code>.
/// This view includes the following components:
/// <ul>
///   <li>
///     Title label: with default text “Confirmation”
///   </li>
///   <li>
///     Check image: a green circle with white check mark in the middle
///   </li>
///   <li>
///     Success message label: with default text “Scan succeeded. You will be connected to:”
///   </li>
///   <li>
///     HCP server label: the text should be the hcp server name that the implementation of the following function of
///     <code>FUIWelcomeControllerDelegate</code> should provide.
///     \code
///     func welcomeController(_ welcomeController: FUIWelcomeController, willNavigateToScannerScreen scanController: FUIOnboardingScanViewController)
///
///     \endcode</li>
///   <li>
///     Continue button: when this is tapped, the app will continue rest of the orboarding tasks.
///   </li>
/// </ul>
SWIFT_CLASS("_TtC8SAPFiori28FUIOnboardingScanConfirmView")
@interface FUIOnboardingScanConfirmView : NibDesignable
/// The title string for the QR code scan confirmation screen.
/// The default string is from localized strings file -
/// “Confirmation”
@property (nonatomic, copy) NSString * _Nullable confirmationTitleString;
/// The success message for the QR code scan confirmation screen.
/// The default string is from localized strings file -
/// “Scan succeeded. You will be connected to:”
@property (nonatomic, copy) NSString * _Nullable confirmationMessageString;
/// The title string for the “Continue” button.
/// The default string is from localized strings file -
/// “Continue”
@property (nonatomic, copy) NSString * _Nullable continueButtonTitleString;
/// This is the width of the “Continue” button.
/// Developer may set the width of this button.
/// The default is 201 px.
@property (nonatomic, weak) IBOutlet NSLayoutConstraint * _Null_unspecified continueButtonWidthConstraint;
/// The <code>FUIOnboardingScanViewController</code> that will display this view.
@property (nonatomic, weak) FUIOnboardingScanViewController * _Nullable controller;
/// The HCP server name.
@property (nonatomic, copy) NSString * _Null_unspecified hcpServer;
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
@property (nonatomic, readonly) Class _Nonnull nibLoadingClass;
/// :nodoc:
- (void)layoutSubviews;
@end

@protocol FUIOnboardingScanViewControllerDelegate;

/// This controller is to display the scanner view to scan a QR code for app activation.
/// It is also displaying the image thumbnails from camera roll and a button to start photo picker
/// that user may choose the QR code image directly.
SWIFT_CLASS("_TtC8SAPFiori31FUIOnboardingScanViewController")
@interface FUIOnboardingScanViewController : UIViewController <UICollectionViewDataSource, UICollectionViewDelegate>
/// The title on the FUIOnboardingScanView.
/// The default string is from localized strings file -
/// “Scan”
@property (nonatomic, copy) NSString * _Nullable scanViewTitleString;
/// The title of the alert when user selects an image from photo library
/// for a QR code on scanner but scanner could not find a valid QR code
/// on that image.
/// The default string is from localized strings file -
/// “Scan Unsuccessful”
@property (nonatomic, copy) NSString * _Nullable scanUnsuccessfulTitleString;
/// The message of the alert when user selects an image from photo library
/// for a QR code on scanner but scanner could not find a valid QR code
/// on that image.
/// The default string is from localized strings file -
/// “Please select a QR code image.”
@property (nonatomic, copy) NSString * _Nullable scanUnsuccessfulMessageString;
/// The string to be used on the button to dismiss the alert.
/// The default string is from localized strings file -
/// “OK”
@property (nonatomic, copy) NSString * _Nullable okButtonString;
/// The title of the alert when user got the QR code from either scanner
/// or photo library for onboarding activation. However, the system
/// does not recognize the QR code.
/// The default string is from localized strings file -
/// “Invalid QR Code”
@property (nonatomic, copy) NSString * _Nullable invalidQRCodeTitleString;
/// The message of the alert when user got the QR code from either scanner
/// or photo library for onboarding activation. However, the system
/// does not recognize the QR code.
/// The default string is from localized strings file -
/// “The QR code was not recognized.”
@property (nonatomic, copy) NSString * _Nullable invalidQRCodeMessageString;
/// The title of the alert when user tapped the “Choose Photo icon”
/// but the permission to access to the photo library was not granted.
/// The default string is from localized strings file -
/// “Allow Access to Photos”
@property (nonatomic, copy) NSString * _Nullable allowPhotoAccessTitleString;
/// The message of the alert when user tapped the “Choose Photo icon”
/// but the permission to access to the photo library was not granted.
/// The default string is from localized strings file -
/// “To choose a QR code image, please give access to your photos in your device’s privacy settings.”
@property (nonatomic, copy) NSString * _Nullable allowPhotoAccessMessageString;
/// The title of the alert when user enter this scan view
/// but the permission to access camera was not granted.
/// The default string is from localized strings file -
/// “Allow Access to Camera”
@property (nonatomic, copy) NSString * _Nullable allowCameraAccessTitleString;
/// The message of the alert when user enter this scan view
/// but the permission to access camera was not granted.
/// The default string is from localized strings file -
/// “To scan using the camera, please give access to your camera in your device’s privacy settings.”
@property (nonatomic, copy) NSString * _Nullable allowCameraAccessMessageString;
/// The action title string not to go to the Settings app
/// for the alert when the permission
/// to access camera or photo library was not granted.
/// The default string is from localized strings file -
/// “Not Now”
@property (nonatomic, copy) NSString * _Nullable notNowActionString;
/// The action title string for going to the Settings app
/// for the alert when the permission
/// to access camera or photo library was not granted.
/// The default string is from localized strings file -
/// “Settings”
@property (nonatomic, copy) NSString * _Nullable settingsActionString;
/// The view to be displayed on top of the scan view when a QR code is validated.
/// A default <code>FUIOnboardingScanConfirmView</code> will be provided as default view.
/// Developer may substitude this to a custom view by setting this property.
@property (nonatomic, strong) UIView * _Nullable scanConfirmationView;
/// The <code>FUIOnboardingScanViewControllerDelegate</code> implementation.
@property (nonatomic, weak) id <FUIOnboardingScanViewControllerDelegate> _Nullable delegate;
/// :nodoc:
@property (nonatomic, readonly) BOOL prefersStatusBarHidden;
/// Use this function to create a <code>FUIOnboardingScanViewController</code> instance
/// loading from storyboard.
+ (FUIOnboardingScanViewController * _Nonnull)createInstanceFromStoryboard SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)viewDidLoad;
/// :nodoc:
- (void)viewDidAppear:(BOOL)animated;
/// :nodoc:
- (void)viewDidLayoutSubviews;
/// :nodoc:
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
/// :nodoc:
- (NSInteger)numberOfSectionsInCollectionView:(UICollectionView * _Nonnull)collectionView SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// Delegate protocol for <code>FUIOnboardingScanViewController</code>.
SWIFT_PROTOCOL("_TtP8SAPFiori39FUIOnboardingScanViewControllerDelegate_")
@protocol FUIOnboardingScanViewControllerDelegate
@optional
/// A QR code has been successfully scaned. The implementation should validate this QR code.
///
/// returns:
/// True if the QR code is validated successfully and the confirm view will be displayed.
/// Otherwise, an alert will be displayed to alert user to scan another QR code, or select another
/// QRCode image. Caller can use the <code>invalidQRCodeTitleString</code>, <code>invalidQRCodeMessageString</code>,
/// and <code>okButtonString</code> properties to customize the alert.
- (BOOL)scanViewController:(FUIOnboardingScanViewController * _Nonnull)scanViewController shouldValidateScanResult:(NSString * _Nonnull)scanResult SWIFT_WARN_UNUSED_RESULT;
@end


/// Use this <code>UINavigationController</code> to change the passcode screen flows in the application.
/// Set up the following properties before presenting this <code>FUIPasscodeChangeController</code>:
/// <ul>
///   <li>
///     passcodeControllerDelegate: An implementation of <code>FUIPasscodeControllerDelegate</code> that handles events from this controller for both <code>FUIPasscodeInputController</code> and <code>FUIPasscodeCreateController</code>.
///   </li>
///   <li>
///     validationDelegate: An implementation of <code>FUIPasscodeValidationDelegate</code> that validates the passcode entered by the user.
///   </li>
/// </ul>
/// Here is the screen flow:
/// <ul>
///   <li>
///     The first screen prompts the user to enter the current passcode using <code>FUIPasscodeInputController</code>.   This controller always uses the passcode for authentication only.
///     <em>Note</em>: Even if touchID is enabled, the controller does not use touchID for authentication.  After a passcode is entered, function <code>shouldTryPasscode</code> of the <code>FUIPasscodeControllerDelegate</code> implementation is invoked.  The application should not dismiss the controller in the <code>shouldTryPasscode</code> implementation.
///   </li>
///   <li>
///     The second screen prompts the user to enter a new passcode, which is validated by the <code>FUIPasscodePolicy</code>. The <code>FUIPasscodeControllerDelegate</code> provided function <code>validate</code> of <code>validationDelegate</code> is invoked for additional validation. Upon validation success, the next screen displays.
///   </li>
///   <li>
///     The third screen prompts the user to enter the passcode again to verify the passcode entered in the second screen.  After the setup is complete, the function <code>shouldTryPasscode</code>
///     of the <code>FUIPasscodeControllerDelegate</code> is invoked. The delegate should either create a secure store with the passcode, or save the passcode in a secure manner.
///     <em>Note</em>: Changing the passcode does not affect the existing Touch ID preferences. No additional screens display to enable touchID to change the passcode flow.  If touchID was previously disabled before triggering the passcode change, touchID remains disabled.  However, if touchID was previously enabled, the internal touchID-related data is automatically updated after the passcode is changed.
///   </li>
/// </ul>
/// This passcode flow change is implemented in <code>FUIPasscodeChangeController.storyboard</code>. There are two ways to invoke it:
/// <ul>
///   <li>
///     Use another storyboard and add a “Present Modally” segue to the <code>FUIPasscodeChangeController</code> storyboard in the <code>SAPFiori</code> framework bundle.
///     The app developer must provide the required properties in the <code>UIController</code>’s prepare for segue function:
///   </li>
/// </ul>
/// \code
///
/// override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
///    let changeController = segue.destination as! FUIPasscodeChangeController
///    changeController.passcodeControllerDelegate = passcodeControllerDelegate
///    changeController.validationDelegate = validationDelegate
/// }
///
///
/// \endcode<ul>
///   <li>
///     Programmatically load it:
///   </li>
/// </ul>
/// \code
/// if let changeController = FUIPasscodeChangeController.createInstanceFromStoryboard() {
///    changeController.passcodeControllerDelegate = passcodeControllerDelegate
///    changeController.validationDelegate = validationDelegate
///    self.present(changeController, animated: true, completion: nil)
/// }
///
///
/// \endcode
SWIFT_CLASS("_TtC8SAPFiori27FUIPasscodeChangeController")
@interface FUIPasscodeChangeController : UINavigationController
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Creates a <code>FUIPasscodeChangeController</code> object from storyboard.
///
/// returns:
/// A <code>FUIPasscodeChangeController</code> object.
+ (FUIPasscodeChangeController * _Nonnull)createInstanceFromStoryboard SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)viewDidLoad;
- (nonnull instancetype)initWithNavigationBarClass:(Class _Nullable)navigationBarClass toolbarClass:(Class _Nullable)toolbarClass SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithRootViewController:(UIViewController * _Nonnull)rootViewController SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


/// This is the base class of <code>FUIPasscodeCreateController</code> and <code>FUIPasscodeInputController</code>.
/// It has the common codes for those two view controllers.
/// Note that both Passcode screen and Touch ID screen are supported for iPad portrait and landscape orientation and iPhone portrait orientation only.
/// Since the screens are not supported in iPhone landscape orientation, the app installed in iPhone needs to switch to portrait mode before presenting these screens.
/// And AppDelegate needs to lock the screen orientation when these screens are shown, similar to the following code snippet.
/// In app’s AppDelegate:
/// \code
///
/// public var inPasscodeView: Bool = false
///
/// // implement this function to support only portrait orientation when FUPasscodeView is displayed in iPhone.
/// func application(_ application: UIApplication, supportedInterfaceOrientationsFor window: UIWindow?) -> UIInterfaceOrientationMask {
///     if !inPasscodeView {
///         return .allButUpsideDown
///     } else {
///         return .portrait
///     }
/// }
///
///
/// \endcodeBefore presenting the Passcode or Touch ID screen:
/// \code
///
/// // Let AppDelegate know that we are entering FUIPasscodeView
/// (UIApplication.shared.delegate as! AppDelegate).inPasscodeView = true
///
/// // Make sure we rotate to portrait mode
/// let value = UIInterfaceOrientation.portrait.rawValue
/// UIDevice.current.setValue(value, forKey: "orientation")
/// // Present the passcode view
/// self.navigationController?.present(navController, animated: true, completion: nil)
///
///
/// \endcodeAfter dismissing the Passcode or Touch ID screen:
/// \code
///
/// passcodeController.dismiss(animated: true, completion: nil)
/// // Let AppDelegate know that we are exiting FUIPasscodeView
/// (UIApplication.shared.delegate as! AppDelegate).inPasscodeView = false
///
///
/// \endcodeThe strings used in <code>FUIPasscodeSetupView</code>, <code>FUIPasscodeView</code>, and <code>FUITouchIDView</code>
/// are from localized Onboarding.strings file.
/// Application can override these strings by setting the corresponding static
/// variables in this FUIPasscodeController class at runtime.
SWIFT_CLASS("_TtC8SAPFiori21FUIPasscodeController")
@interface FUIPasscodeController : UIViewController
/// The title for the passcode setup screens.
/// The default is from localized strings file - “Set Passcode”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nullable setPasscodeTitleString;)
+ (NSString * _Nullable)setPasscodeTitleString SWIFT_WARN_UNUSED_RESULT;
+ (void)setSetPasscodeTitleString:(NSString * _Nullable)value;
/// The title for the enter passcode screen.
/// The default is from localized strings file - “Passcode”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nullable passcodeTitleString;)
+ (NSString * _Nullable)passcodeTitleString SWIFT_WARN_UNUSED_RESULT;
+ (void)setPasscodeTitleString:(NSString * _Nullable)value;
/// The message on the confirm passcode screen.
/// The default is from localized strings file - “Confirm your passcode”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nullable confirmPasscodeString;)
+ (NSString * _Nullable)confirmPasscodeString SWIFT_WARN_UNUSED_RESULT;
+ (void)setConfirmPasscodeString:(NSString * _Nullable)value;
/// The message on the input passcode screen.
/// The default is from localized strings file - “Enter your passcode”
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nullable enterYourPasscodeMessageString;)
+ (NSString * _Nullable)enterYourPasscodeMessageString SWIFT_WARN_UNUSED_RESULT;
+ (void)setEnterYourPasscodeMessageString:(NSString * _Nullable)value;
/// The message on the change passcode screen to ask user enter current passcode.
/// The default is from localized strings file - “Enter your current passcode”
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nullable enterYourCurrentPasscodeMessageString;)
+ (NSString * _Nullable)enterYourCurrentPasscodeMessageString SWIFT_WARN_UNUSED_RESULT;
+ (void)setEnterYourCurrentPasscodeMessageString:(NSString * _Nullable)value;
/// The button title string used in touch ID screen to indicate not to setup now.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nullable notNowButtonString;)
+ (NSString * _Nullable)notNowButtonString SWIFT_WARN_UNUSED_RESULT;
+ (void)setNotNowButtonString:(NSString * _Nullable)value;
/// The button title string used on the second passcode setup
/// to go back to the first screen.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nullable backItemString;)
+ (NSString * _Nullable)backItemString SWIFT_WARN_UNUSED_RESULT;
+ (void)setBackItemString:(NSString * _Nullable)value;
/// The button title string used on the first passcode setup
/// to go to the next screen.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nullable nextItemString;)
+ (NSString * _Nullable)nextItemString SWIFT_WARN_UNUSED_RESULT;
+ (void)setNextItemString:(NSString * _Nullable)value;
/// The main message format on the setup passscode screen.
/// The %d will display the number of characters required from
/// the passcode policy.
/// The default format is from localized strings file -
/// “Choose a passcode with a minimum of %d characters”
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nullable setPasscodeMessageFormat;)
+ (NSString * _Nullable)setPasscodeMessageFormat SWIFT_WARN_UNUSED_RESULT;
+ (void)setSetPasscodeMessageFormat:(NSString * _Nullable)value;
/// The main message format on the setup passscode screen when the
/// isDititsOnly property of the passcode policy is true.
/// The %d will display the number of digits required from
/// the passcode policy.
/// The default format is from localized strings file -
/// “Choose a passcode with a minimum of %d digits”
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nullable setPasscodeWithDigitsMessageFormat;)
+ (NSString * _Nullable)setPasscodeWithDigitsMessageFormat SWIFT_WARN_UNUSED_RESULT;
+ (void)setSetPasscodeWithDigitsMessageFormat:(NSString * _Nullable)value;
/// The message for required character groups.
/// The default is from localized strings file -
/// “Include the following:”
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nullable includeRequiredGroupMessage;)
+ (NSString * _Nullable)includeRequiredGroupMessage SWIFT_WARN_UNUSED_RESULT;
+ (void)setIncludeRequiredGroupMessage:(NSString * _Nullable)value;
/// The group name for lower case letters.
/// The default string is from localized strings file -
/// “Lower case (a-z)”
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nullable lowerCaseLabelString;)
+ (NSString * _Nullable)lowerCaseLabelString SWIFT_WARN_UNUSED_RESULT;
+ (void)setLowerCaseLabelString:(NSString * _Nullable)value;
/// The group name for upper case letters.
/// The default string is from localized strings file -
/// “Upper case (A-Z)”
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nullable upperCaseLabelString;)
+ (NSString * _Nullable)upperCaseLabelString SWIFT_WARN_UNUSED_RESULT;
+ (void)setUpperCaseLabelString:(NSString * _Nullable)value;
/// The group name for digits.
/// The default string is from localized strings file -
/// “Digits (0-9)”
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nullable digitsLabelString;)
+ (NSString * _Nullable)digitsLabelString SWIFT_WARN_UNUSED_RESULT;
+ (void)setDigitsLabelString:(NSString * _Nullable)value;
/// The group name for non-alphabetic characters.
/// The default string is from localized strings file -
/// “Non-alphabetic (!@#…)”
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nullable nonAlphabeticLabelString;)
+ (NSString * _Nullable)nonAlphabeticLabelString SWIFT_WARN_UNUSED_RESULT;
+ (void)setNonAlphabeticLabelString:(NSString * _Nullable)value;
/// The button title for resetting passcode.
/// The default string is from localized strings file -
/// “Reset Passcode”
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nullable resetPasscodeButtonString;)
+ (NSString * _Nullable)resetPasscodeButtonString SWIFT_WARN_UNUSED_RESULT;
+ (void)setResetPasscodeButtonString:(NSString * _Nullable)value;
/// Alert message when validate method of <code>FUIPasscodeValidationDelegate</code>
/// returning false for the passcode user entered in setup passcode.
/// The default string is from localized strings file -
/// “Passcode validation failed.”
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nullable passcodeValidationFailedMessageString;)
+ (NSString * _Nullable)passcodeValidationFailedMessageString SWIFT_WARN_UNUSED_RESULT;
+ (void)setPasscodeValidationFailedMessageString:(NSString * _Nullable)value;
/// Alert message when the passcode user entered was rejected by
/// the <code>FUIPasscodeControllerDelegate</code>’s shouldTryPasscode function.
/// The default string is from localized strings file -
/// “Passcode was rejected by FUIPasscodeControllerDelegate.”
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nullable passcodeRejectedMessageString;)
+ (NSString * _Nullable)passcodeRejectedMessageString SWIFT_WARN_UNUSED_RESULT;
+ (void)setPasscodeRejectedMessageString:(NSString * _Nullable)value;
/// The alert button title used on passcode validation failed, or passcode rejected.
/// The default is from localized strings file - “Retry”
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nullable retryButtonString;)
+ (NSString * _Nullable)retryButtonString SWIFT_WARN_UNUSED_RESULT;
+ (void)setRetryButtonString:(NSString * _Nullable)value;
/// The title for setup touch ID screen.
/// The default string is from localized strings file -
/// “Touch ID”
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nullable touchIDTitleString;)
+ (NSString * _Nullable)touchIDTitleString SWIFT_WARN_UNUSED_RESULT;
+ (void)setTouchIDTitleString:(NSString * _Nullable)value;
/// The first paragraph of the message on the Touch ID screen.
/// The default string is from localized strings file -
/// “Enabling Touch ID will allow quick access to your information.”
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nullable touchIDMessage1String;)
+ (NSString * _Nullable)touchIDMessage1String SWIFT_WARN_UNUSED_RESULT;
+ (void)setTouchIDMessage1String:(NSString * _Nullable)value;
/// The second paragraph of the message on the Touch ID screen.
/// The default string is from localized strings file -
/// “You can turn this feature On or Off anytime from Settings.”
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nullable touchIDMessage2String;)
+ (NSString * _Nullable)touchIDMessage2String SWIFT_WARN_UNUSED_RESULT;
+ (void)setTouchIDMessage2String:(NSString * _Nullable)value;
/// The message for the link on the Touch ID screen.
/// The default string is from localized strings file -
/// “Learn more about Touch ID”
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nullable learnMoreTouchIDLinkString;)
+ (NSString * _Nullable)learnMoreTouchIDLinkString SWIFT_WARN_UNUSED_RESULT;
+ (void)setLearnMoreTouchIDLinkString:(NSString * _Nullable)value;
/// The button title to enable Touch ID authentication.
/// The default is from localized strings file - “Enable”
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nullable enableButtonString;)
+ (NSString * _Nullable)enableButtonString SWIFT_WARN_UNUSED_RESULT;
+ (void)setEnableButtonString:(NSString * _Nullable)value;
/// The message displayed when authenticate with Touch ID.
/// The default string is from localized strings file -
/// “Authenticate with Touch ID”
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nullable authenticateWithTouchIDMessageString;)
+ (NSString * _Nullable)authenticateWithTouchIDMessageString SWIFT_WARN_UNUSED_RESULT;
+ (void)setAuthenticateWithTouchIDMessageString:(NSString * _Nullable)value;
/// The message when the passcode entered in confirm passcode screen
/// does not match with the one entered in the setup passcode screen.
/// The default string is from localized strings file -
/// “Passcodes did not match. Try again.”
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nullable passcodeNotMatchMessageString;)
+ (NSString * _Nullable)passcodeNotMatchMessageString SWIFT_WARN_UNUSED_RESULT;
+ (void)setPasscodeNotMatchMessageString:(NSString * _Nullable)value;
/// The message format to be displayed when user entered wrong passcode
/// and the remaining number of retries is greater than 1.
/// The default format is from localized strings file -
/// “You hava %d attempts left”
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nullable attemptsLeftMessageFormat;)
+ (NSString * _Nullable)attemptsLeftMessageFormat SWIFT_WARN_UNUSED_RESULT;
+ (void)setAttemptsLeftMessageFormat:(NSString * _Nullable)value;
/// The message string to be displayed when user entered wrong passcode
/// and there is only one remaining retry.
/// The default string is from localized strings file -
/// “You have 1 attempt left”
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nullable oneAttempLeftMessageFormat;)
+ (NSString * _Nullable)oneAttempLeftMessageFormat SWIFT_WARN_UNUSED_RESULT;
+ (void)setOneAttempLeftMessageFormat:(NSString * _Nullable)value;
/// The first paragraph of the alert message when the number user entered
/// wrong passcode reached maximum allowed.
/// The default string is from localized strings file -
/// “Maximum Passcode Attempts Reached”
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nullable maxAttemptsReachedMessageString;)
+ (NSString * _Nullable)maxAttemptsReachedMessageString SWIFT_WARN_UNUSED_RESULT;
+ (void)setMaxAttemptsReachedMessageString:(NSString * _Nullable)value;
/// The second paragraph of the alert message when the number user entered
/// wrong passcode reached maximum allowed.
/// The default string is from localized strings file -
/// “Please enter your credentials to Sign in and reset the passcode”
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nullable enterCredentialsMessageString;)
+ (NSString * _Nullable)enterCredentialsMessageString SWIFT_WARN_UNUSED_RESULT;
+ (void)setEnterCredentialsMessageString:(NSString * _Nullable)value;
/// The text of the dismiss button on the alert.
/// The default string is from localized strings file -
/// “OK”
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nullable okButtonString;)
+ (NSString * _Nullable)okButtonString SWIFT_WARN_UNUSED_RESULT;
+ (void)setOkButtonString:(NSString * _Nullable)value;
/// The message on the passcode screen when user entered wrong passcode
/// and there is no limit on the number of retries.
/// The default string is from localized strings file -
/// “Incorrect passcode. Try again.”
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nullable retryPasscodeMessageString;)
+ (NSString * _Nullable)retryPasscodeMessageString SWIFT_WARN_UNUSED_RESULT;
+ (void)setRetryPasscodeMessageString:(NSString * _Nullable)value;
/// Allow content-driven resizing for all the buttons that support the feature in the screens.
/// The default is false.  Default to the size defined in Fiori Design Pattern
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL allowButtonsToUseIntrinsicContentSize;)
+ (BOOL)allowButtonsToUseIntrinsicContentSize SWIFT_WARN_UNUSED_RESULT;
+ (void)setAllowButtonsToUseIntrinsicContentSize:(BOOL)value;
/// :nodoc:
- (void)viewDidLoad;
/// Checks to see if touchID is enabled
///
/// returns:
/// true if touchID is enabled; otherwise, it’s disabled.
+ (BOOL)isTouchIDEnabled SWIFT_WARN_UNUSED_RESULT;
/// Enabling touchID by saving touchID enabling related data
/// <ul>
///   <li>
///     param: passcode to be saved
///   </li>
/// </ul>
+ (void)enableTouchIDForPasscode:(NSString * _Nonnull)passcode;
/// Clears touchID enabling entries created by the framework passcode controllers
/// in the keychain.
+ (void)clearTouchIDSettings;
/// Clears passcode-related (including touchID) entries created by the framework passcode controllers
/// in the keychain.
+ (void)clearPasscodeSettings;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// This <code>UIViewController</code> is to be used by app to setup the passcode and enabling Touch ID screen flows.
/// Before the navigation controller presents this <code>FUIPasscodeCreateController</code>, the following property
/// needs to be set:
/// <ul>
///   <li>
///     delegate: An implementation of <code>FUIPasscodeControllerDelegate</code> to hanle events from this controller.
///   </li>
/// </ul>
/// Application can also set this property for more passcode validation checks:
/// <ul>
///   <li>
///     validationDelegate: An implementation of <code>FUIPasscodeValidationDelegate</code> to validate the passcode user entered.
///   </li>
/// </ul>
/// Here is the screen flow:
/// <ul>
///   <li>
///     The first screen prompts user to enter passcode.
///     After user entered the passcode which is validated with the <code>FUIPasscodePolicy</code>.  The <code>FUIPasscodeValidationDelegate</code> provided function <code>validate</code> of <code>validationDelegate</code> is invoked for additional validation.  If validation success, the next screen will be displayed; otherwise, the function throws <code>FUIPasscodeControllerError</code> when validation fails.
///   </li>
///   <li>
///     The second screen prompts user to enter passcode again to verify with the passcode
///     entered in the first screen. The third screen will be displayed when the passcode
///     entered matched the passcode entered and touch ID is allowed in <code>FUIPasscodePolicy</code>.
///   </li>
///   <li>
///     The third screen prompts user to decide if enable Touch ID authentication or not.
///     If user chooses “Enable” the passcode is saved as a Touch ID protected keychain item
///     so that the passcode could be retrieved by FUIPasscodeInputController later with Touch ID.
///   </li>
/// </ul>
/// After the setup is done, either with the third screen or not, the function <code>shouldTryPasscode</code>
/// of the <code>FUIPasscodeControllerDelegate</code> is invoked. The delegate should either create a secure
/// store with the passcode, or save the passcode in a secure manner.
/// This passcode create flow is implemented in <code>FUIPasscodeCreateController.storyboard</code>. There are two ways to invoke it:
/// <ul>
///   <li>
///     Use another story board and using a “Present Modally” segue to <code>FUIPasscodeCreateController</code> storyboard in <code>SAPFiori</code>’s framework bundle “com.sap.cp.sdk.ios.SAPFiori”.
///     App programmer needs to provide the properties needed in <code>UIController</code>’s prepare for segue function:
///   </li>
/// </ul>
/// \code
///
/// override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
///     let destination = segue.destination as! UINavigationController
///     let vc0 = destination.viewControllers[0]
///     let vc = vc0 as! FUIPasscodeCreateController
///     //assigning a `FUIPasscodeControllerDelegate` delegate is a must
///     vc.delegate = passcodeControllerDelegate
/// }
///
///
/// \endcode<ul>
///   <li>
///     Programmatically loads it:
///   </li>
/// </ul>
/// \code
/// let bundle = Bundle(identifier: "com.sap.cp.sdk.ios.SAPFiori")
/// let storyboard = UIStoryboard(name: "FUIPasscodeCreateController", bundle: bundle)
/// let vc = storyboard.instantiateViewController(withIdentifier: "PasscodeCreateFirstViewController")
/// let passcodeVC = vc as! FUIPasscodeCreateController
///
/// //assigning a `FUIPasscodeControllerDelegate` delegate is a must
/// passcodeVC.delegate = passcodeControllerDelegate
///
/// // present the passcode view
/// let navController = UINavigationController(rootViewController: passcodeVC)
/// self.navigationController?.present(navController, animated: true, completion: nil)
///
///
///
/// \endcode
SWIFT_CLASS("_TtC8SAPFiori27FUIPasscodeCreateController")
@interface FUIPasscodeCreateController : FUIPasscodeController
/// This property indicates if the create passcode process includes
/// a screen to enable TouchID or not. The default is true.
/// Note that if there is no TouchID registered on the device,
/// the enable TouchID screen will not be shown even if this property is true.
@property (nonatomic) BOOL canEnableTouchID;
/// App may set this link to other values. The default link URL is “https://support.apple.com/en-us/HT201371”.
/// This link is to be used in the Touch ID screen with label “Learn more about Touch ID”
@property (nonatomic, copy) NSURL * _Nullable touchIDLearnMoreLink;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Creates a <code>FUIPasscodeCreateController</code> object from storyboard.
///
/// returns:
/// A <code>FUIPasscodeCreateController</code> object.
+ (FUIPasscodeCreateController * _Nonnull)createInstanceFromStoryboard SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)viewDidLoad;
/// :nodoc:
- (void)viewWillAppear:(BOOL)animated;
/// :nodoc:
- (void)viewWillDisappear:(BOOL)animated;
/// :nodoc:
- (void)viewDidAppear:(BOOL)animated;
/// :nodoc:
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
/// :nodoc:
- (void)prepareForSegue:(UIStoryboardSegue * _Nonnull)segue sender:(id _Nullable)sender;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


/// This <code>UIViewController</code> is to be used by app to authenticate user by either Touch ID or Passcode.
/// Before the navigation controller presents this <code>FUIPasscodeInputController</code>, the following properties
/// needs to be setup:
/// <ul>
///   <li>
///     delegate: An implementation of <code>FUIPasscodeControllerDelegate</code> to handle events from this controller.
///   </li>
/// </ul>
/// This controller will try to determine if Touch ID is enabled by retrieving the value from
/// keychain. If Touch ID is enabled, there will be Touch ID authentication popup to prompt user
/// authenticate with Touch ID.
/// If Touch ID authentication succeeded, the saved passcode will be retrieved and function
/// <code>shouldTryPasscode</code> of the <code>FUIPasscodeControllerDelegate</code> implementation will be invoked.
/// If Touch ID authentication is canceled or failed, the passcode view will be shown to prompt user
/// enter passcode. After user entered the passcode, function <code>shouldTryPasscode</code> of the
/// <code>FUIPasscodeControllerDelegate</code> implementation will be invoked.
/// The delegate should dismiss this controller after the passcode is verified.
/// This passcode input flow is implemented in <code>FUIPasscodeInputController.storyboard</code>. There are two ways to invoke it:
/// <ul>
///   <li>
///     Use another story board and using a “Present Modally” segue to <code>FUIPasscodeInputController</code> storyboard in <code>SAPFioriUI</code> framework bundle.
///     App programmer needs to provide the properties needed in <code>UIController</code>’s prepare for segue function:
///   </li>
/// </ul>
/// \code
///
/// override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
///     let destination = segue.destination as! UINavigationController
///     let vc0 = destination.viewControllers[0]
///     let vc = vc0 as! FUIPasscodeInputController
///     vc.delegate = passcodeControllerDelegate
/// }
///
///
/// \endcode<ul>
///   <li>
///     Programmatically loads it:
///   </li>
/// </ul>
/// \code
///
/// let storyboard = UIStoryboard(name: "FUIPasscodeInputController", bundle: bundle)
/// let vc = storyboard.instantiateViewController(withIdentifier: "PasscodeInputViewController")
/// let passcodeVC = vc as! FUIPasscodeInputController
///
/// // present the passcode view
/// let navController = UINavigationController(rootViewController: passcodeVC)
/// self.navigationController?.present(navController, animated: true, completion: nil)
///
///
/// \endcode
SWIFT_CLASS("_TtC8SAPFiori26FUIPasscodeInputController")
@interface FUIPasscodeInputController : FUIPasscodeController
/// App may provide a custom background image to be displayed under the Touch ID
/// authentication popup.
@property (nonatomic, strong) UIImage * _Nullable customBackgroundImage;
/// If this property is true, a Cancel bar button item will be shown.
/// When that Cancel bar button item is tapped, the <code>didCancelPasscodeEntry</code>
/// function of the delegate will be invoked.
/// The default is false.
@property (nonatomic) BOOL isToShowCancelBarItem;
/// If this property is true, a “Reset Passcode” button will be displayed when
/// user entered a wrong passcode.
/// The default is true.
@property (nonatomic) BOOL isToShowResetButton;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Creates a <code>FUIPasscodeInputController</code> object from storyboard.
///
/// returns:
/// A <code>FUIPasscodeInputController</code> object.
+ (FUIPasscodeInputController * _Nonnull)createInstanceFromStoryboard SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)viewDidLoad;
/// :nodoc:
- (void)viewDidAppear:(BOOL)animated;
/// :nodoc:
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


/// <code>FUIProcessingIndicatorView</code> is an IBDesignable UI component. A processing indicator shows that a task is in progress. It shows a circular activity indicator to visualize indeterminate processing and has an optional <code>UILabel</code> below the activity indicator indicating to the user what is being processed.
/// By default, this view is not visible and the animation is stopped. The activity indicator has a predefined size and line width that depends on the horizontal size class.
/// <h2>Initialization</h2>
/// <h3>Programmatically:</h3>
/// \code
/// let processingIndicatorView = FUIProcessingIndicatorView(frame: CGRect())
///
/// \endcode<h3>Inside a Storyboard or xib:</h3>
/// <ol>
///   <li>
///     Drag and drop a <code>UIView</code> component to Interface Builder’s canvas.
///   </li>
///   <li>
///     Switch class name from <code>UIView</code> to <code>FUIProcessingIndicatorView</code>, and set module to <code>SAPFiori</code>.
///   </li>
///   <li>
///     Create an outlet of the processing indicator view to be able to access its properties.
///   </li>
/// </ol>
/// <h2>Usage</h2>
/// \code
/// processingIndicatorView.show()
/// // do something
/// processingIndicatorView.dismiss()
///
/// \endcode<h2>Animation</h2>
/// The animation of the processing indicator can be started or stopped without affecting the visibility of the view.
/// \code
/// processingIndicatorView.startAnimating()
/// // do something
/// processingIndicatorView.stopAnimating()
///
/// \endcode<h2>Theming</h2>
/// The styleClass of the view is <code>fdlFUIProcessingIndicatorView</code>.
/// In the .nss file you can use the following parameters:
/// <ul>
///   <li>
///     <code>fdlFUIProcessingIndicatorView_textLabel</code>: changes the appearance of the <code>textLabel</code>
///   </li>
/// </ul>
/// <h3>Example:</h3>
/// \code
/// fdlFUIProcessingIndicatorView_textLabel {
///    background-color: red;
///    border-color: green;
///    border-width: 2;
///    corner-radius: 2;
///    font-color: blue;
///    font-color-highlighted: yellow;
///    font-name: Avenir;
///    font-size: 15;
///    height: 50;
///    shadow-color: black;
///    shadow-offset: 1, 2;
///    shadow-opacity: 0.5;
///    shadow-radius: 2;
///    text-align: center;
///    text-alpha: 0.9;
///    text-auto-fit: true;
///    text-shadow-color: black;
///    text-shadow-offset: 1, 2;
///    text-transform: uppercase;
///    text-line-clamp:6;
///    width: 100;
/// }
///
/// \endcode
SWIFT_CLASS("_TtC8SAPFiori26FUIProcessingIndicatorView")
@interface FUIProcessingIndicatorView : NibDesignable
/// Text label below the circular activity indicator.
@property (nonatomic, weak) IBOutlet UILabel * _Null_unspecified textLabel;
/// Text of <code>textLabel</code>. The default is <code>nil</code>.
@property (nonatomic, copy) NSString * _Nullable text;
/// A boolean value indicating whether <code>textLabel</code> is hidden. The default is <code>false</code>.
@property (nonatomic) BOOL isTextLabelHidden;
/// A boolean value indicating whether the processing indicator is currently rotating.
@property (nonatomic, readonly) BOOL isAnimating;
/// :nodoc:
@property (nonatomic, readonly) CGSize intrinsicContentSize;
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
@property (nonatomic, readonly) Class _Nonnull nibLoadingClass;
/// Shows the processing indicator and starts rotating.
/// \param animated whether the processing indicator is shown with a fade animation. The default is <code>true</code>.
///
- (void)showWithAnimated:(BOOL)animated;
/// Dismisses the processing indicator and stops rotating.
/// \param animated whether the processing indicator is dismissed with a fade animation.  The default is <code>true</code>.
///
- (void)dismissWithAnimated:(BOOL)animated;
/// Starts the rotation animation until it is stopped.
/// \param animated whether the circle starts rotating slowly and accelerates. The default is <code>true</code>.
///
- (void)startAnimatingWithEaseIn:(BOOL)easeIn;
/// Stops the rotation animation.
/// \param animated whether the circle rotation slows down before stopping. The default is <code>true</code>.
///
- (void)stopAnimatingWithEaseOut:(BOOL)easeOut;
/// :nodoc:
- (void)traitCollectionDidChange:(UITraitCollection * _Nullable)previousTraitCollection;
/// :nodoc:
- (void)prepareForInterfaceBuilder;
@end


/// <code>FUIProgressIndicatorControl</code> is an IBDesignable UI component. It can be used to display a
/// (download) progress gauge as used in Apple’s App Store and iTunes Store for downloading
/// apps or music.
/// Different display states control the visual appearance of the control and the options the user has to interact with the control.
/// <h2>Initialization</h2>
/// <h3>Programmatically:</h3>
/// \code
/// let progressIndicatorControl = FUIProgressIndicatorControl(frame: CGRect())
///
/// \endcode<h3>Inside a Storyboard or xib:</h3>
/// <ol>
///   <li>
///     Drag and drop an <code>UIView</code> component to Interface Builder canvas.
///   </li>
///   <li>
///     Switch class name from <code>UIView</code> to <code>FUIProgressIndicatorControl</code>, and set module to <code>SAPFiori</code>.
///   </li>
///   <li>
///     Control-drag from the progress indicator control in Interface Builder to your source file to create an outlet of the FUIProgressIndicatorControl and to be able to access its properties.
///   </li>
///   <li>
///     Control-drag from the progress indicator control in Interface Builder to your source file and create an action for the FUIProgressIndicatorControl. Make sure to select <code>TouchUpInside</code> as event type. Specify an action name and implement the generated callback method to react accordingly once the user tapped the control.
///   </li>
/// </ol>
/// <h2>Usage</h2>
/// \code
/// // If the action was not created in interface builder as described before, add it programmatically.
/// progressIndicatorControl.addTarget(self, action: #selector(myActionMethod), for: .touchUpInside)
///
/// // Initially, call the changeDisplayState(to:) method to change the views state. You can do that in viewDidLoad() or later.
/// // The state .inProgress indicates that progress has started. Usually you would show this state when you start connecting to
/// // a server for downloading data.
/// progressIndicatorControl.changeDisplayState(to: .inProgress)
///
/// // Once the connection has been established and the download has started, you can change the display state to .loadingPausable or 
/// // .loadingStoppable:
/// progressIndicatorControl.changeDisplayState(to: .loadingPausable)
///
/// // If the user tapped the control, while it was in .loadingPausable state, you can change it to .loadingPaused
/// // For example:
/// @IBAction func myActionMethod(_ sender: FUIProgressIndicatorControl) {
///    switch sender.displayState {
///    case .inProgress:
///        // do nothing if user tapped on control while it was .inProgress.
///        break
///    case .loadingPausable:
///        sender.changeDisplayState(to: .paused)
///        return
///    case .loadingStoppable:
///        // user cancelled the e.g. download, so we hide the control
///        sender.isHidden = true
///    }
/// }
///
/// // To set the progress value proceed as follows:
/// progressIndicatorControl.update(progress: 0.5, animated: false)
/// progressIndicatorControl.update(progress: 1, animated: true) {
///    // Once the download is completed, you might want to hide the progress indicator
///    // and show a link to the downloaded resource, etc..
///    self.progressIndicatorControl.isHidden = true
///    self.openDownloadedFileButton.isHidden = false
/// }
///
///
/// \endcode
SWIFT_CLASS("_TtC8SAPFiori27FUIProgressIndicatorControl")
@interface FUIProgressIndicatorControl : NibDesignableControl
/// The current progress value (between 0.0 and 1.0) of the progress indicator.
@property (nonatomic, readonly) float progress;
/// :nodoc:
@property (nonatomic, strong) UIColor * _Null_unspecified tintColor;
/// :nodoc:
- (void)tintColorDidChange;
/// :nodoc:
@property (nonatomic, readonly) CGSize intrinsicContentSize;
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
@property (nonatomic, readonly) Class _Nonnull nibLoadingClass;
/// Updates the progress value. Updating the progress value can be animated.
/// Values for progress should be between 0.0 and 1.0.
/// \param progress The value the progress indicator should be set to.
///
/// \param animated Indicates if the progress update should be animated or not.
///
/// \param completion Completion block called once progress value was updated. This will be called regardless of whether <code>animated</code> is true or false.
///
- (void)updateWithProgress:(float)progress animated:(BOOL)animated completion:(void (^ _Nullable)(void))completion;
/// :nodoc:
- (void)prepareForInterfaceBuilder;
@end


/// UICollectionView subclass, which invokes a <code>sizeChangeHandler: (() -> Void)?</code> closure, when the current content size of the collection does not match the intrinsic content size.  The sizeChangeHandler property is <code>internal</code> to the SDK.
/// Developers should generally not initialize <code>FUIResizingCollectionView</code> directly.  Instead, instances of the class are typically accessed through the <code>FUITableViewCollectionSection</code> API’s.
/// important:
/// Resizing behavior will only be executed, if the <code>sizeChangeHandler</code> is implemented.
SWIFT_CLASS("_TtC8SAPFiori25FUIResizingCollectionView")
@interface FUIResizingCollectionView : UICollectionView
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame collectionViewLayout:(UICollectionViewLayout * _Nonnull)layout SWIFT_UNAVAILABLE;
/// :nodoc:
- (void)layoutSubviews;
/// :nodoc:
@property (nonatomic, readonly) CGSize intrinsicContentSize;
@end

@protocol UISearchBarDelegate;
@class UIFont;

/// Fiori style UISearchBar.
/// Developer can add a <code>FUIBarcodeScanner</code> to this <code>FUISearchBar</code> by setting the
/// <code>isBarcodeScannerEnabled</code> property of the <code>FUISearchBar</code> to true. A barcode scanner
/// icon will be displayed at the bookmark icon location of the search bar.
/// A barcode scanner view will be displayed when the barcode scanner icon is tapped.
/// Please refer to <code>FUISearchController</code> about how to use this <code>FUISearchBar</code>.
SWIFT_CLASS("_TtC8SAPFiori12FUISearchBar")
@interface FUISearchBar : UISearchBar
/// If this is true, there will be a barcode scanner icon at the
/// bookmark location of the search bar. The default is false.
/// When barcode scanner is enabled, developer need to set the delegate
/// for this <code>FUISearchBar</code> to display the <code>FUIBarcodeScanner</code> in function
/// <code>searchBarBookmarkButtonClicked</code> of the delegate.
@property (nonatomic) BOOL isBarcodeScannerEnabled;
/// / :nodoc:
@property (nonatomic, weak) id <UISearchBarDelegate> _Nullable delegate;
/// The customized placeholder text.
@property (nonatomic, copy) NSString * _Nullable placeholderText;
/// The placehoder text font. Default is Fiori style subheadline.
@property (nonatomic, strong) UIFont * _Nonnull placeholderTextFont;
/// The placeholderTextColor. Default is #8E8E8E.
@property (nonatomic, strong) UIColor * _Nonnull placeholderTextColor;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Convenience initializer for internal use.
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
/// :nodoc:
- (void)didMoveToSuperview;
@end


/// Fiori style UISearchController. The only difference between <code>FUISearchController</code>
/// and regular <code>UISearchController</code> is the <code>searchBar</code>.
/// <code>FUISearchController</code>’s <code>searchBar</code> is <code>FUISearchBar</code>.
/// Developer can add a <code>FUIBarcodeScanner</code> to this <code>FUISearchBar</code> by setting the
/// <code>isBarcodeScannerEnabled</code> property of the <code>FUISearchBar</code> to true. A barcode scanner
/// icon will be displayed at the bookmark icon location of the search bar.
/// A barcode scanner view will be displayed when the barcode scanner icon is tapped.
/// Here is an sample code for an UITableViewController to add the <code>FUISearchBar</code> to its table view header.
/// \code
///    // Instantiate an FUISearchController and configure its properties
///    searchController = FUISearchController(searchResultsController: nil)
///    searchController.searchResultsUpdater = self
///    searchController.hidesNavigationBarDuringPresentation = true
///    searchController.searchBar.placeholderText = "Search The List"
///
///    // Adding barcode scanner to this search bar
///    searchController.searchBar.isBarcodeScannerEnabled = true
///    searchController.searchBar.barcodeScanner?.scanMode = .EAN_UPC
///    searchController.searchBar.barcodeScanner?.scanResultTransformer = { (scanString) -> String in
///        return scanString.uppercased()
///    }
///
///    self.tableView.tableHeaderView = searchController.searchBar
///
///
///
/// \endcode
SWIFT_CLASS("_TtC8SAPFiori19FUISearchController")
@interface FUISearchController : UISearchController
/// :nodoc:
- (nonnull instancetype)initWithSearchResultsController:(UIViewController * _Nullable)searchResultsController OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
/// Search bar of the search controller.  When instantiating the <code>FUISearchController</code> programmatically, a default <code>FUISearchBar</code> is initialized automatically and can be used directly.  The developer should set a reference to an <code>@IBOutlet</code>, if adding a search bar to their view in Interface Builder.
@property (nonatomic, readonly, strong) FUISearchBar * _Nonnull searchBar;
/// :nodoc:
- (void)viewWillAppear:(BOOL)animated;
@end

@protocol UIBarPositioning;

@interface FUISearchController (SWIFT_EXTENSION(SAPFiori)) <UIBarPositioningDelegate>
/// Implement this method on your manual bar delegate when not managed by a UIKit controller.
/// UINavigationBar and UISearchBar default to UIBarPositionTop, UIToolbar defaults to UIBarPositionBottom.
/// This message will be sent when the bar moves to a window.
- (UIBarPosition)positionForBar:(id <UIBarPositioning> _Nonnull)bar SWIFT_WARN_UNUSED_RESULT;
@end


@interface FUISearchController (SWIFT_EXTENSION(SAPFiori)) <UISearchBarDelegate>
/// :nodoc:
- (BOOL)searchBarShouldBeginEditing:(UISearchBar * _Nonnull)searchBar SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)searchBarTextDidBeginEditing:(UISearchBar * _Nonnull)searchBar;
/// :nodoc:
- (BOOL)searchBarShouldEndEditing:(UISearchBar * _Nonnull)searchBar SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)searchBarTextDidEndEditing:(UISearchBar * _Nonnull)searchBar;
/// :nodoc:
- (void)searchBar:(UISearchBar * _Nonnull)searchBar textDidChange:(NSString * _Nonnull)searchText;
/// :nodoc:
- (BOOL)searchBar:(UISearchBar * _Nonnull)searchBar shouldChangeTextInRange:(NSRange)range replacementText:(NSString * _Nonnull)text SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)searchBarSearchButtonClicked:(UISearchBar * _Nonnull)searchBar;
/// Handler for BarcodeScanner button (‘Bookmark button’) click
/// important:
/// Because the presentation of the view controller for barcode scanning is invoked internally when this method is called, this method will be invoked on the <code>delegate</code> only after the presentation of the view controller is completed.
/// \param searchBar calling <code>UISearchBar</code>
///
- (void)searchBarBookmarkButtonClicked:(UISearchBar * _Nonnull)searchBar;
/// :nodoc:
- (void)searchBarCancelButtonClicked:(UISearchBar * _Nonnull)searchBar;
/// :nodoc:
- (void)searchBarResultsListButtonClicked:(UISearchBar * _Nonnull)searchBar;
/// :nodoc:
- (void)searchBar:(UISearchBar * _Nonnull)searchBar selectedScopeButtonIndexDidChange:(NSInteger)selectedScope;
@end


/// A <code>UITableViewCell</code> subclass, which allows a user to view or select from a list of strings, using a Fiori-styled segmented control.
/// <img src="../ReadmeImages/FK_SegControlCellAnnotations.png?raw=true" alt="FUISegmentedControlFormCell" width="376">
/// The <code>value</code> property of the cell is equal to the <code>selectedSegmentIndex</code> in the segmented control.
/// <h2>Code usage:</h2>
/// \code
/// // Optionally, create an array of value option to localized string mappings
/// let buttonTitles: [[String: String]] = [["LO": "Low"], ["MED": "Medium"], ["HI": "High"]]
///
/// // Register FUISegmentedControlFormCell in viewDidLoad() method in the controller.
/// override func viewDidLoad() {
///    super.viewDidLoad()
///    self.tableView.register(FUISegmentedControlFormCell.self, forCellReuseIdentifier: FUISegmentedControlFormCell.reuseIdentifier)
/// }
///
/// override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
///    let cell = tableView.dequeueReusableCell(withIdentifier: FUISegmentedControlFormCell.reuseIdentifier, for: indexPath) as! FUISegmentedControlFormCell
///
///    cell.valueOptions = buttonTitles.flatMap { $0.map { $0.value } }
///    cell.keyName = "Priority"
///    cell.value = myObject.priority  // String value in the valid options set: ["LO", "MED", "HI"]
///
///    // MARK:  implement onChangeHandler
///    cell.onChangeHandler = { newValue in
///        myObject.priority = buttonTitles[newValue].first!.key  // lookup valid String value, from the buttonTitles array
///    }
///
///    return cell
/// }
///
/// \endcode
SWIFT_CLASS("_TtC8SAPFiori27FUISegmentedControlFormCell")
@interface FUISegmentedControlFormCell : FUIInlineValidationTableViewCell
/// The default cell reuse identifier.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull reuseIdentifier;)
+ (NSString * _Nonnull)reuseIdentifier SWIFT_WARN_UNUSED_RESULT;
/// The key name of the cell
@property (nonatomic, copy) NSString * _Nullable keyName;
/// The value of the cell
@property (nonatomic) NSInteger value;
/// The width of segment in the control. Default is 73. Setting this property has no effect if <code>apportionsSegmentWidthsByContent</code> is true.
@property (nonatomic) CGFloat segmentWidth;
/// Implementation of change handler.  Is invoked on changes to the <code>value</code> property.
@property (nonatomic, copy) void (^ _Nullable onChangeHandler)(NSInteger);
/// The array of the valid options.
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull valueOptions;
/// Indicates whether the user can change the selection or not. It is set to true by default.
@property (nonatomic) BOOL isEditable;
/// Indicates whether the control attempts to adjust segment widths based on their content widths. Default is false.
@property (nonatomic) BOOL apportionsSegmentWidthsByContent;
@property (nonatomic, readonly, weak) IBOutlet UILabel * _Null_unspecified titleLabel;
/// The key name label in the cell
@property (nonatomic, readonly, weak) IBOutlet UILabel * _Null_unspecified keyLabel;
/// :nodoc:
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)layoutSubviews;
/// :nodoc:
- (CGSize)systemLayoutSizeFittingSize:(CGSize)targetSize withHorizontalFittingPriority:(UILayoutPriority)horizontalFittingPriority verticalFittingPriority:(UILayoutPriority)verticalFittingPriority SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)prepareForReuse;
/// :nodoc:
- (void)setSelected:(BOOL)selected animated:(BOOL)animated;
/// :nodoc:
- (void)setHighlighted:(BOOL)highlighted animated:(BOOL)animated;
/// :nodoc:
@property (nonatomic) BOOL isAccessibilityElement;
@end


/// FUISimpleCollectionViewCell is a variant of <code>UICollectionViewCell</code> defined in <code>SAPFiori</code>. It contains a <code>UIImageView</code> and a <code>UILabel</code>.
/// <h2>Code usage:</h2>
/// Implement collectionView(_:cellForItemAt:) dataSource method
/// \code
///
/// //Implement collectionView(_:cellForItemAt:) dataSource method
/// func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
///     let cell = collectionView.dequeueReusableCell(withReuseIdentifier: FUISimpleCollectionViewCell.reuseIdentifier, for: indexPath) as! FUISimpleCollectionViewCell
///
///     //configure cell
///     cell.contentImage = UIImage()
///     cell.titleText = "Title"
///
///     return cell
/// }
///
///
/// \endcodeCreate and assign a layout object to collection view
/// \code
///
/// let layout = UICollectionViewFlowLayout()
///
/// // Set any custom layout here.
/// layout.itemSize = CGSize(width: 126, height: 126)
/// layout.minimumInteritemSpacing = 10
/// layout.minimumLineSpacing = 10
///
/// // Sets the flow layout to CollectionView
/// collectionView.collectionViewLayout = layout
/// collectionView.dataSource = self
/// collectionView.register(FUISimpleCollectionViewCell.self, forCellWithReuseIdentifier: FUISimpleCollectionViewCell.reuseIdentifier)
///
///
/// \endcode
SWIFT_CLASS("_TtC8SAPFiori27FUISimpleCollectionViewCell")
@interface FUISimpleCollectionViewCell : FUIBaseCollectionViewCell
/// Reuse identifier
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull reuseIdentifier;)
+ (NSString * _Nonnull)reuseIdentifier SWIFT_WARN_UNUSED_RESULT;
/// Image view of <code>FUISimpleCollectionViewCell</code>.
@property (nonatomic, readonly, strong) IBOutlet UIImageView * _Null_unspecified contentImageView;
/// Label of <code>FUISimpleCollectionViewCell</code>.
@property (nonatomic, readonly, strong) IBOutlet UILabel * _Null_unspecified titleLabel;
/// Image of <code>FUISimpleCollectionViewCell</code>
@property (nonatomic, strong) UIImage * _Nullable contentImage;
/// Title of <code>FUISimpleCollectionViewCell</code>
@property (nonatomic, copy) NSString * _Nullable titleText;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)prepareForReuse;
/// :nodoc:
- (UIView * _Nullable)hitTest:(CGPoint)point withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
@property (nonatomic, copy) NSArray * _Nullable accessibilityElements;
/// :nodoc:
- (NSInteger)accessibilityElementCount SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (id _Nullable)accessibilityElementAtIndex:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (NSInteger)indexOfAccessibilityElement:(id _Nonnull)element SWIFT_WARN_UNUSED_RESULT;
@end


/// A variant of <code>UICollectionViewCell</code> which is very similar to <code>SimplePropertyFormCell</code> except that it’s not editable.
/// <ul>
///   <li>
///     <code>keyName</code>: The key of the cell.
///   </li>
///   <li>
///     <code>value</code>: The value of the cell.
///   </li>
/// </ul>
/// <h2>Code usage:</h2>
/// Register <code>FUISimplePropertyCollectionViewCell</code> for a collection view object.
/// \code
/// self.collectionView.register(FUISimplePropertyCollectionViewCell.self, forCellWithReuseIdentifier: FUISimplePropertyCollectionViewCell.reuseIdentifier)
///
/// \endcodeDequeue a <code>FUISimplePropertyCollectionViewCell</code> object from a collection view’s dataSource method <code>collectionView(_:cellForItemAt:)</code>
/// \code
/// public func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
///     let cell = self.collectionView.dequeueReusableCell(withReuseIdentifier: FUISimplePropertyCollectionViewCell.reuseIdentifier, for: indexPath) as! FUISimplePropertyCollectionViewCell
///
///     switch indexPath.item {
///         case 0:
///         cell.keyName = "Name"
///         cell.value = "Broken Plates on Pole"
///         case 1:
///         cell.keyName = "Sort No."
///         cell.value = "0001"
///         default:
///         break
///     }
///
///     return cell
/// }
///
/// \endcode
SWIFT_CLASS("_TtC8SAPFiori35FUISimplePropertyCollectionViewCell")
@interface FUISimplePropertyCollectionViewCell : FUIBaseCollectionViewCell
/// The <code>UILabel</code> holds the key name string.
@property (nonatomic, readonly, weak) IBOutlet UILabel * _Null_unspecified keyLabel;
/// The <code>UITextField</code> holds the value string.
@property (nonatomic, readonly, weak) IBOutlet UITextField * _Null_unspecified valueTextField;
/// The default cell reuse identifier.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull reuseIdentifier;)
+ (NSString * _Nonnull)reuseIdentifier SWIFT_WARN_UNUSED_RESULT;
/// The value of the property.
@property (nonatomic, copy) NSString * _Nullable value;
/// The key name of the cell.
@property (nonatomic, copy) NSString * _Nullable keyName;
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
@property (nonatomic, copy) NSArray * _Nullable accessibilityElements;
/// :nodoc:
- (NSInteger)accessibilityElementCount SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (id _Nullable)accessibilityElementAtIndex:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (NSInteger)indexOfAccessibilityElement:(id _Nonnull)element SWIFT_WARN_UNUSED_RESULT;
@end


/// The reusable UI component implemented as an <code>UITableViewCell</code> to display or edit a key-value pair property.
/// <img src="../ReadmeImages/FK_SimplePropCellAnnotations.png?raw=true" alt="FUISimplePropertyFormCell" width="376">
/// The developer should set the following properties on the cell, in their implementation of <code>UITableViewDataSource</code> <code>cellForRow(at:)</code> function:
/// <ul>
///   <li>
///     <code>keyName</code>: The key name of the property.
///   </li>
///   <li>
///     <code>value</code>: The value of the property.
///   </li>
/// </ul>
/// And an <code>onChangeHandler</code>:
/// <ul>
///   <li>
///     <code>onChangeHandler</code>: a handler closure, which is invoked on changes to the value
///   </li>
/// </ul>
/// Optionally, the developer may provide
/// <ul>
///   <li>
///     <code>isEditable</code>: Indicates if the cell’s value may be modified.  Defaults to <code>true</code>.
///   </li>
/// </ul>
/// The following is an example of usage in an application <code>UITableViewController</code>:
/// important:
/// The app’s <code>UITableViewController</code> must subclass <code>FUIFormTableViewController</code>
/// \code
/// override func viewDidLoad() {
///    super.viewDidLoad()
///    self.tableView.register(FUISimplePropertyFormCell.self, forCellReuseIdentifier: FUISimplePropertyFormCell.reuseIdentifier)
/// }
///
/// override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
///    let cell = tableView.dequeueReusableCell(withIdentifier: FUISimplePropertyFormCell.reuseIdentifier, for: indexPath) as! FUISimplePropertyFormCell
///
///    cell.keyName = "Editable"
///    cell.value = myObject.productName
///    
///    // MARK:  implement onChangeHandler
///    cell.onChangeHandler = { newValue in
///        myObject.productName = newValue
///    }
///
///    return cell
/// }
///
/// \endcode
SWIFT_CLASS("_TtC8SAPFiori25FUISimplePropertyFormCell")
@interface FUISimplePropertyFormCell : FUIInlineValidationTableViewCell
/// The default cell reuse identifier.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull reuseIdentifier;)
+ (NSString * _Nonnull)reuseIdentifier SWIFT_WARN_UNUSED_RESULT;
/// The value of the property.
@property (nonatomic, copy) NSString * _Nonnull value;
/// Implementation of change handler.  Is invoked on changes to the <code>value</code> property.
@property (nonatomic, copy) void (^ _Nullable onChangeHandler)(NSString * _Nonnull);
/// Indicates if the value of the cell could be changed or not.
/// For <code>FUISimplePropertyFormCell</code> this property is always false.
@property (nonatomic) BOOL isEditable;
/// The key name of the property.
@property (nonatomic, copy) NSString * _Nullable keyName;
/// The <code>UILabel</code> holds the key name string.
@property (nonatomic, readonly, weak) IBOutlet UILabel * _Null_unspecified keyLabel;
/// The <code>UITextField</code> holds the value string.
@property (nonatomic, readonly, weak) IBOutlet UITextField * _Null_unspecified valueTextField;
/// If <code>isTrackingLiveChanges == true</code>, then <code>onChangeHandler</code> will be invoked for every letter entered.
/// Otherwise, <code>onChangeHandler</code> will be invoked only after
/// user taps “Done” key, or the field resigns first responder.
/// Defaults to <code>false</code>.
@property (nonatomic) BOOL isTrackingLiveChanges;
/// The placeholder text for the value text field.
@property (nonatomic, copy) NSString * _Nullable placeholderText;
/// :nodoc:
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (BOOL)resignFirstResponder SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)prepareForReuse;
/// :nodoc:
@property (nonatomic, copy) NSArray * _Nullable accessibilityElements;
/// :nodoc:
- (NSInteger)accessibilityElementCount SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (id _Nullable)accessibilityElementAtIndex:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (NSInteger)indexOfAccessibilityElement:(id _Nonnull)element SWIFT_WARN_UNUSED_RESULT;
@end

@class NSUnit;
@class NSMeasurementFormatter;
@class UISlider;

/// A customized <code>UITableViewCell</code>, which contains a <code>UILabel</code>, a <code>UITextField</code> and a <code>UISlider</code>. It allows users to select a single value from a continuous range of values.
/// <img src="../ReadmeImages/FK_SliderFormCellAnnotations.png?raw=true" alt="FUISliderFormCell" width="376">
/// The developer should set the following properties on the cell, in their implementation of <code>UITableViewDataSource</code> <code>cellForRow(at:)</code> function:
/// <ul>
///   <li>
///     <code>keyName</code>: The key name of the property
///   </li>
///   <li>
///     <code>value</code>: The value of the property, as <code>Float</code>
///   </li>
///   <li>
///     <code>minimumValue</code>: The minimum value of the selection range.
///   </li>
///   <li>
///     <code>maximumValue</code>: The maximum value of the selection range.
///   </li>
/// </ul>
/// And an <code>onChangeHandler</code>:
/// <ul>
///   <li>
///     <code>onChangeHandler</code>: a handler closure, which is invoked on changes to the value.
///   </li>
/// </ul>
/// Optionally, the developer may set
/// <ul>
///   <li>
///     <code>unit</code>: The unit of value. Default is <code>mi</code>.
///   </li>
///   <li>
///     <code>isEditable</code>: Indicates if the cell’s value may be modified.  Defaults to <code>true</code>.
///   </li>
/// </ul>
/// The following is an example of usage in an application <code>UITableViewController</code>:
/// important:
/// The app’s <code>UITableViewController</code> must subclass <code>FUIFormTableViewController</code>
/// \code
/// override func viewDidLoad() {
///     super.viewDidLoad()
///     self.tableView.register(FUISliderFormCell, forCellReuseIdentifier: FUISliderFormCell.reuseIdentifier)
///     // ...
/// }
///
/// override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
///
///     let cell = tableView.dequeueReusableCell(withIdentifier: FUISliderFormCell.reuseIdentifier, for: indexPath) as! FUISliderFormCell
///     cell.keyName = "Distance"
///     cell.minimumValue = 0
///     cell.maximumValue = 30
///     cell.value = myObject.distance
///
///     // MARK:  implement an onChangeHandler
///     cell.onChangeHandler = { newValue in
///         self.myObject.distance = newValue
///     }
///
///     return cell
/// }
///
/// \endcode
SWIFT_CLASS("_TtC8SAPFiori17FUISliderFormCell")
@interface FUISliderFormCell : FUIInlineValidationTableViewCell
/// The default cell reuse identifier.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull reuseIdentifier;)
+ (NSString * _Nonnull)reuseIdentifier SWIFT_WARN_UNUSED_RESULT;
/// The value of the property.
@property (nonatomic) float value;
/// Implementation of change handler.  Is invoked on changes to the <code>value</code> property.
@property (nonatomic, copy) void (^ _Nullable onChangeHandler)(float);
/// Indicates if the value of the cell could be changed or not. Default value is true.
@property (nonatomic) BOOL isEditable;
/// The key name of the property.
@property (nonatomic, copy) NSString * _Nullable keyName;
/// The unit of measure for value. Default value is <code>UnitLength.miles</code>.
@property (nonatomic, strong) NSUnit * _Nonnull unit;
@property (nonatomic, readonly, strong) NSMeasurementFormatter * _Nonnull formatter;
/// The <code>UILabel</code> holds the key name string.
@property (nonatomic, readonly, weak) IBOutlet UILabel * _Null_unspecified keyLabel;
/// The <code>UITextField</code> holds the value string.
@property (nonatomic, readonly, weak) IBOutlet UITextField * _Null_unspecified valueTextField;
/// The <code>UISlider</code> of the cell.
@property (nonatomic, readonly, weak) IBOutlet UISlider * _Null_unspecified slider;
/// The maximum value of the slider.
@property (nonatomic) float maximumValue;
/// The minimum value of the slider.
@property (nonatomic) float minimumValue;
/// :nodoc:
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)prepareForReuse;
@end


@class UISwitch;

/// The reusable UI component implemented as an <code>UITableViewCell</code> to allow user to choose a boolean value using a switch for a property.
/// <img src="../ReadmeImages/FK_SwitchCellAnnotations.png?raw=true" alt="FUISwitchFormCell" width="376">
/// The developer should set the following properties on the cell, in their implementation of <code>UITableViewDataSource</code> <code>cellForRow(at:)</code> function:
/// <ul>
///   <li>
///     <code>keyName</code>: The key name of the property
///   </li>
///   <li>
///     <code>value</code>: The value of the property, as <code>Bool</code>
///   </li>
///   <li>
///     <code>isEditable</code>: Indicates if the cell’s value may be modified.  Defaults to <code>true</code>.
///   </li>
/// </ul>
/// And, an <code>onChangeHandler</code>:
/// <ul>
///   <li>
///     <code>onChangeHandler</code>: a handler closure, which is invoked on changes to the value
///   </li>
/// </ul>
/// The following is an example of usage in an application <code>UITableViewController</code>:
/// important:
/// The app’s <code>UITableViewController</code> must subclass <code>FUIFormTableViewController</code>
/// \code
/// override func viewDidLoad() {
///   super.viewDidLoad()
///   self.tableView.register(FUISwitchFormCell.self, forCellReuseIdentifier: FUISwitchFormCell.reuseIdentifier)
///   // ...
/// }
///
/// override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
///   // ...
///   let cell = tableView.dequeueReusableCell(withIdentifier: FUISwitchFormCell.reuseIdentifier, for: indexPath) as! FUISwitchFormCell
///   cell.keyName = "Confirmed"
///   cell.value = myObject.isConfirmed
///   
///   // MARK:  implement onChangeHandler
///   cell.onChangeHandler = { newValue in
///       myObject.isConfirmed = newValue
///   }
///
///   return cell
/// }
///
///
/// \endcode
SWIFT_CLASS("_TtC8SAPFiori17FUISwitchFormCell")
@interface FUISwitchFormCell : FUIInlineValidationTableViewCell
/// The default cell reuse identifier.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull reuseIdentifier;)
+ (NSString * _Nonnull)reuseIdentifier SWIFT_WARN_UNUSED_RESULT;
/// The value of the property. Default to be false.
@property (nonatomic) BOOL value;
/// Implementation of change handler.  Is invoked on changes to the <code>value</code> property.
@property (nonatomic, copy) void (^ _Nullable onChangeHandler)(BOOL);
/// Indicates if the value of the cell could be changed or not.
/// The default is true.
@property (nonatomic) BOOL isEditable;
/// The key name of the property.
@property (nonatomic, copy) NSString * _Nullable keyName;
/// The <code>UILable</code> displaying the key name field.
@property (nonatomic, readonly, weak) IBOutlet UILabel * _Null_unspecified keyLabel;
/// The <code>UISwitch</code> displaying the boolean value.
@property (nonatomic, readonly, strong) IBOutlet UISwitch * _Null_unspecified switchView;
/// :nodoc:
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)prepareForReuse;
/// :nodoc:
- (void)valueChanged:(UISwitch * _Nonnull)sender;
/// :nodoc:
@property (nonatomic, copy) NSArray * _Nullable accessibilityElements;
/// :nodoc:
- (NSInteger)accessibilityElementCount SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (id _Nullable)accessibilityElementAtIndex:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (NSInteger)indexOfAccessibilityElement:(id _Nonnull)element SWIFT_WARN_UNUSED_RESULT;
@end


/// <code>NibDesignableProtocol</code>-compliant implementation of <code>UITableViewHeaderFooterView</code>
/// <h2>See also</h2>
/// <code>NibDesignableProtocol</code>
SWIFT_CLASS("_TtC8SAPFiori38NibDesignableTableViewHeaderFooterView")
@interface NibDesignableTableViewHeaderFooterView : UITableViewHeaderFooterView
/// :nodoc:
@property (nonatomic, readonly, strong) UIView * _Nonnull nibContainerView;
/// :nodoc:
- (nonnull instancetype)initWithReuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// <code>UITableViewHeaderFooterView</code> reusable view for headers and footers.
/// The <code>UITableViewHeaderFooterView</code> has two style options:  <code>.title</code>, and <code>.attribute</code>.
/// In <code>.title</code> style, only the <code>titleLabel</code> is displayed.
/// In <code>.attribute</code> style, the <code>titleLabel</code> is displayed, and the <code>attributeLabel</code> may also be displayed.  Also, in <code>.attribute</code> style, the disclosure indicator is displayed by default.
SWIFT_CLASS("_TtC8SAPFiori28FUITableViewHeaderFooterView")
@interface FUITableViewHeaderFooterView : NibDesignableTableViewHeaderFooterView
/// Reuse identifier
///
/// returns:
/// String a reuse identifier that describes FUITableViewHeaderFooterView
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull reuseIdentifier;)
+ (NSString * _Nonnull)reuseIdentifier SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nonnull instancetype)initWithReuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
@property (nonatomic, readonly) Class _Nonnull nibLoadingClass;
/// :nodoc:
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
/// <code>UILabel</code> for title content.  Visible in all styles.
@property (nonatomic, readonly, strong) UILabel * _Nonnull titleLabel;
/// <code>UILabel</code> for attribute content.  Hidden by default, in <code>.title</code> style.
@property (nonatomic, readonly, strong) UILabel * _Nonnull attributeLabel;
/// <code>Bool</code> flag, to set whether disclosure indicator is visible.  Hidden by default, in <code>.title</code> style.
@property (nonatomic) BOOL isDisclosureAccessoryHidden;
/// Optional handler, to respond to tap events on the view.
@property (nonatomic, copy) void (^ _Nullable didSelectHandler)(void);
/// Clear spacing preserved above the view.  Should be used to set header spacing, when the table view’s header height is <code>UITableViewAutomaticDimension</code>.
@property (nonatomic) CGFloat topPadding;
/// Clear spacing preserved below the view.  Should be used to set footer spacing, when the table view’s footer height is <code>UITableViewAutomaticDimension</code>.
@property (nonatomic) CGFloat bottomPadding;
@property (nonatomic, readonly, strong) IBOutlet UIView * _Null_unspecified topSeparator;
@property (nonatomic, readonly, strong) IBOutlet UIView * _Null_unspecified bottomSeparator;
/// The set of edges of the view, which should display a separator line.
/// Defaults to <code>.none</code>.
/// important:
/// Only top and bottom edges support separator lines.  Options <code>.left</code> and <code>.right</code> will be ignored.
/// \code
/// view.separators = .top
///
/// \endcode
@property (nonatomic) UIRectEdge separators;
/// :nodoc:
- (void)prepareForReuse;
/// :nodoc:
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
/// :nodoc:
- (void)touchesEnded:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
/// :nodoc:
- (void)touchesCancelled:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
@end


/// <code>FUITag</code> is an enhanced <code>FUILabel</code> that applies Fiori Design tag color schemes to the label by default.
/// <h2>Usage</h2>
/// <ul>
///   <li>
///     Initializing programmatically:
///   </li>
/// </ul>
/// \code
///
/// let tag = FUITag(title: "Tag1")
///
///
/// \endcode<ul>
///   <li>
///     Placing inside a Storyboard or xib:
///   </li>
/// </ul>
/// <ol>
///   <li>
///     Drag and drop an <code>UILabel</code> component to Interface Builder canvas.
///   </li>
///   <li>
///     Switch class name from <code>UILabel</code> to <code>FUITag</code>, and set module to <code>SAPFiori</code>.
///   </li>
/// </ol>
SWIFT_CLASS("_TtC8SAPFiori6FUITag")
@interface FUITag : FUILabel
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end


@class NSTextContainer;
@class NSAttributedString;

/// The <code>FUITextView</code> class extends <code>UITextView</code>, to support displaying a styled placeholder text string when the <code>text</code> property is empty.
/// The class replaces the open-source <code>SZTextView</code> class, used in <em>version 1.0</em>.
SWIFT_CLASS("_TtC8SAPFiori11FUITextView")
@interface FUITextView : UITextView
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame textContainer:(NSTextContainer * _Nullable)textContainer OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// The text displayed by the text view.
@property (nonatomic, copy) NSString * _Null_unspecified text;
/// The styled text displayed by the text view
@property (nonatomic, strong) NSAttributedString * _Null_unspecified attributedText;
/// The placeholder text displayed by the text view, when the <code>text</code> value is empty.
@property (nonatomic, copy) NSString * _Nullable placeholder;
/// The styled placeholder text displayed by the text view, when the <code>text</code> value is empty.
@property (nonatomic, strong) NSAttributedString * _Nullable attributedPlaceholder;
/// The color of the <code>placeholder</code> text displayed in the text view.
/// This property applies to the entire <code>placeholder</code> text string.  The default color is <code>UIColor.preferredFioriColor(forStyle: .primary4)</code>.
/// Assigning a new value to this property will update attributes of the entire <code>attributedPlaceholder</code> string.  If you want to apply the color to only a portion of the placeholder, you must create a new attributed string with the desired style information and assign it to the <code>attributedPlaceholder</code> property.
@property (nonatomic, strong) UIColor * _Nonnull placeholderTextColor;
/// Obsolete property from open-source component <code>SZTextView</code>, kept for API backwards-compatibility.
/// <em>Setting this property has no effect on the view</em>
@property (nonatomic) double fadeTime;
/// :nodoc:
- (BOOL)becomeFirstResponder SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (BOOL)resignFirstResponder SWIFT_WARN_UNUSED_RESULT;
@end

@class UITextPosition;

/// :nodoc:
SWIFT_CLASS("_TtC8SAPFiori14FUITextViewExt")
@interface FUITextViewExt : FUITextView
/// :nodoc:
- (BOOL)becomeFirstResponder SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (CGRect)caretRectForPosition:(UITextPosition * _Nonnull)position SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(CGRect)frame textContainer:(NSTextContainer * _Nullable)textContainer OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// <code>FUITimelineCell</code> is a <code>UITableViewCell</code> subclass, designed to present a business object related to an event, in a Timeline view.
/// <img src="../ReadmeImages/TimelineCellAnnotation.png?raw=true" alt="FUITimelineCell"\>
/// <ul>
///   <li>
///     <code>FUITimelineCell</code> is a selectable cell intended for timelines that require open and complete status that displays timeline details.  Selecting the cell changes the card background color to the framework-preferred color: <code>FUIColorStyle.line</code>.
///   </li>
///   <li>
///     It uses a vertical line and <code>nodeImageView</code> as a separator. Left to the vertical line is the timeline event stack view that contains <code>eventLabel</code> and <code>eventImageView</code>; right to the vertical line is the main stack view that contains <code>headlineLabel</code> and <code>subheadlineLabel</code>.
///   </li>
///   <li>
///     Below the main view is an attribute stack view with <code>attributeLabel</code> and <code>subAttributeLabel</code> layed out horizontally.
///   </li>
///   <li>
///     To the right of the main view is a status view that contains <code>statusLabel</code>, <code>statusImage</code>, <code>substatusLabel</code>, and <code>substatusImage</code> layed out vertically.
///   </li>
/// </ul>
/// <h2>Usage</h2>
/// \code
///
///    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
///        let cell = tableView.dequeueReusableCell(withIdentifier: "FUITimelineCell", for: indexPath) as! FUITimelineCell
///        cell.headlineText = "Planned Downtime Period Identified"
///        cell.subheadlineText = "Work Package"
///        cell.nodeImage = FUITimelineNode.open
///        cell.eventText = "9:45\nAM"
///        cell.eventImage = #imageLiteral(resourceName: "rain")
///        cell.statusImage = #imageLiteral(resourceName: "ErrorIcon")
///        cell.subStatusText = "Active"
///        return cell
///    }
///
///
/// \endcode<h2>Notes</h2>
/// <h4>SingleLine Sepatator Between Timeline Items in the Table</h4>
/// Tableview’s default <code>separatorStyle</code> is <code>.singleLine</code>.  Because of this default setting, there can be a 1.0 px divider line or a separator in-between each item on the timeline in the table.  This is not an issue in timeline.  To get rid of the separator, set <code>separatorStyle</code> to <code>none</code> in the TabelViewController class
/// \code
///
///    override func viewDidLoad() {
///        super.viewDidLoad()
///        //...
///        self.tableView.separatorStyle = .none
///        //...
///    }
///
///
/// \endcode
SWIFT_CLASS("_TtC8SAPFiori15FUITimelineCell")
@interface FUITimelineCell : NibDesignableFUIBaseTableViewCell
/// Reuse identifier
/// @return String a reuse identifier that describes FUITimelineCell
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull reuseIdentifier;)
+ (NSString * _Nonnull)reuseIdentifier SWIFT_WARN_UNUSED_RESULT;
/// A headline label in the main view.
/// important:
///
/// Use the <code>@IBInspectable</code> <code>headlineText</code> property to set the label’s text value
@property (nonatomic, readonly, strong) IBOutlet FUILabel * _Null_unspecified headlineLabel;
/// A subheadline label in the main view.
/// important:
///
/// Use the <code>@IBInspectable</code> <code>subheadlineText</code> property to set the label’s text value
@property (nonatomic, readonly, strong) IBOutlet FUILabel * _Null_unspecified subheadlineLabel;
/// A status label in the status stack view.
/// important:
///
/// Use the <code>@IBInspectable</code> <code>statusText</code> property to set the label’s text value
@property (nonatomic, readonly, strong) IBOutlet FUILabel * _Null_unspecified statusLabel;
/// A substatus label in the status stack view.
/// important:
///
/// Use the <code>@IBInspectable</code> <code>substatusText</code> property to set the label’s text value
@property (nonatomic, readonly, strong) IBOutlet FUILabel * _Null_unspecified subStatusLabel;
/// A status image view in the status stack view.
/// important:
///
/// Use the <code>@IBInspectable</code> <code>statusImage</code> property to set the image view’s image value
@property (nonatomic, readonly, strong) IBOutlet FUIImageView * _Null_unspecified statusImageView;
/// A substatus image view in the status stack view.
/// important:
///
/// Use the <code>@IBInspectable</code> <code>substatusImage</code> property to set the image view’s image value
@property (nonatomic, readonly, strong) IBOutlet FUIImageView * _Null_unspecified subStatusImageView;
/// A event label in the cell’s left column.
/// important:
///
/// Use the <code>@IBInspectable</code> <code>eventText</code> property to set the label’s text value
@property (nonatomic, readonly, strong) IBOutlet FUILabel * _Null_unspecified eventLabel;
/// A event image view in the cell’s left column.
/// important:
///
/// Use the <code>@IBInspectable</code> <code>eventImage</code> property to set the image view’s image value
@property (nonatomic, readonly, strong) IBOutlet FUIImageView * _Null_unspecified eventImageView;
/// A node image view, centered on the cell’s vertical timeline line.
/// remark:
/// Use <code>FUITimelineNode</code> static properties, to return standard Fiori Design Language node images
@property (nonatomic, readonly, strong) IBOutlet FUIImageView * _Null_unspecified nodeImageView;
/// A attribute label in the footer horizontal stack view.
/// important:
///
/// Use the <code>@IBInspectable</code> <code>attributeText</code> property to set the label’s text value
@property (nonatomic, readonly, strong) IBOutlet FUILabel * _Null_unspecified attributeLabel;
/// A subAttribute label in the footer horizontal stack view.
/// important:
///
/// Use the <code>@IBInspectable</code> <code>subAttributeText</code> property to set the label’s text value
@property (nonatomic, readonly, strong) IBOutlet FUILabel * _Null_unspecified subAttributeLabel;
/// :nodoc:
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Property defining the headline text.  An empty string value hides the headlineLabel
@property (nonatomic, copy) NSString * _Nullable headlineText;
/// Property defining the subheadline text.  An empty string value hides the subheadlineLabel
@property (nonatomic, copy) NSString * _Nullable subheadlineText;
/// Property defining the <code>statusLabel.text</code> value.  An empty string value hides the <code>statusLabel</code>.
/// important:
///
/// The <code>statusLabel</code> and <code>statusImageView</code> may not be displayed simultaneously.  When values exist for both <code>statusText</code> and <code>statusImage</code>, the last value set will be used.
@property (nonatomic, copy) NSString * _Nullable statusText;
/// Property defining the substatusLabel text.  An empty string value hides the subStatusLabel.  It’s expected to either set subStatusLabel or substatusImage to display either one as the same position.
@property (nonatomic, copy) NSString * _Nullable subStatusText;
/// Property defining the statusImageView image.  An empty value hides the statusImageView.  It’s expected to either set statusText or statusImage to display either one as the same position.  When both statusText and statusImage is not set, the substatusLabel or substatusImage takes statusLable/statusImage’s position.
@property (nonatomic, strong) UIImage * _Nullable statusImage;
/// Property defining the substatusImageView image.  An empty value hides the substatusImageView.  It’s expected to either set substatusText or substatusImage to display either one as the same position.
@property (nonatomic, strong) UIImage * _Nullable subStatusImage;
/// Property defining the eventLabel text.  An empty value hides the eventLabel
@property (nonatomic, copy) NSString * _Nullable eventText;
/// Property defining the eventImageView image. An empty value hides the eventImageView
@property (nonatomic, strong) UIImage * _Nullable eventImage;
/// Property defining the node image.  Check with <code>FUITimelineNode</code> for a list of possible node images for different timeline status
@property (nonatomic, strong) UIImage * _Nullable nodeImage;
/// Property defining the timeline width, which is the width of the whole event view left to the veritical line in the cell.  The default width is <code>83.0</code> px
@property (nonatomic) CGFloat timelineWidth;
/// Property defining the attributeLabel text.  An empty value hides attributeLabel and subAttributeLabel text gets displayed at the original attributeLabel position.
@property (nonatomic, copy) NSString * _Nullable attributeText;
/// Property defining the subAttributeLabel text.  An empty value hides subAttributeLabel.
@property (nonatomic, copy) NSString * _Nullable subAttributeText;
/// :nodoc:
- (void)prepareForInterfaceBuilder;
/// :nodoc:
- (void)prepareForReuse;
/// :nodoc:
- (void)setSelected:(BOOL)selected animated:(BOOL)animated;
/// :nodoc:
- (void)setHighlighted:(BOOL)highlighted animated:(BOOL)animated;
/// :nodoc:
- (void)layoutSubviews;
/// :nodoc:
@property (nonatomic, copy) NSArray * _Nullable accessibilityElements;
/// :nodoc:
- (NSInteger)accessibilityElementCount SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (id _Nullable)accessibilityElementAtIndex:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (NSInteger)indexOfAccessibilityElement:(id _Nonnull)element SWIFT_WARN_UNUSED_RESULT;
@end


/// <code>FUITimelineMarkerCell</code> is a <code>UITableViewCell</code> subclass, designed to present a business object related to an event, in a Timeline view.
/// <img src="../ReadmeImages/TimelineMarkerCellAnnotation.png?raw=true" alt="FUITimelineMarkerCell"\>
/// <ul>
///   <li>
///     <code>FUITimelineMarkerCell</code> is a non-selectable with <code>selectionStyle</code> set to <code>.none</code> that is intended for timelines with start, inactive, early end, and end status that display timeline information.
///   </li>
///   <li>
///     It uses a vertical line and a node image as a separator. Left to the vertical line is the timeline event section that contains <code>eventLabel</code> and <code>eventImageView</code>; right to the vertical line is <code>titleLabel</code>.
///   </li>
///   <li>
///     The vertical line contains <code>leadingTimeline</code> on the top, <code>nodeImageView</code> in the middle, and a <code>trailingTimeline</code> at the bottom.
///   </li>
/// </ul>
/// <h2>Usage</h2>
/// \code
///
///    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
///        let cell = tableView.dequeueReusableCell(withIdentifier: "FUITimelineMarkerCell", for: indexPath) as! FUITimelineMarkerCell
///        cell.titleText = "Project Start"
///        cell.nodeImage = FUITimelineNode.start
///        cell.eventText = "12/6/15"
///        cell.showLeadingTimeline = false
///        return cell
///    }
///
///
/// \endcode<h2>Notes</h2>
/// <h4>SingleLine Sepatator Between Timeline Items in the Table</h4>
/// Tableview’s default <code>separatorStyle</code> is <code>.singleLine</code>.  Because of this default setting, there can be a 1.0 px divider line or a separator in-between each item on the timeline in the table.  This is not an issue in timeline.  To get rid of the separator, set <code>separatorStyle</code> to <code>none</code> in the TabelViewController class
/// \code
///
///     override func viewDidLoad() {
///     super.viewDidLoad()
///     // ...
///     self.tableView.separatorStyle = .none
///     // ...
/// }
///
///
/// \endcode
SWIFT_CLASS("_TtC8SAPFiori21FUITimelineMarkerCell")
@interface FUITimelineMarkerCell : NibDesignableFUIBaseTableViewCell
/// Reuse identifier
/// @return String a reuse identifier that describes FUITimelineMarkerCell
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull reuseIdentifier;)
+ (NSString * _Nonnull)reuseIdentifier SWIFT_WARN_UNUSED_RESULT;
/// A title label in the main view.
/// important:
///
/// Use the <code>@IBInspectable</code> <code>titleText</code> property to set the label’s text value
@property (nonatomic, readonly, strong) IBOutlet FUILabel * _Null_unspecified titleLabel;
/// A event label in the cell’s left column.
/// important:
///
/// Use the <code>@IBInspectable</code> <code>eventText</code> property to set the label’s text value
@property (nonatomic, readonly, strong) IBOutlet FUILabel * _Null_unspecified eventLabel;
/// A event image view in the cell’s left column.
/// important:
///
/// Use the <code>@IBInspectable</code> <code>eventImage</code> property to set the image view’s image value
@property (nonatomic, readonly, strong) IBOutlet FUIImageView * _Null_unspecified eventImageView;
/// A node image view, centered on the cell’s vertical timeline line.
/// remark:
/// Use <code>FUITimelineNode</code> static properties, to return standard Fiori Design Language node images.
@property (nonatomic, readonly, strong) IBOutlet FUIImageView * _Null_unspecified nodeImageView;
/// :nodoc:
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Property defining the titleLabel text.  An empty value hides titleLabel.
@property (nonatomic, copy) NSString * _Nullable titleText;
/// Property defining the eventLabel text.  An empty value hides the eventLabel
@property (nonatomic, copy) NSString * _Nullable eventText;
/// Property defining the eventImageView image. An empty value hides the eventImageView
@property (nonatomic, strong) UIImage * _Nullable eventImage;
/// Property defining the node image.  Check with <code>FUITimelineNode</code> for a list of possible node images for different timeline status.
@property (nonatomic, strong) UIImage * _Nullable nodeImage;
/// Property defining the timeline width, which is the width of the whole event view left to the veritical line in the cell.  The default width is <code>83.0</code> px
@property (nonatomic) CGFloat timelineWidth;
/// Property defining the flag to show or not to show timeline’s leading vertical line.  Default is true.
@property (nonatomic) BOOL showLeadingTimeline;
/// Property defining the flag to show or not to show timeline’s trailing vertical line.  Default is true.
@property (nonatomic) BOOL showTrailingTimeline;
/// :nodoc:
- (void)prepareForInterfaceBuilder;
/// :nodoc:
- (void)prepareForReuse;
/// :nodoc:
- (void)layoutSubviews;
/// :nodoc:
@property (nonatomic, copy) NSArray * _Nullable accessibilityElements;
/// :nodoc:
- (NSInteger)accessibilityElementCount SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (id _Nullable)accessibilityElementAtIndex:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (NSInteger)indexOfAccessibilityElement:(id _Nonnull)element SWIFT_WARN_UNUSED_RESULT;
@end


/// The reusable UI component implemented as an <code>UITableViewCell</code> to allow user to enter a value, using a <code>UITextField</code>.
/// <img src="../ReadmeImages/FK_TitleCellAnnotations.png?raw=true" alt="FUITitleFormCell" width="376">
/// The developer should set the following properties on the cell, in their implementation of <code>UITableViewDataSource</code> <code>cellForRow(at:)</code> function:
/// <ul>
///   <li>
///     <code>value</code>: The value of the property, as <code>String</code>
///   </li>
/// </ul>
/// And an <code>onChangeHandler</code>:
/// <ul>
///   <li>
///     <code>onChangeHandler</code>: a handler closure, which is invoked on changes to the value
///   </li>
/// </ul>
/// Optionally, the developer may provide:
/// <ul>
///   <li>
///     <code>isEditable</code>: Indicates if the cell’s value may be modified.  Defaults to <code>true</code>.
///   </li>
/// </ul>
/// The following is an example of usage in an application <code>UITableViewController</code>:
/// important:
/// The app’s <code>UITableViewController</code> must subclass <code>FUIFormTableViewController</code>
/// \code
/// override func viewDidLoad() {
///   super.viewDidLoad()
///   self.tableView.register(FUITitleFormCell.self, forCellReuseIdentifier: FUITitleFormCell.reuseIdentifier)
///   // ...
/// }
///
/// override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
///   let cell = tableView.dequeueReusableCell(withIdentifier: FUITitleFormCell.reuseIdentifier, for: indexPath) as! FUITitleFormCell
///
///   cell.value = myObject.title
///   cell.isEditable = true
///
///   // MARK:  implement onChangeHandler
///   cell.onChangeHandler = { newValue in
///        myObject.title = newValue
///   }
///   return cell
/// }
///
///
/// \endcode
SWIFT_CLASS("_TtC8SAPFiori16FUITitleFormCell")
@interface FUITitleFormCell : FUIInlineValidationTableViewCell <UITextFieldDelegate>
/// The default cell reuse identifier.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull reuseIdentifier;)
+ (NSString * _Nonnull)reuseIdentifier SWIFT_WARN_UNUSED_RESULT;
/// The value for FUITitleFormCell is the text of the Title.
@property (nonatomic, copy) NSString * _Nonnull value;
/// Implementation of change handler.  Is invoked on changes to the <code>value</code> property.
@property (nonatomic, copy) void (^ _Nullable onChangeHandler)(NSString * _Nonnull);
/// Indicates if this title is editable or not.
/// The default is false.
@property (nonatomic) BOOL isEditable;
/// The UITextField to hold the title string.
@property (nonatomic, readonly, weak) IBOutlet FUITextField * _Null_unspecified valueTextField;
@property (nonatomic, readonly, weak) IBOutlet FUITextField * _Null_unspecified titleTextField;
/// This is the maximum length of the title text, if maxTitleTextLength is greater than 0.
/// If the text length reaches this limit, the user cannot enter more text.
/// Note: If the user pastes a string and the length plus
/// the current text length is greater than the limit, the insert
/// is rejected. Partial strings are not accepted in the text field.
/// The default value for maxTitleTextLength is 0, which means no limit.
@property (nonatomic) NSInteger maxTitleTextLength;
/// The type of the keyboard being used when the cell is in input mode.
@property (nonatomic) UIKeyboardType keyboardType;
/// If <code>isTrackingLiveChanges == true</code>, then <code>didChangeValue</code> function of <code>onChangeHandler</code>,
/// will be invoked for every letter entered.
/// Otherwise, <code>onChangeHandler</code> will be invoked only after
/// user taps “Done” key, or the field resigns first responder.
@property (nonatomic) BOOL isTrackingLiveChanges;
/// The placeholder text for the title text field.
@property (nonatomic, copy) NSString * _Nullable placeholderText;
/// :nodoc:
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (BOOL)resignFirstResponder SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)prepareForReuse;
/// :nodoc:
- (BOOL)textField:(UITextField * _Nonnull)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
@end

@class UIPickerView;

/// A customized <code>UITableViewCell</code>, which contains a <code>UILabel</code>, a <code>UITextField</code> and a <code>UIPickerView</code>. It allows users to select a single value from a set of options using a spinning wheel.
/// <img src="../ReadmeImages/FK_ValuePickerFormCellAnnotations.png?raw=true" alt="FUIValuePickerFormCell" width="376">
/// The developer should set the following properties on the cell, in their implementation of <code>UITableViewDataSource</code> <code>cellForRow(at:)</code> function:
/// <ul>
///   <li>
///     <code>keyName</code>: The key name of the property
///   </li>
///   <li>
///     <code>valueOptions</code>: A set of options that users can chose from.
///   </li>
///   <li>
///     <code>value</code>: The value of the property, as <code>Int</code>
///   </li>
/// </ul>
/// And an <code>onChangeHandler</code>:
/// <ul>
///   <li>
///     <code>onChangeHandler</code>: a handler closure, which is invoked on changes to the value.
///   </li>
/// </ul>
/// Optionally, the developer may set
/// <ul>
///   <li>
///     <code>isEditable</code>: Indicates if the cell’s value may be modified.  Defaults to <code>true</code>.
///   </li>
/// </ul>
/// The following is an example of usage in an application <code>UITableViewController</code>:
/// important:
/// The app’s <code>UITableViewController</code> must subclass <code>FUIFormTableViewController</code>
/// \code
/// override func viewDidLoad() {
/// super.viewDidLoad()
/// self.tableView.register(FUIValuePickerFormCell, forCellReuseIdentifier: FUIValuePickerFormCell.reuseIdentifier)
/// // ...
/// }
///
/// override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
///
/// let cell = tableView.dequeueReusableCell(withIdentifier: FUIValuePickerFormCell.reuseIdentifier, for: indexPath) as! FUIValuePickerFormCell
/// cell.keyName = "Maximum Price"
/// cell.valueOptions = ["5", "10", "15", "20", "25"]
/// cell.value = 0
///
/// // MARK:  implement an onChangeHandler
/// cell.onChangeHandler = { [unowned self] newValue in
/// self.myObject.price = self.priceTitles[newValue].first!.key
/// }
///
/// return cell
/// }
///
/// \endcode
SWIFT_CLASS("_TtC8SAPFiori22FUIValuePickerFormCell")
@interface FUIValuePickerFormCell : FUIInlineValidationTableViewCell <UIPickerViewDataSource, UIPickerViewDelegate>
/// The UILabel holds the key name string.
@property (nonatomic, readonly, weak) IBOutlet UILabel * _Null_unspecified keyLabel;
/// The UITextField holds the selected value strings.
@property (nonatomic, readonly, weak) IBOutlet UITextField * _Null_unspecified valueTextField;
/// The array of the valid options.
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull valueOptions;
/// The default cell reuse identifier.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull reuseIdentifier;)
+ (NSString * _Nonnull)reuseIdentifier SWIFT_WARN_UNUSED_RESULT;
/// The value of the cell.
@property (nonatomic) NSInteger value;
/// Implementation of change handler.  Is invoked on changes to the <code>value</code> property.
@property (nonatomic, copy) void (^ _Nullable onChangeHandler)(NSInteger);
/// Indicates if the value of the cell may be modified. Default value is true.
@property (nonatomic) BOOL isEditable;
/// If <code>isTrackingLiveChanges</code> is true, then <code>onChangeHandler</code>,
/// will be invoked whenever a value is selected.
/// Otherwise, <code>onChangeHandler</code> will be invoked only when
/// the Value Picker is closed.
/// The default value is <code>true</code>.
@property (nonatomic) BOOL isTrackingLiveChanges;
/// The key name of the cell.
@property (nonatomic, copy) NSString * _Nullable keyName;
/// :nodoc:
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (NSInteger)numberOfComponentsInPickerView:(UIPickerView * _Nonnull)pickerView SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (NSInteger)pickerView:(UIPickerView * _Nonnull)pickerView numberOfRowsInComponent:(NSInteger)component SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (NSString * _Nullable)pickerView:(UIPickerView * _Nonnull)pickerView titleForRow:(NSInteger)row forComponent:(NSInteger)component SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)pickerView:(UIPickerView * _Nonnull)pickerView didSelectRow:(NSInteger)row inComponent:(NSInteger)component;
/// :nodoc:
- (CGSize)systemLayoutSizeFittingSize:(CGSize)targetSize withHorizontalFittingPriority:(UILayoutPriority)horizontalFittingPriority verticalFittingPriority:(UILayoutPriority)verticalFittingPriority SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)prepareForReuse;
@end



/// This protocol provides method for handling button actions on a FUIWelcomeScreen view.
SWIFT_PROTOCOL("_TtP8SAPFiori28FUIWelcomeControllerDelegate_")
@protocol FUIWelcomeControllerDelegate
@optional
/// Handling <code>primaryActionButton</code> touch up inside action on a FUIWelcomeScreen view for <code>state</code> is <code>.notConfigured</code> and <code>configurationOptions</code> is <code>[.discoveryService, barcodeScanner]</code>.
/// <ul>
///   <li>
///     _: FUIWelcomeController instance
///   </li>
/// </ul>
/// \param willNavigateToActivationScreen FUIActivationScreen instance
///
- (void)welcomeController:(FUIWelcomeController * _Nonnull)welcomeController willNavigateToActivationScreen:(FUIActivationScreen * _Nonnull)activationScreen;
/// Handling <code>primaryActionButton</code> touch up inside action on a FUIWelcomeScreen view for <code>state</code> is <code>.notConfigured</code> and <code>configurationOptions</code> is <code>.discoveryService</code>.
/// <ul>
///   <li>
///     _: FUIWelcomeController instance
///   </li>
/// </ul>
/// \param shouldTryUserEmail user email enterred
///
- (void)welcomeController:(FUIWelcomeController * _Nonnull)welcomeController shouldTryUserEmail:(NSString * _Nonnull)userEmail;
/// Handling <code>primaryActionButton</code> touch up inside action on a FUIWelcomeScreen view for <code>state</code> is <code>.notConfigured</code> and <code>configurationOptions</code> is <code>.barcodeScanner</code>.
/// <ul>
///   <li>
///     _: FUIWelcomeController instance
///   </li>
/// </ul>
/// \param willNavigateToScannerScreen FUIOnboardingScanViewController instance
///
- (void)welcomeController:(FUIWelcomeController * _Nonnull)welcomeController willNavigateToScannerScreen:(FUIOnboardingScanViewController * _Nonnull)scanController;
/// Handling <code>footnoteActionButton</code> touch up inside action on a FUIWelcomeScreen view for <code>state</code> is <code>.notConfigured</code> with any <code>configurationOptions</code> vaule set.
/// <ul>
///   <li>
///     _: FUIWelcomeController instance
///   </li>
/// </ul>
- (void)didSelectDemoMode:(FUIWelcomeController * _Nonnull)welcomeController;
/// Handling primaryActionButton touch up inside action on a FUIWelcomeScreen view for <code>state</code> is <code>.isConfigured</code>.
/// <ul>
///   <li>
///     _: FUIWelcomeController instance
///   </li>
/// </ul>
- (void)shouldContinueUserOnboarding:(FUIWelcomeController * _Nonnull)welcomeController;
@end


/// This <code>UIViewController</code> is used to display a welcome/launch screen to the application for onboarding.  The screen mainly displays the application name, instructions on how to start the activation process and an option to trigger the demo mode of the application.  There are two versions of the launch screen.  Version 1 does not have sign in.  Version 2 has a sign in with an additional <code>Activate</code> button for activation process.
/// <img src="../ReadmeImages/WelcomeScreenAnnotations.png?raw=true" alt="FUIWelcomeScreen"\>
/// Application can implement the <code>FUIWelcomeControllerDelegate</code> protocol, to present the demo mode of the application by adopting with the <code>didSelectDemoMode(_:)</code> function, to proceed sign in by implementing the <code>shouldContinueUserOnboarding(_:)</code> function, to proceed configuration based on the configuration options by implementing the <code>welcomeController(_:willNavigateToActivationScreen:)</code>, <code>welcomeController(_:shouldTryUserEmail:)</code>, or <code>welcomeController(_:willNavigateToScannerScreen:)</code> functions.
/// <code>FUIWelcomeScreen</code> is implemented in <code>FUIWelcomeScreen.storyboard</code>.  There are two ways to launch the screen:
/// <ul>
///   <li>
///     Use another story board and use a <code>Present Modally</code> segue to <code>FUIWelcomeScreen</code> storyboard in <code>SAPFiori</code> framework with <code>com.sap.cp.sdk.ios.SAPFiori</code> as Bundle.
///     App programmer needs to provide the properties needed in <code>UIController</code>’s prepare for segue function:
///   </li>
/// </ul>
/// \code
///
/// override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
///    let vc = segue.destination as! FUIWelcomeScreen
///    vc.state = .isConfigured
///    vc.detailLabel.text = "Thank you for downloading SAP Project Companion for Managers."
///    vc.delegate = self
/// }
///
///
/// \endcode<ul>
///   <li>
///     Programmatically loads it:
///   </li>
/// </ul>
/// \code
///
/// let vc = FUIWelcomeScreen.createInstanceFromStoryboard()
/// vc.state = .isConfigured
/// vc.detailLabel.text = "Thank you for downloading SAP Project Companion for Managers."
/// self.navigationController?.pushViewController(vc, animated: true)
///
///
/// \endcodeSettings for possible welcome screens being launched:
/// <ul>
///   <li>
///     Launch with Standard:  Application contains the necessary configurations to connect to mobile services, and should prompt user to Start.
///     <ul>
///       <li>
///         <code>state</code> property: <code>.isConfigured</code>
///       </li>
///       <li>
///         <code>configurationOptions</code> property: not required.  Value would be ignored.
///       </li>
///       <li>
///         <code>delegate</code> function(s) to be implemented: <code>shouldContinueUserOnboarding(_:)</code>, <code>didSelectDemoMode(_:)</code> if <code>isDemoAvailable</code> is <code>true</code>.
///       </li>
///     </ul>
///   </li>
///   <li>
///     Welcome Screen Launched with Link: Application has not been configured, and does not use <code>FUIWelcomeScreen</code> flow to obtain configuration.
///     <ul>
///       <li>
///         <code>state</code> property: <code>.notConfigured</code>
///       </li>
///       <li>
///         <code>configurationOptions</code> property: empty value
///       </li>
///       <li>
///         <code>delegate</code> function(s) to be implemented: <code>didSelectDemoMode(_:)</code> if <code>isDemoAvailable</code> is <code>true</code>
///       </li>
///     </ul>
///   </li>
/// </ul>
/// <ul>
///   <li>
///     Welcome Screen Launched with Discovery Service:  Application has not been configured, and should prompt the end user for their email address.
///     <ul>
///       <li>
///         <code>state</code> property: <code>.notConfigured</code>
///       </li>
///       <li>
///         <code>configurationOptions</code> property: .discoveryService
///       </li>
///       <li>
///         <code>delegate</code> function(s) to be implemented: <code>welcomeController(_:shouldTryUserEmail:)</code>, <code>didSelectDemoMode(_:)</code> if <code>isDemoAvailable</code> is <code>true</code>
///       </li>
///     </ul>
///   </li>
/// </ul>
/// <ul>
///   <li>
///     Welcome Screen Launched with Scanner:  Application has not been configured, and should prompt the end user to launch the Barcode Scanner to obtain connection settings.
///     <ul>
///       <li>
///         <code>state</code> property: <code>.notConfigured</code>
///       </li>
///       <li>
///         <code>configurationOptions</code> property: .barcodeScanner
///       </li>
///       <li>
///         <code>delegate</code> function(s) to be implemented: <code>welcomeController(_:willNavigateToScannerScreen:)</code>, <code>didSelectDemoMode(_:)</code> if <code>isDemoAvailable</code> is <code>true</code>
///       </li>
///     </ul>
///   </li>
/// </ul>
/// <ul>
///   <li>
///     Welcome Screen Launched with Activation:  Application has not been configured, and should prompt the end user to pick between email address entry, or the Barcode Scanner, to obtain connection settings.
///     <ul>
///       <li>
///         <code>state</code> property: <code>.notConfigured</code>
///       </li>
///       <li>
///         <code>configurationOptions</code> property: [.discoveryService, .barcodeScanner]
///       </li>
///       <li>
///         <code>delegate</code> function(s) to be implemented: <code>welcomeController(_:willNavigateToActivationScreen:)</code>, <code>didSelectDemoMode(_:)</code> if <code>isDemoAvailable</code> is <code>true</code>
///       </li>
///     </ul>
///   </li>
/// </ul>
/// Note that the FUIWelcomeScreen is supported for iPad portrait and landscape orientation and iPhone portrait orientation only.
/// Since the screen is not supported in iPhone landscape orientation, the app needs to switch to portrait mode before presenting the screen.
/// And AppDelegate needs to lock the screen orientation when these screens are shown, similar to the following code snippet.
/// In app’s AppDelegate:
/// \code
///
/// public var inFUIWelcomeScreen: Bool = false
///
/// // implement this function to support only portrait orientation when FUIWelcomeScreen is displayed in iPhone.
/// func application(_ application: UIApplication, supportedInterfaceOrientationsFor window: UIWindow?) -> UIInterfaceOrientationMask {
///     if !inFUIWelcomeScreen {
///         return .allButUpsideDown
///    } else {
///        return .portrait
///    }
/// }
///
///
/// \endcodeBefore presenting the <code>FUIWelcomeScreen</code>:
/// \code
///
/// // Let AppDelegate know that we are entering the screen
/// (UIApplication.shared.delegate as! AppDelegate).inFUIWelcomeScreen = true
///
/// // Make sure we rotate to portrait mode
/// let value = UIInterfaceOrientation.portrait.rawValue
/// UIDevice.current.setValue(value, forKey: "orientation")
///
/// // Present the screen
/// let vc = FUIWelcomeScreen.createInstanceFromStoryboard()
/// vc.detailLabel.text = "Thank you for downloading SAP Project Companion for Managers."
/// self.navigationController?.pushViewController(vc, animated: true)
///
///
/// \endcodeAfter dismissing the Passcode or Touch ID screen:
/// \code
///
/// onboardingScreen.dismiss(animated: true, completion: nil)
///
/// // Let AppDelegate know that we are exiting the view
/// (UIApplication.shared.delegate as! AppDelegate).inFUIWelcomeScreen = false
///
///
/// \endcode
SWIFT_CLASS("_TtC8SAPFiori16FUIWelcomeScreen")
@interface FUIWelcomeScreen : FUIWelcomeController <UITextFieldDelegate>
/// Creates a <code>FUIWelcomeScreen</code> object from storyboard and intitialize subview compoennts.
///
/// returns:
/// A FUIWelcomeScreen object.
+ (FUIWelcomeScreen * _Nonnull)createInstanceFromStoryboard SWIFT_WARN_UNUSED_RESULT;
/// Headline label.  Setting <code>headlineLabel</code>.text displays the welcome headline message on the screen.  Framework does not display any default text.
@property (nonatomic, readonly, strong) IBOutlet UILabel * _Null_unspecified headlineLabel;
/// Detail label.  Setting <code>detailLabel</code>.text displays the instruction statement on the screen; otherwise, framework displays the default text.
@property (nonatomic, readonly, strong) IBOutlet UILabel * _Null_unspecified detailLabel;
/// Email text field.  It is visible only when <code>state</code> is <code>.notConfigured</code> and <code>configurationOptions</code> is <code>.discoveryService</code>.
@property (nonatomic, readonly, strong) FUIAutoResizingTextField * _Nonnull emailTextField;
/// Primary action button that shows when <code>state</code> is not <code>.notConfigured</code> and <code>configurationOptions</code> is not empty.  Setting <code>primaryActionButton</code>.setTitle displays your own title for the button on the screen; otherwise, framework displays the default title.
@property (nonatomic, readonly, strong) IBOutlet FUIOnboardingButton * _Null_unspecified primaryActionButton;
/// Footnote label.  Setting <code>footnoteLabel</code>.text displays the demo message on the screen; otherwise, framework displays the default text.
@property (nonatomic, readonly, strong) IBOutlet UILabel * _Null_unspecified footnoteLabel;
/// Footnote action button.  Setting <code>footnoteActionButton</code>.setTitle displays your own title on the screen; otherwise, framework displays the default title.
@property (nonatomic, readonly, strong) IBOutlet FUIOnboardingButton * _Null_unspecified footnoteActionButton;
/// Application name label.  Setting <code>appNameLabel</code>.text displays the application name on the screen.  Framework does not display any default text.
@property (nonatomic, readonly, strong) IBOutlet UILabel * _Null_unspecified appNameLabel;
/// Welcome detail label.  Setting <code>welcomeDetailLabel</code>.text displays the welcome detail message on the screen.  Framework does not display any default text.
/// <ul>
///   <li>
///     Note This property has been deprecated and renamed to <code>headlineLabel</code>.  Please update your code to reference <code>headlineLabel</code> directly.
///   </li>
/// </ul>
@property (nonatomic, readonly, strong) UILabel * _Null_unspecified welcomeDetailLabel;
/// Welcome label.  Setting <code>welcomeLabel</code>.text displays the welcome text on the screen; otherwise, framework displays the default text.
@property (nonatomic, readonly, strong) IBOutlet UILabel * _Null_unspecified welcomeLabel;
/// Thankyou label.  Setting <code>thankyouLabel</code>.text displays the thankyou note on the screen otherwise, framework displays the default text.
@property (nonatomic, readonly, strong) IBOutlet UILabel * _Null_unspecified thankyouLabel;
/// Instruction text view.  Setting <code>instructionTextView</code>.text displays the instruction statement on the screen; otherwise, framework displays the default text.
@property (nonatomic, readonly, strong) IBOutlet UITextView * _Null_unspecified instructionTextView;
/// Activate button that only shows when <code>state</code> is set to <code>.isConfigured</code>.  Setting <code>signInButton</code>.setTitle displays your own title for the button on the screen; otherwise, framework displays the default title, <code>Start</code>.
/// <ul>
///   <li>
///     Note This property has been deprecated and renamed to <code>primaryActionButton</code>.  Please update your code to reference <code>primaryActionButton</code> directly.
///   </li>
/// </ul>
@property (nonatomic, readonly, strong) FUIOnboardingButton * _Null_unspecified signInButton;
/// Demo label.  Setting <code>demoLabel</code>.text displays the demo message on the screen; otherwise, framework displays the default text.
/// <ul>
///   <li>
///     Note This property has been deprecated and renamed to <code>footnoteLabel</code>.  Please update your code to reference <code>footnoteLabel</code> directly.
///   </li>
/// </ul>
@property (nonatomic, readonly, strong) UILabel * _Null_unspecified demoLabel;
/// Demo button.  Setting <code>demoButton</code>.setTitle displays your own title on the screen; otherwise, framework displays the default title.
/// <ul>
///   <li>
///     Note This property has been deprecated and renamed to <code>footnoteActionButton</code>.  Please update your code to reference <code>footnoteActionButton</code> directly.
///   </li>
/// </ul>
@property (nonatomic, readonly, strong) FUIOnboardingButton * _Null_unspecified demoButton;
/// The <code>FUIWelcomeControllerDelegate</code> implementation.
@property (nonatomic, weak) id <FUIWelcomeControllerDelegate> _Nullable delegate;
/// The <code>FUIOnboardingDelegate</code> implementation.
/// <ul>
///   <li>
///     Note This property has been deprecated.  Please use <code>FUIWelcomeControllerDelegate</code>.
///   </li>
/// </ul>
@property (nonatomic, weak) id <FUIOnboardingDelegate> _Nullable onboardingDelegate;
/// A flag to indicate demo availability.  Default is true.  Only when it’s true, display <code>Want to explore</code> label and <code>Try the Demo</code> button.  Coorsponding <code>delegate</code> function is <code>didSelectDemoMode(_:)</code> if the property is true.
@property (nonatomic) BOOL isDemoAvailable;
/// :nodoc:
- (void)awakeFromNib;
/// :nodoc:
- (void)viewDidLoad;
/// :nodoc:
- (void)viewWillAppear:(BOOL)animated;
/// :nodoc:
- (void)viewDidDisappear:(BOOL)animated;
/// :nodoc:
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
/// :nodoc:
- (void)viewDidLayoutSubviews;
/// :nodoc:
- (void)prepareForSegue:(UIStoryboardSegue * _Nonnull)segue sender:(id _Nullable)sender;
/// :nodoc:
- (BOOL)textFieldShouldReturn:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class UIProgressView;
@class UISegmentedControl;
@class UIPageControl;
@class UITabBar;
@class UITabBarItem;
@class UIToolbar;
@class UIWindow;
@class NSNotification;

/// The master renderer class that provides a list of static functions for individual component rendering
SWIFT_CLASS("_TtC8SAPFiori11NUIRenderer")
@interface NUIRenderer : NSObject
/// Render <code>UIActivityIndicatorView</code> with the default <code>ActivityIndicator</code> style class
/// \param activityIndicator The <code>UIActivityIndicatorView</code> being rendered.
///
+ (void)renderActivityIndicatorWithActivityIndicator:(UIActivityIndicatorView * _Nonnull)activityIndicator;
/// Render <code>UIActivityIndicatorView</code> with an given style class
/// \param activityIndicator The <code>UIActivityIndicatorView</code> being rendered.
///
/// \param className The name of class style for rendering the component.
///
+ (void)renderActivityIndicatorWithActivityIndicator:(UIActivityIndicatorView * _Nonnull)activityIndicator withClass:(NSString * _Nonnull)className;
/// Render <code>UIBarButtonItem</code> with the default <code>BarButton</code> style class
/// \param item The <code>UIBarButtonItem</code> being rendered.
///
+ (void)renderBarButtonItemWithItem:(UIBarButtonItem * _Nonnull)item;
/// Render <code>UIBarButtonItem</code> with an given style class
/// \param item The <code>UIBarButtonItem</code> being rendered.
///
/// \param className The name of class style for rendering the component.
///
+ (void)renderBarButtonItemWithItem:(UIBarButtonItem * _Nonnull)item withClass:(NSString * _Nonnull)className;
/// Render <code>UIButton</code> with the default <code>Button</code> style class
/// \param button The <code>UIButton</code> being rendered.
///
+ (void)renderButtonWithButton:(UIButton * _Nonnull)button;
/// Render <code>UIButton</code> with an given style class
/// \param button The <code>UIButton</code> being rendered.
///
/// \param className The name of class style for rendering the component.
///
+ (void)renderButtonWithButton:(UIButton * _Nonnull)button withClass:(NSString * _Nonnull)className;
/// Render <code>UIControl</code> with the default <code>Control</code> style class
/// \param control The <code>UIControl</code> being rendered.
///
+ (void)renderControlWithControl:(UIControl * _Nonnull)control;
/// Render <code>UIControl</code> with a given style class
/// \param control The <code>UIControl</code> being rendered.
///
/// \param className The name of class style for rendering the component.
///
+ (void)renderControlWithControl:(UIControl * _Nonnull)control withClass:(NSString * _Nonnull)className;
/// Render <code>UILabel</code> with the default <code>Label</code> style class
/// \param label The <code>UILabel</code> being rendered.
///
+ (void)renderLabelWithLabel:(UILabel * _Nonnull)label;
/// Render <code>UILabel</code> with a given style class
/// \param label The <code>UILabel</code> being rendered.
///
/// \param className The name of class style for rendering the component.
///
+ (void)renderLabelWithLabel:(UILabel * _Nonnull)label withClass:(NSString * _Nonnull)className;
/// Render <code>UILabel</code> with a given style class and suffix
/// \param label The <code>UILabel</code> being rendered.
///
/// \param className The name of class style for rendering the component.
///
/// \param suffix The suffix to the className.
///
+ (void)renderLabelWithLabel:(UILabel * _Nonnull)label withClass:(NSString * _Nonnull)className withSuffix:(NSString * _Nonnull)suffix;
/// Render <code>UIImageView</code> with a given style class
/// \param imageView The <code>UIImageView</code> being rendered.
///
/// \param className The name of class style for rendering the component.
///
+ (void)renderImageViewWithImageView:(UIImageView * _Nonnull)imageView withClass:(NSString * _Nonnull)className;
/// Render <code>UINavigationBar</code> with the default <code>NavigationBar</code> style class
/// \param bar The <code>UINavigationBar</code> being rendered.
///
+ (void)renderNavigationBarWithBar:(UINavigationBar * _Nonnull)bar;
/// Render <code>UINavigationBar</code> with a given style class
/// \param imageView The <code>UINavigationBar</code> being rendered.
///
/// \param className The name of class style for rendering the component.
///
+ (void)renderNavigationBarWithBar:(UINavigationBar * _Nonnull)bar withClass:(NSString * _Nonnull)className;
/// Render <code>UIProgressView</code> with the default <code>Progress</code> style class
/// \param progressView The <code>UIProgressView</code> being rendered.
///
+ (void)renderProgressViewWithProgressView:(UIProgressView * _Nonnull)progressView;
/// Render <code>UIProgressView</code> with a given style class
/// \param progressView The <code>UIProgressView</code> being rendered.
///
/// \param className The name of class style for rendering the component.
///
+ (void)renderProgressViewWithProgressView:(UIProgressView * _Nonnull)progressView withClass:(NSString * _Nonnull)className;
/// Render <code>UINavigationItem</code> with the default <code>NavigationBar</code> style class
/// \param item The <code>UINavigationItem</code> being rendered.
///
+ (void)renderNavigationItemWithItem:(UINavigationItem * _Nonnull)item;
/// Render <code>UINavigationItem</code> with a given style class
/// \param item The <code>UINavigationItem</code> being rendered.
///
/// \param className The name of class style for rendering the component.
///
+ (void)renderNavigationItemWithItem:(UINavigationItem * _Nonnull)item withClass:(NSString * _Nonnull)className;
/// Render <code>UISearchBar</code> with the default <code>SearchBar</code> style class
/// \param bar The <code>UISearchBar</code> being rendered.
///
+ (void)renderSearchBarWithBar:(UISearchBar * _Nonnull)bar;
/// Render <code>UISearchBar</code> with a given style class
/// \param bar The <code>UISearchBar</code> being rendered.
///
/// \param className The name of class style for rendering the component.
///
+ (void)renderSearchBarWithBar:(UISearchBar * _Nonnull)bar withClass:(NSString * _Nonnull)className;
/// Render <code>UISegmentedControl</code> with the default <code>SegmentedControl</code> style class
/// \param control The <code>UISegmentedControl</code> being rendered.
///
+ (void)renderSegmentedControlWithControl:(UISegmentedControl * _Nonnull)control;
/// Render <code>UISegmentedControl</code> with a given style class
/// \param control The <code>UISegmentedControl</code> being rendered.
///
/// \param className The name of class style for rendering the component.
///
+ (void)renderSegmentedControlWithControl:(UISegmentedControl * _Nonnull)control withClass:(NSString * _Nonnull)className;
/// Render <code>UISlider</code> with the default <code>Slider</code> style class
/// \param control The <code>UISlider</code> being rendered.
///
+ (void)renderSliderWithSlider:(UISlider * _Nonnull)slider;
/// Render <code>UISlider</code> with a given style class
/// \param slider The <code>UISlider</code> being rendered.
///
/// \param className The name of class style for rendering the component.
///
+ (void)renderSliderWithSlider:(UISlider * _Nonnull)slider withClass:(NSString * _Nonnull)className;
/// Render <code>UISwitch</code> with the default <code>Switch</code> style class
/// \param uiSwitch The <code>UISwitch</code> being rendered.
///
+ (void)renderSwitchWithUiSwitch:(UISwitch * _Nonnull)uiSwitch;
/// Render <code>UISwitch</code> with a given style class
/// \param uiSwitch The <code>UISwitch</code> being rendered.
///
/// \param className The name of class style for rendering the component.
///
+ (void)renderSwitchWithUiSwitch:(UISwitch * _Nonnull)uiSwitch withClass:(NSString * _Nonnull)className;
/// Render <code>UIPageControl</code> with the default <code>PageControl</code> style class
/// \param uiSwitch The <code>UIPageControl</code> being rendered.
///
+ (void)renderPageControlWithPageControl:(UIPageControl * _Nonnull)pageControl;
/// Render <code>UIPageControl</code> with a given style class
/// \param pageControl The <code>UIPageControl</code> being rendered.
///
/// \param className The name of class style for rendering the component.
///
+ (void)renderPageControlWithPageControl:(UIPageControl * _Nonnull)pageControl withClass:(NSString * _Nonnull)className;
/// Render <code>UITabBar</code> with the default <code>TabBar</code> style class
/// \param uiSwitch The <code>UITabBar</code> being rendered.
///
+ (void)renderTabBarWithBar:(UITabBar * _Nonnull)bar;
/// Render <code>UITabBar</code> with a given style class
/// \param bar The <code>UITabBar</code> being rendered.
///
/// \param className The name of class style for rendering the component.
///
+ (void)renderTabBarWithBar:(UITabBar * _Nonnull)bar withClass:(NSString * _Nonnull)className;
/// Render <code>UITabBarItem</code> with the default <code>TabBarItem</code> style class
/// \param UITabBarItem The <code>UITabBarItem</code> being rendered.
///
+ (void)renderTabBarItemWithItem:(UITabBarItem * _Nonnull)item;
/// Render <code>UITabBarItem</code> with a given style class
/// \param item The <code>UITabBarItem</code> being rendered.
///
/// \param className The name of class style for rendering the component.
///
+ (void)renderTabBarItemWithItem:(UITabBarItem * _Nonnull)item withClass:(NSString * _Nonnull)className;
/// Render <code>UITableView</code> with the default <code>TableView</code> style class
/// \param tableView The <code>UITableView</code> being rendered.
///
+ (void)renderTableViewWithTableView:(UITableView * _Nonnull)tableView;
/// Render <code>UITableView</code> with a given style class
/// \param tableView The <code>UITableView</code> being rendered.
///
/// \param className The name of class style for rendering the component.
///
+ (void)renderTableViewWithTableView:(UITableView * _Nonnull)tableView withClass:(NSString * _Nonnull)className;
/// Render <code>UITableViewCell</code> with the default <code>TableCell</code> style class
/// \param tableView The <code>UITableViewCell</code> being rendered.
///
+ (void)renderTableViewCellWithCell:(UITableViewCell * _Nonnull)cell;
/// Render <code>UITableViewCell</code> with a given style class
/// \param cell The <code>UITableViewCell</code> being rendered.
///
/// \param className The name of class style for rendering the component.
///
+ (void)renderTableViewCellWithCell:(UITableViewCell * _Nonnull)cell withClass:(NSString * _Nonnull)className;
/// Render <code>UIToolbar</code> with the default <code>Toolbar</code> style class
/// \param tableView The <code>UIToolbar</code> being rendered.
///
+ (void)renderToolbarWithBar:(UIToolbar * _Nonnull)bar;
/// Render <code>UIToolbar</code> with a given style class
/// \param bar The <code>UIToolbar</code> being rendered.
///
/// \param className The name of class style for rendering the component.
///
+ (void)renderToolbarWithBar:(UIToolbar * _Nonnull)bar withClass:(NSString * _Nonnull)className;
/// Render <code>UITextField</code> with the default <code>TextField</code> style class
/// \param textField The <code>UITextField</code> being rendered.
///
+ (void)renderTextFieldWithTextField:(UITextField * _Nonnull)textField;
/// Render <code>UITextField</code> with a given style class
/// \param textField The <code>UITextField</code> being rendered.
///
/// \param className The name of class style for rendering the component.
///
+ (void)renderTextFieldWithTextField:(UITextField * _Nonnull)textField withClass:(NSString * _Nonnull)className;
/// Render <code>UITextView</code> with the default <code>TextView</code> style class
/// \param textView The <code>UITextView</code> being rendered.
///
+ (void)renderTextViewWithTextView:(UITextView * _Nonnull)textView;
/// Render <code>UITextView</code> with a given style class
/// \param textView The <code>UITextView</code> being rendered.
///
/// \param className The name of class style for rendering the component.
///
+ (void)renderTextViewWithTextView:(UITextView * _Nonnull)textView withClass:(NSString * _Nonnull)className;
/// Render <code>UIView</code> with the default <code>View</code> style class
/// \param view The <code>UIView</code> being rendered.
///
+ (void)renderViewWithView:(UIView * _Nonnull)view;
/// Render <code>UIView</code> with a given style class
/// \param view The <code>UIView</code> being rendered.
///
/// \param className The name of class style for rendering the component.
///
+ (void)renderViewWithView:(UIView * _Nonnull)view withClass:(NSString * _Nonnull)className;
/// Render <code>UIView</code> with a given style class and suffix to the style class
/// \param view The <code>UIView</code> being rendered.
///
/// \param className The name of class style for rendering the component.
///
/// \param suffix The suffix to the className.
///
+ (void)renderViewWithView:(UIView * _Nonnull)view withClass:(NSString * _Nonnull)className withSuffix:(NSString * _Nonnull)suffix;
/// Render <code>UIWindow</code> with the default <code>Window</code> style class
/// \param window The <code>UIWindow</code> being rendered.
///
+ (void)renderWindowWithWindow:(UIWindow * _Nonnull)window;
/// Render <code>UIWindow</code> with a given style class
/// \param window The <code>UIWindow</code> being rendered.
///
/// \param className The name of class style for rendering the component.
///
+ (void)renderWindowWithWindow:(UIWindow * _Nonnull)window withClass:(NSString * _Nonnull)className;
/// Checks to see if a given style class contains any text transform property.
/// \param className The name of class style for transforming the text.
///
///
/// returns:
/// true if the given style class contains the text transform property; otherwise false.
+ (BOOL)needsTextTransformWithClassWithClassName:(NSString * _Nonnull)className SWIFT_WARN_UNUSED_RESULT;
/// Transform a given text based on a given style class
/// \param text The text to be transformed.
///
/// \param className The name of class style for transforming the text.
///
+ (NSString * _Nonnull)transformTextWithText:(NSString * _Nonnull)text withClass:(NSString * _Nonnull)className SWIFT_WARN_UNUSED_RESULT;
/// Render <code>UINavigationBar</code> with the style class set.
/// \param bar The <code>UINavigationBar</code> being rendered.
///
+ (void)sizeDidChangeForNavigationBarWithBar:(UINavigationBar * _Nonnull)bar;
/// Render <code>UITabBar</code> with the style class set.
/// \param bar The <code>UITabBar</code> being rendered.
///
+ (void)sizeDidChangeForTabBarWithBar:(UITabBar * _Nonnull)bar;
/// Render <code>UITableViewCell</code> with the style class set.
/// \param cell The <code>UITableViewCell</code> being rendered.
///
+ (void)sizeDidChangeForTableViewCellWithCell:(UITableViewCell * _Nonnull)cell;
/// Render <code>UITableView</code> with the style class set.
/// \param tableView The <code>UITableView</code> being rendered.
///
+ (void)sizeDidChangeForTableViewWithTableView:(UITableView * _Nonnull)tableView;
/// Add an orientation observer in <code>NotificationCenter</code>
/// \param observer The <code>AnyObject</code> to be added as an observer.
///
+ (void)addOrientationDidChangeObserverWithObserver:(id _Nonnull)observer;
/// Remove the given observer from <code>NotificationCenter</code>
/// \param observer The <code>AnyObject</code> to be removed.
///
+ (void)removeOrientationDidChangeObserverWithObserver:(id _Nonnull)observer;
/// Rerender the root view
+ (void)rerender;
/// Rerender the given <code>UIView</code>
/// \param view The <code>UIView</code> to be rerendered.
///
+ (void)rerenderViewWithView:(UIView * _Nonnull)view;
/// Add or remove orientaiton observer
/// \param rerender true to add the observer by calling <code>addOrientationDidChangeObserver</code>; otherwise, remove the observer by calling <code>removeOrientationDidChangeObserver</code>
///
+ (void)setRerenderOnOrientationChangeWithRerender:(BOOL)rerender;
/// Get the global <code>NUIRenderer</code> instance.
///
/// returns:
/// The <code>NUIRenderer</code> instance.
+ (NUIRenderer * _Nonnull)getInstance SWIFT_WARN_UNUSED_RESULT;
/// Rerender the view when the orientation did changed
/// \param notification The <code>NSNotification</code> object
///
+ (void)orientationDidChangeWithNotification:(NSNotification * _Nonnull)notification;
/// Rerender the view when stylesheet file changed
+ (void)stylesheetFileChanged;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The style class settings class that provides a list of static functions for applying-style-related functionalities
SWIFT_CLASS("_TtC8SAPFiori11NUISettings")
@interface NUISettings : NSObject
/// The <code>NUISettings</code> instance
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) NUISettings * _Null_unspecified instance;)
+ (NUISettings * _Null_unspecified)instance SWIFT_WARN_UNUSED_RESULT;
+ (void)setInstance:(NUISettings * _Null_unspecified)value;
/// Apply a specific stylesheet for theming with an given style sheet file name
/// \param name The style sheet file name
///
+ (void)initWithStylesheetWithName:(NSString * _Nonnull)name SWIFT_METHOD_FAMILY(none);
/// Append a specific stylesheet for theming with an given style sheet file name
/// \param name The style sheet file name
///
+ (void)appendStylesheetWithName:(NSString * _Nonnull)name;
/// Load a specific stylesheet for theming with an given full style sheet path
/// \param path The style sheet file full path
///
+ (void)loadStylesheetByPathWithPath:(NSString * _Nonnull)path;
/// Load a specific stylesheet for theming with an given URL to the style sheet
/// \param url The <code>URL</code> to the style sheet
///
+ (void)loadStylesheetByURLWithUrl:(NSURL * _Nonnull)url;
/// Load all the style sheets set in <code>initWithStylesheet</code> and <code>appendStylesheet</code>
+ (void)reloadStylesheets;
/// Reload a specific stylesheet on orientation changes
/// \param orientation The <code>UIInterfaceOrientation</code> changed
///
///
/// returns:
/// true if orientation is changed and style sheet gets reloaded; otherwise, false
+ (BOOL)reloadStylesheetsOnOrientationChangeWithOrientation:(UIInterfaceOrientation)orientation SWIFT_WARN_UNUSED_RESULT;
/// Check to see if auto update of the style sheet is enabled by checking if <code>autoUpdatePath</code> is set
///
/// returns:
/// true if <code>autoUpdatePath</code> is set
+ (BOOL)autoUpdateIsEnabled SWIFT_WARN_UNUSED_RESULT;
/// Get the style sheet path for auto update
///
/// returns:
/// The path for auto updated style sheet
+ (NSString * _Nullable)autoUpdatePath SWIFT_WARN_UNUSED_RESULT;
/// Set the auto update path for style sheet
/// \param path The path
///
+ (void)setAutoUpdatePathWithPath:(NSString * _Nonnull)path;
/// Look for a given property in a given explicit style class.
/// \param property The targeted property to be searched in the style class
///
/// \param className The explicit style class
///
///
/// returns:
/// true if found; otherwise, false
+ (BOOL)hasPropertyWithProperty:(NSString * _Nonnull)property withExplicitClass:(NSString * _Nonnull)className SWIFT_WARN_UNUSED_RESULT;
/// Look for a given property in a given style class(es).
/// \param property The targeted property to be searched in the style class(es)
///
/// \param className The targeted style class(es), which may contain more than one style class with “:” as separator
///
///
/// returns:
/// true if found; otherwise, false
+ (BOOL)hasPropertyWithProperty:(NSString * _Nonnull)property withClass:(NSString * _Nonnull)className SWIFT_WARN_UNUSED_RESULT;
/// Look for font property in a given style class
/// \param className The given style class
///
///
/// returns:
/// true if found; otherwise, false
+ (BOOL)hasFontPropertiesWithClassWithClassName:(NSString * _Nonnull)className SWIFT_WARN_UNUSED_RESULT;
/// Get a given property’s <code>String</code> value in a given style class.
/// \param property The targeted property to be searched in the style class.
///
/// \param withExplicitClass The targeted style class.
///
///
/// returns:
/// The property <code>String</code> value if found; otherwise, nil.
+ (NSString * _Nullable)getWithProperty:(NSString * _Nonnull)property withExplicitClass:(NSString * _Nonnull)className SWIFT_WARN_UNUSED_RESULT;
/// Get a given property’s value in a given style class(es).
/// \param property The targeted property to be searched in the style class(es)
///
/// \param className The targeted style class(es), which may contain more than one style class with “:” as separator
///
///
/// returns:
/// The property value if found; otherwise, nil.
+ (NSString * _Nullable)getWithProperty:(NSString * _Nonnull)property withClass:(NSString * _Nonnull)className SWIFT_WARN_UNUSED_RESULT;
/// Get a given property’s <code>Bool</code> value in a given style class.
/// \param property The targeted property to be searched in the style class.
///
/// \param className The targeted style class.
///
///
/// returns:
/// The property <code>Bool</code> valuei f found; otherwise, nil.
+ (BOOL)getBooleanWithProperty:(NSString * _Nonnull)property withClass:(NSString * _Nonnull)className SWIFT_WARN_UNUSED_RESULT;
/// Get a given property’s <code>UITextBorderStyle</code> value in a given style class.
/// \param property The targeted property to be searched in the style class.
///
/// \param className The targeted style class.
///
///
/// returns:
/// The property <code>UITextBorderStyle</code> value if found; otherwise, UITextBorderStyle.none.
+ (UITextBorderStyle)getBorderStyleWithProperty:(NSString * _Nonnull)property withClass:(NSString * _Nonnull)className SWIFT_WARN_UNUSED_RESULT;
/// Get a given property’s <code>UITableViewCellSeparatorStyle</code> value in a given style class.
/// \param property The targeted property to be searched in the style class.
///
/// \param className The targeted style class.
///
///
/// returns:
/// The property <code>UITableViewCellSeparatorStyle</code> value if found; otherwise, UITableViewCellSeparatorStyle.none.
+ (UITableViewCellSeparatorStyle)getSeparatorStyleWithProperty:(NSString * _Nonnull)property withClass:(NSString * _Nonnull)className SWIFT_WARN_UNUSED_RESULT;
/// Get <code>UIFont</code> value in a given style class.
/// \param className The targeted style class.
///
///
/// returns:
/// The property <code>UIFont</code> value if found; otherwise, UIFont.systemFontSize.
+ (UIFont * _Nullable)getFontWithClassWithClassName:(NSString * _Nonnull)className SWIFT_WARN_UNUSED_RESULT;
/// Get <code>UIFont</code> value in a given style class and a given base <code>UIFont</code>
/// \param className The targeted style class.
///
///
/// returns:
/// The property <code>UIFont</code> value if found; otherwise, baseFont with size set to UIFont.systemFontSize.
+ (UIFont * _Nonnull)getFontWithClassWithClassName:(NSString * _Nonnull)className baseFont:(UIFont * _Nullable)baseFont SWIFT_WARN_UNUSED_RESULT;
/// Get a given property’s <code>UIColor</code> value in a given style class.
/// \param property The targeted property to be searched in the style class.
///
/// \param className The targeted style class.
///
///
/// returns:
/// The property <code>UIColor</code> value if found; otherwise, nil.
+ (UIColor * _Nullable)getColorWithProperty:(NSString * _Nonnull)property withClass:(NSString * _Nonnull)className SWIFT_WARN_UNUSED_RESULT;
/// Get a given image property’s <code>UIColor</code> value in a given style class.
/// \param property The targeted property to be searched in the style class.
///
/// \param className The targeted style class.
///
///
/// returns:
/// The property <code>UIColor</code> value if found; otherwise, nil.
+ (UIColor * _Nullable)getColorFromImageWithProperty:(NSString * _Nonnull)property withClass:(NSString * _Nonnull)className SWIFT_WARN_UNUSED_RESULT;
/// Get a given color property’s <code>UIImage</code> value in a given style class.
/// \param property The targeted property to be searched in the style class.
///
/// \param className The targeted style class.
///
///
/// returns:
/// The property <code>UIImage</code> value if found; otherwise, nil.
+ (UIImage * _Nullable)getImageFromColorWithProperty:(NSString * _Nonnull)property withClass:(NSString * _Nonnull)className SWIFT_WARN_UNUSED_RESULT;
/// Get a given property’s <code>UIImage</code> value in a given style class.
/// \param property The targeted property to be searched in the style class.
///
/// \param className The targeted style class.
///
///
/// returns:
/// The property <code>UIImage</code> value if found; otherwise, nil.
+ (UIImage * _Nullable)getImageWithProperty:(NSString * _Nonnull)property withClass:(NSString * _Nonnull)className SWIFT_WARN_UNUSED_RESULT;
/// Get a given property’s <code>UIBarStyle</code> value in a given style class.
/// \param property The targeted property to be searched in the style class.
///
/// \param className The targeted style class.
///
///
/// returns:
/// The property <code>UIBarStyle</code> value if found; otherwise, UIBarStyle.default.
+ (UIBarStyle)getBarStyleWithProperty:(NSString * _Nonnull)property withClass:(NSString * _Nonnull)className SWIFT_WARN_UNUSED_RESULT;
/// Get a given property’s <code>NSTextAlignment</code> value in a given style class.
/// \param property The targeted property to be searched in the style class.
///
/// \param className The targeted style class.
///
///
/// returns:
/// The property <code>NSTextAlignment</code> value if found; otherwise, NSTextAlignment.left.
+ (NSTextAlignment)getTextAlignmentWithProperty:(NSString * _Nonnull)property withClass:(NSString * _Nonnull)className SWIFT_WARN_UNUSED_RESULT;
/// Get a given property’s <code>UIControlContentHorizontalAlignment</code> value in a given style class.
/// \param property The targeted property to be searched in the style class.
///
/// \param className The targeted style class.
///
///
/// returns:
/// The property <code>UIControlContentHorizontalAlignment</code> value if found; otherwise, UIControlContentHorizontalAlignment.left.
+ (UIControlContentHorizontalAlignment)getControlContentHorizontalAlignmentWithProperty:(NSString * _Nonnull)property withClass:(NSString * _Nonnull)className SWIFT_WARN_UNUSED_RESULT;
/// Get a given property’s <code>UIControlContentVerticalAlignment</code> value in a given style class.
/// \param property The targeted property to be searched in the style class.
///
/// \param className The targeted style class.
///
///
/// returns:
/// The property <code>UIControlContentHorizontalAlignment</code> value if found; otherwise, UIControlContentVerticalAlignment.top.
+ (UIControlContentVerticalAlignment)getControlContentVerticalAlignmentWithProperty:(NSString * _Nonnull)property withClass:(NSString * _Nonnull)className SWIFT_WARN_UNUSED_RESULT;
/// Get a given property’s <code>UIKeyboardAppearance</code> value in a given style class.
/// \param property The targeted property to be searched in the style class.
///
/// \param className The targeted style class.
///
///
/// returns:
/// The property <code>UIKeyboardAppearance</code> value if found; otherwise, UIKeyboardAppearance.default.
+ (UIKeyboardAppearance)getKeyboardAppearanceWithProperty:(NSString * _Nonnull)property withClass:(NSString * _Nonnull)className SWIFT_WARN_UNUSED_RESULT;
/// Convert a list of style classes in a <code>String</code> to an array
/// \param className The <code>String</code> which contains a list of style classes with “:” as the separator
///
///
/// returns:
/// The <code>String</code> array that contains the style classes.  Each item in the array has one style class.
+ (NSArray<NSString *> * _Nonnull)getClassesWithClassName:(NSString * _Nonnull)className SWIFT_WARN_UNUSED_RESULT;
/// Set a list of views to be excluded in applying the style
/// \param array The <code>String</code> array that contains a list of excluded views
///
+ (void)setGlobalExclusionsWithArray:(NSArray<NSString *> * _Nonnull)array;
/// Get a list of views to be excluded in applying the style
///
/// returns:
/// The <code>String</code> array that contains a list of excluded views
+ (NSArray<NSString *> * _Nonnull)getGlobalExclusions SWIFT_WARN_UNUSED_RESULT;
/// Get style sheet orientation name
///
/// returns:
/// “landscape” or “portrait”
+ (NSString * _Nullable)stylesheetOrientation SWIFT_WARN_UNUSED_RESULT;
/// Get style sheet orientation name based on a given <code>UIInterfaceOrientation</code>
/// \param orientation The <code>UIInterfaceOrientation</code> to be determined
///
///
/// returns:
/// “landscape” if the given orientation is landscape; otherwise, “portrait”.
+ (NSString * _Nonnull)stylesheetOrientationFromInterfaceOrientationWithOrientation:(UIInterfaceOrientation)orientation SWIFT_WARN_UNUSED_RESULT;
/// Get the global <code>NUISettings</code> instance
+ (NUISettings * _Nonnull)getInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end







/// <code>NibDesignableProtocol</code>-compliant implementation of <code>UITableViewCell</code>
/// <h2>See also</h2>
/// <code>NibDesignableProtocol</code>
SWIFT_CLASS("_TtC8SAPFiori26NibDesignableTableViewCell")
@interface NibDesignableTableViewCell : UITableViewCell
/// :nodoc:
@property (nonatomic, readonly, strong) UIView * _Nonnull nibContainerView;
/// :nodoc:
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end



@interface PHAsset (SWIFT_EXTENSION(SAPFiori))
@end


@interface UIActivityIndicatorView (SWIFT_EXTENSION(SAPFiori))
@end


@interface UIBarButtonItem (SWIFT_EXTENSION(SAPFiori))
@end


@interface UIButton (SWIFT_EXTENSION(SAPFiori))
@end


@interface UIColor (SWIFT_EXTENSION(SAPFiori))
/// :nodoc:
- (nonnull instancetype)initWithHexString:(NSString * _Nonnull)hex;
/// <code>UIColor</code> value for default UIKit tint color
///
/// returns:
/// <code>UIColor</code> equal to <code>UIView().tintColor</code>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull appleDefaultTint;)
+ (UIColor * _Nonnull)appleDefaultTint SWIFT_WARN_UNUSED_RESULT;
/// Check to see if it is the default Apple tint color
///
/// returns:
/// true if yes; otherwise, false
- (BOOL)isAppleDefaultTint SWIFT_WARN_UNUSED_RESULT;
/// Check to see if the given color is the same
/// \param other A given color to compare with
///
///
/// returns:
/// true if yes; otherwise, false
- (BOOL)equals:(UIColor * _Nonnull)other SWIFT_WARN_UNUSED_RESULT;
@end


@interface UIControl (SWIFT_EXTENSION(SAPFiori))
@end


@interface UIFont (SWIFT_EXTENSION(SAPFiori))
/// Get <code>Fiori</code> preferred <code>UIFont</code> based on a given <code>UIFontTextStyle</code>
/// \param textStyle The <code>UIFontTextStyle</code> text style
///
///
/// returns:
/// <code>UIFont</code>
+ (UIFont * _Nonnull)preferredFioriFontForTextStyle:(UIFontTextStyle _Nonnull)textStyle SWIFT_WARN_UNUSED_RESULT;
@end


@interface UIFontDescriptor (SWIFT_EXTENSION(SAPFiori))
@end


@interface UIImage (SWIFT_EXTENSION(SAPFiori))
@end


@interface UIImageView (SWIFT_EXTENSION(SAPFiori))
@end


@interface UILabel (SWIFT_EXTENSION(SAPFiori))
@end


@interface UILabel (SWIFT_EXTENSION(SAPFiori))
@end


@interface UILabel (SWIFT_EXTENSION(SAPFiori))
@end


@interface UINavigationBar (SWIFT_EXTENSION(SAPFiori))
/// Invokes <code>UIAppearance</code> proxy API’s, to apply Fiori Design Language styling attributes to <code>UINavigationBar.appearance()</code>
+ (void)applyFioriStyle;
@end


@interface UINavigationBar (SWIFT_EXTENSION(SAPFiori))
@end


@interface UINavigationItem (SWIFT_EXTENSION(SAPFiori))
@end


@interface UIPageControl (SWIFT_EXTENSION(SAPFiori))
@end


@interface UIProgressView (SWIFT_EXTENSION(SAPFiori))
@end


@interface UISearchBar (SWIFT_EXTENSION(SAPFiori))
@end


@interface UISegmentedControl (SWIFT_EXTENSION(SAPFiori))
@end


@interface UISlider (SWIFT_EXTENSION(SAPFiori))
@end


@interface UIStackView (SWIFT_EXTENSION(SAPFiori))
@end


@interface UIStackView (SWIFT_EXTENSION(SAPFiori))
@end


@interface UIStackView (SWIFT_EXTENSION(SAPFiori))
@end


@interface UISwitch (SWIFT_EXTENSION(SAPFiori))
@end


@interface UITabBar (SWIFT_EXTENSION(SAPFiori))
@end


@interface UITabBarItem (SWIFT_EXTENSION(SAPFiori))
@end


@interface UITableView (SWIFT_EXTENSION(SAPFiori))
@end


@interface UITableViewCell (SWIFT_EXTENSION(SAPFiori))
@end


@interface UITableViewCell (SWIFT_EXTENSION(SAPFiori))
@end


@interface UITextField (SWIFT_EXTENSION(SAPFiori))
@end


@interface UITextView (SWIFT_EXTENSION(SAPFiori))
@end


@interface UIToolbar (SWIFT_EXTENSION(SAPFiori))
@end


@interface UIView (SWIFT_EXTENSION(SAPFiori))
@end


@interface UIView (SWIFT_EXTENSION(SAPFiori))
@end


@interface UIView (SWIFT_EXTENSION(SAPFiori))
/// :nodoc:
@property (nonatomic, readonly, strong) UIView * _Nonnull nibContainerView;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull nibName;
/// :nodoc:
@property (nonatomic, readonly, strong) NSBundle * _Nonnull bundle;
/// :nodoc:
@property (nonatomic, readonly) Class _Nonnull nibLoadingClass;
@end


@interface UIView (SWIFT_EXTENSION(SAPFiori))
/// The style class property.  Setting this value applys the style.
@property (nonatomic, copy) NSString * _Nullable nuiClass;
@end


@interface UIWindow (SWIFT_EXTENSION(SAPFiori))
@end

#pragma clang diagnostic pop
