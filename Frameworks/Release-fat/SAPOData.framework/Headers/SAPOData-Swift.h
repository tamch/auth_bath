// Generated by Apple Swift version 3.1 (swiftlang-802.0.53 clang-802.0.42)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if defined(__has_attribute) && __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import Foundation;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class NSCoder;
@class NSString;

/// :nodoc: For internal use only.
SWIFT_CLASS("_TtC8SAPOData9ErrorBase")
@interface ErrorBase : NSError
@property (nonatomic, copy) NSArray<NSString *> * _Nullable callStack;
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull userInfo;
- (void)captureStack;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
/// Root cause of this exception.
@property (nonatomic) NSError * _Nullable cause;
/// :nodoc: For internal use only.
@property (nonatomic, strong) NSString * _Nullable message_NS;
/// Message text for this exception.
@property (nonatomic, copy) NSString * _Nullable message;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
///
/// returns:
/// A string representation of this object.
- (NSString * _Nonnull)toString SWIFT_WARN_UNUSED_RESULT;
/// :nodoc: For internal use only.
- (NSString * _Nonnull)toString_NS SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithDomain:(NSString * _Nonnull)domain code:(NSInteger)code userInfo:(NSDictionary * _Nullable)dict SWIFT_UNAVAILABLE;
@end


/// :nodoc: For internal use only.
SWIFT_CLASS("_TtC8SAPOData10FatalError")
@interface FatalError : ErrorBase
- (id _Nonnull)throwAny SWIFT_WARN_UNUSED_RESULT;
- (void)throwVoid;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc: For internal use only.
SWIFT_CLASS("_TtC8SAPOData15AssertException")
@interface AssertException : FatalError
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// \param message Message text.
///
///
/// returns:
/// A new exception with the specified message text.
+ (AssertException * _Nonnull)withMessage:(NSString * _Nonnull)message SWIFT_WARN_UNUSED_RESULT;
/// :nodoc: For internal use only.
+ (AssertException * _Nonnull)withMessage_NS:(NSString * _Nonnull)message SWIFT_WARN_UNUSED_RESULT;
@end


/// Abstract base class for data exceptions.
SWIFT_CLASS("_TtC8SAPOData9DataError")
@interface DataError : ErrorBase
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Exception thrown when data does not match the expected format.
SWIFT_CLASS("_TtC8SAPOData15DataFormatError")
@interface DataFormatError : DataError
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc: For internal use only.
SWIFT_CLASS("_TtC8SAPOData9AtomError")
@interface AtomError : DataFormatError
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Thrown when a value cannot be parsed from ATOM format.
/// \param value Text of value that could not be parsed.
///
/// \param type Name of expected data type.
///
+ (AtomError * _Nonnull)cannotParse:(NSString * _Nonnull)value type:(NSString * _Nonnull)type SWIFT_WARN_UNUSED_RESULT;
/// :nodoc: For internal use only.
+ (AtomError * _Nonnull)cannotParse_NS:(NSString * _Nonnull)value type:(NSString * _Nonnull)type SWIFT_WARN_UNUSED_RESULT;
/// \param cause Root cause.
///
///
/// returns:
/// A new exception with the specified root cause.
+ (AtomError * _Nonnull)withCause:(NSError * _Nonnull)cause SWIFT_WARN_UNUSED_RESULT;
/// \param message Message text.
///
///
/// returns:
/// A new exception with the specified message text.
+ (AtomError * _Nonnull)withMessage:(NSString * _Nonnull)message SWIFT_WARN_UNUSED_RESULT;
/// :nodoc: For internal use only.
+ (AtomError * _Nonnull)withMessage_NS:(NSString * _Nonnull)message SWIFT_WARN_UNUSED_RESULT;
@end


/// Exception thrown when a problem is detected with a data schema.
SWIFT_CLASS("_TtC8SAPOData15DataSchemaError")
@interface DataSchemaError : DataError
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Exception thrown when an error occurs during the parsing of an Open Data Protocol (<a href="http://odata.org/">OData</a>) service metadata (<a href="http://docs.oasis-open.org/odata/odata/v4.0/os/part3-csdl/odata-v4.0-os-part3-csdl.html">CSDL</a>) document.
/// seealso:
/// <code>CsdlParser</code>.
SWIFT_CLASS("_TtC8SAPOData9CSDLError")
@interface CSDLError : DataSchemaError
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Construct a CSDL exception which indicates the metadata document at a particular <code>url</code> cannot be fetched.
/// \param url Metadata URL.
///
+ (CSDLError * _Nonnull)cannotFetchWithUrl:(NSString * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
/// :nodoc: For internal use only.
+ (CSDLError * _Nonnull)cannotFetch_NSWithUrl:(NSString * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
/// Construct a CSDL exception which indicates the metadata document at a particular <code>url</code> references an unknown schema.
/// \param ns Schema namespace.
///
+ (CSDLError * _Nonnull)unknownSchemaWithNs:(NSString * _Nonnull)ns SWIFT_WARN_UNUSED_RESULT;
/// :nodoc: For internal use only.
+ (CSDLError * _Nonnull)unknownSchema_NSWithNs:(NSString * _Nonnull)ns SWIFT_WARN_UNUSED_RESULT;
/// \param cause Root cause.
///
///
/// returns:
/// A new exception with the specified root cause.
+ (CSDLError * _Nonnull)withCause:(NSError * _Nullable)cause SWIFT_WARN_UNUSED_RESULT;
/// \param cause Root cause.
///
/// \param message Message text.
///
///
/// returns:
/// A new exception with the specified root cause and message text.
+ (CSDLError * _Nonnull)withCauseAndMessageWithCause:(NSError * _Nullable)cause message:(NSString * _Nullable)message SWIFT_WARN_UNUSED_RESULT;
/// :nodoc: For internal use only.
+ (CSDLError * _Nonnull)withCauseAndMessage_NSWithCause:(NSError * _Nullable)cause message:(NSString * _Nullable)message SWIFT_WARN_UNUSED_RESULT;
/// \param message Message text.
///
///
/// returns:
/// A new exception with the specified message text.
+ (CSDLError * _Nonnull)withMessage:(NSString * _Nullable)message SWIFT_WARN_UNUSED_RESULT;
/// :nodoc: For internal use only.
+ (CSDLError * _Nonnull)withMessage_NS:(NSString * _Nullable)message SWIFT_WARN_UNUSED_RESULT;
@end


/// :nodoc: For internal use only.
SWIFT_CLASS("_TtC8SAPOData13CastException")
@interface CastException : FatalError
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// \param value Any value, including <code>nil</code>.
///
/// \param type Cast target type.
///
///
/// returns:
/// A CastException indicating that <code>value</code> cannot be cast to <code>type</code>.
+ (CastException * _Nonnull)cannotCast:(id _Nullable)value type:(NSString * _Nonnull)type SWIFT_WARN_UNUSED_RESULT;
/// :nodoc: For internal use only.
+ (CastException * _Nonnull)cannotCast_NS:(id _Nullable)value type:(NSString * _Nonnull)type SWIFT_WARN_UNUSED_RESULT;
/// \param message Message text.
///
///
/// returns:
/// A new exception with the specified message text.
+ (CastException * _Nonnull)withMessage:(NSString * _Nonnull)message SWIFT_WARN_UNUSED_RESULT;
/// :nodoc: For internal use only.
+ (CastException * _Nonnull)withMessage_NS:(NSString * _Nonnull)message SWIFT_WARN_UNUSED_RESULT;
@end




/// Exception thrown when a request fails due to a data network issue.
SWIFT_CLASS("_TtC8SAPOData16DataNetworkError")
@interface DataNetworkError : DataError
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Exception thrown when a query cannot be parsed or evaluated.
SWIFT_CLASS("_TtC8SAPOData14DataQueryError")
@interface DataQueryError : DataError
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Thrown when a value cannot be parsed from a query URL.
/// \param value Text of value that could not be parsed.
///
/// \param type Name of expected data type.
///
+ (DataQueryError * _Nonnull)cannotParse:(NSString * _Nonnull)value type:(NSString * _Nonnull)type SWIFT_WARN_UNUSED_RESULT;
/// :nodoc: For internal use only.
+ (DataQueryError * _Nonnull)cannotParse_NS:(NSString * _Nonnull)value type:(NSString * _Nonnull)type SWIFT_WARN_UNUSED_RESULT;
/// \param cause Root cause.
///
///
/// returns:
/// A new exception with the specified root cause.
+ (DataQueryError * _Nonnull)withCause:(NSError * _Nullable)cause SWIFT_WARN_UNUSED_RESULT;
/// \param message Message text.
///
///
/// returns:
/// A new exception with the specified message text.
+ (DataQueryError * _Nonnull)withMessage:(NSString * _Nullable)message SWIFT_WARN_UNUSED_RESULT;
/// :nodoc: For internal use only.
+ (DataQueryError * _Nonnull)withMessage_NS:(NSString * _Nullable)message SWIFT_WARN_UNUSED_RESULT;
@end



/// Exception thrown when a <code>DataService</code> request fails due to a data service issue.
SWIFT_CLASS("_TtC8SAPOData16DataServiceError")
@interface DataServiceError : DataError
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
/// If the data service request failed with an HTTP error code, then <code>status</code> holds the error code. Otherwise zero.
@property (nonatomic) NSInteger status;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Text describing <code>status</code> code.
/// seealso:
/// <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html">http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html</a>.
@property (nonatomic, readonly, copy) NSString * _Nonnull statusText;
/// :nodoc: For internal use only.
@property (nonatomic, readonly, strong) NSString * _Nonnull statusText_NS;
/// \param cause Root cause.
///
///
/// returns:
/// A new exception with the specified root cause.
+ (DataServiceError * _Nonnull)withCause:(NSError * _Nullable)cause SWIFT_WARN_UNUSED_RESULT;
/// \param cause Root cause.
///
/// \param message Message text.
///
///
/// returns:
/// A new exception with the specified root cause and message text.
+ (DataServiceError * _Nonnull)withCauseAndMessageWithCause:(NSError * _Nullable)cause message:(NSString * _Nullable)message SWIFT_WARN_UNUSED_RESULT;
/// :nodoc: For internal use only.
+ (DataServiceError * _Nonnull)withCauseAndMessage_NSWithCause:(NSError * _Nullable)cause message:(NSString * _Nullable)message SWIFT_WARN_UNUSED_RESULT;
/// \param message Message text.
///
///
/// returns:
/// A new exception with the specified message text.
+ (DataServiceError * _Nonnull)withMessage:(NSString * _Nullable)message SWIFT_WARN_UNUSED_RESULT;
/// :nodoc: For internal use only.
+ (DataServiceError * _Nonnull)withMessage_NS:(NSString * _Nullable)message SWIFT_WARN_UNUSED_RESULT;
/// \param status Error code.
///
/// \param message Message text.
///
///
/// returns:
/// A new exception with the specified error code and message text.
+ (DataServiceError * _Nonnull)withStatus:(NSInteger)status message:(NSString * _Nullable)message SWIFT_WARN_UNUSED_RESULT;
/// :nodoc: For internal use only.
+ (DataServiceError * _Nonnull)withStatus_NS:(NSInteger)status message:(NSString * _Nullable)message SWIFT_WARN_UNUSED_RESULT;
@end


/// Exception thrown when a <code>DataService</code> request fails due to a data storage issue.
SWIFT_CLASS("_TtC8SAPOData16DataStorageError")
@interface DataStorageError : DataError
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc: For internal use only.
SWIFT_CLASS("_TtC8SAPOData15DataStreamError")
@interface DataStreamError : DataError
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// \param cause Root cause.
///
///
/// returns:
/// A new exception with the specified root cause.
+ (DataStreamError * _Nonnull)withCause:(NSError * _Nullable)cause SWIFT_WARN_UNUSED_RESULT;
/// \param message Message text.
///
///
/// returns:
/// A new exception with the specified message text.
+ (DataStreamError * _Nonnull)withMessage:(NSString * _Nullable)message SWIFT_WARN_UNUSED_RESULT;
/// :nodoc: For internal use only.
+ (DataStreamError * _Nonnull)withMessage_NS:(NSString * _Nullable)message SWIFT_WARN_UNUSED_RESULT;
@end


/// :nodoc: For internal use only.
SWIFT_CLASS("_TtC8SAPOData18EmptyListException")
@interface EmptyListException : FatalError
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// \param message Message text.
///
///
/// returns:
/// A new exception with the specified message text.
+ (EmptyListException * _Nonnull)withMessage:(NSString * _Nonnull)message SWIFT_WARN_UNUSED_RESULT;
/// :nodoc: For internal use only.
+ (EmptyListException * _Nonnull)withMessage_NS:(NSString * _Nonnull)message SWIFT_WARN_UNUSED_RESULT;
@end



/// :nodoc:
SWIFT_CLASS("_TtC8SAPOData11ErrorObject")
@interface ErrorObject : ErrorBase
- (nonnull instancetype)init:(NSError * _Nonnull)error OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end



/// :nodoc: For internal use only.
SWIFT_CLASS("_TtC8SAPOData9FileError")
@interface FileError : DataStorageError
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// \param cause Root cause.
///
///
/// returns:
/// A new exception with the specified root cause.
+ (FileError * _Nonnull)withCause:(NSError * _Nullable)cause SWIFT_WARN_UNUSED_RESULT;
/// \param cause Root cause.
///
/// \param message Message text.
///
///
/// returns:
/// A new exception with the specified root cause and message text.
+ (FileError * _Nonnull)withCauseAndMessageWithCause:(NSError * _Nullable)cause message:(NSString * _Nonnull)message SWIFT_WARN_UNUSED_RESULT;
/// :nodoc: For internal use only.
+ (FileError * _Nonnull)withCauseAndMessage_NSWithCause:(NSError * _Nullable)cause message:(NSString * _Nonnull)message SWIFT_WARN_UNUSED_RESULT;
/// \param message Message text.
///
///
/// returns:
/// A new exception with the specified message text.
+ (FileError * _Nonnull)withMessage:(NSString * _Nullable)message SWIFT_WARN_UNUSED_RESULT;
/// :nodoc: For internal use only.
+ (FileError * _Nonnull)withMessage_NS:(NSString * _Nullable)message SWIFT_WARN_UNUSED_RESULT;
@end


/// :nodoc: For internal use only.
SWIFT_CLASS("_TtC8SAPOData9JsonError")
@interface JsonError : DataFormatError
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Thrown when a value cannot be parsed from JSON format.
/// \param value Text of value that could not be parsed.
///
/// \param type Name of expected data type.
///
+ (JsonError * _Nonnull)cannotParse:(NSString * _Nonnull)value type:(NSString * _Nonnull)type SWIFT_WARN_UNUSED_RESULT;
/// :nodoc: For internal use only.
+ (JsonError * _Nonnull)cannotParse_NS:(NSString * _Nonnull)value type:(NSString * _Nonnull)type SWIFT_WARN_UNUSED_RESULT;
/// \param cause Root cause.
///
///
/// returns:
/// A new exception with the specified root cause.
+ (JsonError * _Nonnull)withCause:(NSError * _Nonnull)cause SWIFT_WARN_UNUSED_RESULT;
/// \param message Message text.
///
///
/// returns:
/// A new exception with the specified message text.
+ (JsonError * _Nonnull)withMessage:(NSString * _Nonnull)message SWIFT_WARN_UNUSED_RESULT;
/// :nodoc: For internal use only.
+ (JsonError * _Nonnull)withMessage_NS:(NSString * _Nonnull)message SWIFT_WARN_UNUSED_RESULT;
@end


/// :nodoc: For internal use only.
SWIFT_CLASS("_TtC8SAPOData18ListIndexException")
@interface ListIndexException : FatalError
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// \param message Message text.
///
///
/// returns:
/// A new exception with the specified message text.
+ (ListIndexException * _Nonnull)withMessage:(NSString * _Nonnull)message SWIFT_WARN_UNUSED_RESULT;
/// :nodoc: For internal use only.
+ (ListIndexException * _Nonnull)withMessage_NS:(NSString * _Nonnull)message SWIFT_WARN_UNUSED_RESULT;
@end


/// :nodoc: For internal use only.
SWIFT_CLASS("_TtC8SAPOData21MissingEntryException")
@interface MissingEntryException : FatalError
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// \param message Message text.
///
///
/// returns:
/// A new exception with the specified message text.
+ (MissingEntryException * _Nonnull)withMessage:(NSString * _Nonnull)message SWIFT_WARN_UNUSED_RESULT;
/// :nodoc: For internal use only.
+ (MissingEntryException * _Nonnull)withMessage_NS:(NSString * _Nonnull)message SWIFT_WARN_UNUSED_RESULT;
@end


/// :nodoc: For internal use only.
SWIFT_CLASS("_TtC8SAPOData18NotUniqueException")
@interface NotUniqueException : FatalError
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// \param message Message text.
///
///
/// returns:
/// A new exception with the specified message text.
+ (NotUniqueException * _Nonnull)withMessage:(NSString * _Nonnull)message SWIFT_WARN_UNUSED_RESULT;
/// :nodoc: For internal use only.
+ (NotUniqueException * _Nonnull)withMessage_NS:(NSString * _Nonnull)message SWIFT_WARN_UNUSED_RESULT;
@end


/// Exception thrown when a query result cannot be converted to the expected type.
SWIFT_CLASS("_TtC8SAPOData16QueryResultError")
@interface QueryResultError : DataError
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// \param cause Root cause.
///
///
/// returns:
/// A new exception with the specified root cause.
+ (QueryResultError * _Nonnull)withCause:(NSError * _Nullable)cause SWIFT_WARN_UNUSED_RESULT;
/// \param message Message text.
///
///
/// returns:
/// A new exception with the specified message text.
+ (QueryResultError * _Nonnull)withMessage:(NSString * _Nullable)message SWIFT_WARN_UNUSED_RESULT;
/// :nodoc: For internal use only.
+ (QueryResultError * _Nonnull)withMessage_NS:(NSString * _Nullable)message SWIFT_WARN_UNUSED_RESULT;
@end


/// :nodoc: For internal use only.
SWIFT_CLASS("_TtC8SAPOData18UndefinedException")
@interface UndefinedException : FatalError
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// \param message Message text.
///
///
/// returns:
/// A new exception with the specified message text.
+ (UndefinedException * _Nonnull)withMessage:(NSString * _Nonnull)message SWIFT_WARN_UNUSED_RESULT;
/// :nodoc: For internal use only.
+ (UndefinedException * _Nonnull)withMessage_NS:(NSString * _Nonnull)message SWIFT_WARN_UNUSED_RESULT;
@end


/// :nodoc: For internal use only.
SWIFT_CLASS("_TtC8SAPOData8XmlError")
@interface XmlError : DataFormatError
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// \param message Message text.
///
///
/// returns:
/// A new exception with the specified message text.
+ (XmlError * _Nonnull)withMessage:(NSString * _Nonnull)message SWIFT_WARN_UNUSED_RESULT;
/// :nodoc: For internal use only.
+ (XmlError * _Nonnull)withMessage_NS:(NSString * _Nonnull)message SWIFT_WARN_UNUSED_RESULT;
@end

#pragma clang diagnostic pop
